{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1458733048536},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1458733048536},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1458733048536},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1458733048538},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1458733048538},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1458733048538},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1458733048535},{"_id":"source/_posts/reactStart.md","hash":"7f10fcf19def7317adfc3a4e2e7886d944465e25","modified":1460428442505},{"_id":"source/start/index.html","hash":"6051fad1a9ceecf10dd0240e6a12d01eb11f2572","modified":1460353627658},{"_id":"source/start/index.md","hash":"2e095c43db3c9a7226fbd18b95d75a81199b1aa6","modified":1460353626419},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1458733048560},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1458733048561},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1458733048562},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1458733048562},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1458733048562},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1458733048562},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1458733048576},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1458733048576},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1458733048577},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1458733048577},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1458733048577},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1458733048577},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1458733048577},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1458733048563},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1458733048618},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1458733048619},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1458733048619},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1458733048619},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1458733048619},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1458733048619},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1458733048619},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1458733048619},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1458733048619},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1458733048621},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1458733048618},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1458733048618},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1458733048618},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1458733048618},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1458733048618},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1458733048611},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1458733048614},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1458733048614},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458733048611},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458733048614},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458733048614},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458733048614},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458733048615},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458733048615},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1458733048615},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1458733048615},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1458733048615},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1458733048611},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1458733048647},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1458733048647},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1458733048647},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1458733048647},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1458733048648},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1458733048648},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1458733048643},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1458733048646},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1458733048646},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1458733048640},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1458733048640},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"36eefe6332b86b66023a9884b754d305235846b4","modified":1458733048641},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1458733048641},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1458733048641},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1458733048641},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1458733048641},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1458733048640},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1458733048641},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1458733048646},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1458733048647},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1458733048646},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458733048643},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1458733048646},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1458733048646},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1458733048646},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1458733048646},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1458733048646},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1458733048647},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1458733048648},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1458733048648},{"_id":"public/2016/03/23/hello-world/index.html","hash":"f9ac3299fa474dadf7c5ec1f4ebddfbeefc6387e","modified":1460428452385},{"_id":"public/archives/index.html","hash":"42494b9acf0ef276eb02ca4d4dc3745b361d4da6","modified":1460428452389},{"_id":"public/archives/2016/index.html","hash":"276c3330ae431530c9c2f5c1d0c6c1545a0c9d1d","modified":1460428452390},{"_id":"public/archives/2016/03/index.html","hash":"ba7c366d5869be834b43fa7ba6971489b908c255","modified":1460428452390},{"_id":"public/start/index.html","hash":"3ecdaf265cc061e01251d85214403b8e94d7f4b3","modified":1460428452391},{"_id":"public/index.html","hash":"b3858820f17810d39f617e00339ba98b040ee46e","modified":1460428452391},{"_id":"public/archives/2016/04/index.html","hash":"81e0d5821d633cf9194230b1ebba2b5571775551","modified":1460428452390},{"_id":"public/2016/04/11/reactStart/index.html","hash":"7a5cc09070025c9b411220eeadd75fff3f4c0032","modified":1460428452391},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1460366138684},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1460366138684},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1460366138684},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1460366138684},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1460366139646},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1460366139646},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1460366139647},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1460366139647},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1460366139647},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1460366139647},{"_id":"public/css/style.css","hash":"e9ae89d3eaf09b4fb3b48f3da5e58e74ea5875b0","modified":1460366139657},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1460366139660},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1460366139676},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1460366139677},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1460366139677},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1460366139677},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1460366139678},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1460366139678},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1460366139678},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1460366139678},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1460366139678},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1460366139684},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1460366139684},{"_id":"public/tags/react/index.html","hash":"4f3e303db19251e06b05411ce794e44812426f24","modified":1460428452392}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE html><html><head><meta charset=\"utf-8\"><meta name=\"date\" content=\"2016-03-28 14:31:16\"><style>body {\n  width: 45em;\n  border: 1px solid #ddd;\n  outline: 1300px solid #fff;\n  margin: 16px auto;\n}\n\nbody .markdown-body\n{\n  padding: 30px;\n}\n\n@font-face {\n  font-family: fontawesome-mini;\n  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');\n}\n\n@font-face {\n  font-family: octicons-anchor;\n  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');\n}\n\n.markdown-body {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  color: #333333;\n  overflow: hidden;\n  font-family: \"Helvetica Neue\", Helvetica, \"Segoe UI\", Arial, freesans, sans-serif;\n  font-size: 16px;\n  line-height: 1.6;\n  word-wrap: break-word;\n}\n\n.markdown-body a {\n  background: transparent;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline: 0;\n}\n\n.markdown-body b,\n.markdown-body strong {\n  font-weight: bold;\n}\n\n.markdown-body mark {\n  background: #ff0;\n  color: #000;\n  font-style: italic;\n  font-weight: bold;\n}\n\n.markdown-body sub,\n.markdown-body sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n.markdown-body sup {\n  top: -0.5em;\n}\n.markdown-body sub {\n  bottom: -0.25em;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border: 0;\n}\n\n.markdown-body hr {\n  -moz-box-sizing: content-box;\n  box-sizing: content-box;\n  height: 0;\n}\n\n.markdown-body pre {\n  overflow: auto;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body input {\n  color: inherit;\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body html input[disabled] {\n  cursor: default;\n}\n\n.markdown-body input {\n  line-height: normal;\n}\n\n.markdown-body input[type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body table {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body .codehilitetable {\n  border: 0;\n  border-spacing: 0;\n}\n\n.markdown-body .codehilitetable tr {\n  border: 0;\n}\n\n.markdown-body .codehilitetable pre,\n.markdown-body .codehilitetable div.codehilite {\n  margin: 0;\n}\n\n.markdown-body .linenos,\n.markdown-body .code,\n.markdown-body .codehilitetable td {\n  border: 0;\n  padding: 0;\n}\n\n.markdown-body td:not(.linenos) .linenodiv {\n  padding: 0 !important;\n}\n\n.markdown-body .code {\n  width: 100%;\n}\n\n.markdown-body .linenos div pre,\n.markdown-body .linenodiv pre,\n.markdown-body .linenodiv {\n  border: 0;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-border-top-left-radius: 3px;\n  -webkit-border-bottom-left-radius: 3px;\n  -moz-border-radius-topleft: 3px;\n  -moz-border-radius-bottomleft: 3px;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n\n.markdown-body .code div pre,\n.markdown-body .code div {\n  border: 0;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-border-top-right-radius: 3px;\n  -webkit-border-bottom-right-radius: 3px;\n  -moz-border-radius-topright: 3px;\n  -moz-border-radius-bottomright: 3px;\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n\n.markdown-body * {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font: 13px Helvetica, arial, freesans, clean, sans-serif, \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  line-height: 1.4;\n}\n\n.markdown-body a {\n  color: #4183c4;\n  text-decoration: none;\n}\n\n.markdown-body a:hover,\n.markdown-body a:focus,\n.markdown-body a:active {\n  text-decoration: underline;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #ddd;\n}\n\n.markdown-body hr:before,\n.markdown-body hr:after {\n  display: table;\n  content: \" \";\n}\n\n.markdown-body hr:after {\n  clear: both;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 15px;\n  margin-bottom: 15px;\n  line-height: 1.1;\n}\n\n.markdown-body h1 {\n  font-size: 30px;\n}\n\n.markdown-body h2 {\n  font-size: 21px;\n}\n\n.markdown-body h3 {\n  font-size: 16px;\n}\n\n.markdown-body h4 {\n  font-size: 14px;\n}\n\n.markdown-body h5 {\n  font-size: 12px;\n}\n\n.markdown-body h6 {\n  font-size: 11px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  background-color: #e7e7e7;\n  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);\n  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);\n  background-image: linear-gradient(#fefefe, #e7e7e7);\n  background-repeat: repeat-x;\n  border-radius: 2px;\n  border: 1px solid #cfcfcf;\n  color: #000;\n  padding: 3px 5px;\n  line-height: 10px;\n  font: 11px Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  display: inline-block;\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body .headeranchor-link {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  display: block;\n  padding-right: 6px;\n  padding-left: 30px;\n  margin-left: -30px;\n}\n\n.markdown-body .headeranchor-link:focus {\n  outline: none;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  position: relative;\n  margin-top: 1em;\n  margin-bottom: 16px;\n  font-weight: bold;\n  line-height: 1.4;\n}\n\n.markdown-body h1 .headeranchor,\n.markdown-body h2 .headeranchor,\n.markdown-body h3 .headeranchor,\n.markdown-body h4 .headeranchor,\n.markdown-body h5 .headeranchor,\n.markdown-body h6 .headeranchor {\n  display: none;\n  color: #000;\n  vertical-align: middle;\n}\n\n.markdown-body h1:hover .headeranchor-link,\n.markdown-body h2:hover .headeranchor-link,\n.markdown-body h3:hover .headeranchor-link,\n.markdown-body h4:hover .headeranchor-link,\n.markdown-body h5:hover .headeranchor-link,\n.markdown-body h6:hover .headeranchor-link {\n  height: 1em;\n  padding-left: 8px;\n  margin-left: -30px;\n  line-height: 1;\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .headeranchor-link .headeranchor,\n.markdown-body h2:hover .headeranchor-link .headeranchor,\n.markdown-body h3:hover .headeranchor-link .headeranchor,\n.markdown-body h4:hover .headeranchor-link .headeranchor,\n.markdown-body h5:hover .headeranchor-link .headeranchor,\n.markdown-body h6:hover .headeranchor-link .headeranchor {\n  display: inline-block;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2.25em;\n  line-height: 1.2;\n  border-bottom: 1px solid #eee;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.75em;\n  line-height: 1.225;\n  border-bottom: 1px solid #eee;\n}\n\n.markdown-body h3 {\n  font-size: 1.5em;\n  line-height: 1.43;\n}\n\n.markdown-body h4 {\n  font-size: 1.25em;\n}\n\n.markdown-body h5 {\n  font-size: 1em;\n}\n\n.markdown-body h6 {\n  font-size: 1em;\n  color: #777;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre,\n.markdown-body .admonition {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 4px;\n  padding: 0;\n  margin: 16px 0;\n  background-color: #e7e7e7;\n  border: 0 none;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: bold;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body blockquote {\n  padding: 0 15px;\n  color: #777;\n  border-left: 4px solid #ddd;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n  word-break: normal;\n  word-break: keep-all;\n}\n\n.markdown-body table th {\n  font-weight: bold;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #ddd;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #ccc;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f8f8f8;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.markdown-body code,\n.markdown-body samp {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(0,0,0,0.04);\n  border-radius: 3px;\n}\n\n.markdown-body code:before,\n.markdown-body code:after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .codehilite {\n  margin-bottom: 16px;\n}\n\n.markdown-body .codehilite pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f7f7f7;\n  border-radius: 3px;\n}\n\n.markdown-body .codehilite pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: initial;\n  padding: 0;\n  margin: 0;\n  overflow: initial;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code:before,\n.markdown-body pre code:after {\n  content: normal;\n}\n\n/* Admonition */\n.markdown-body .admonition {\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  position: relative;\n  border-radius: 3px;\n  border: 1px solid #e0e0e0;\n  border-left: 6px solid #333;\n  padding: 10px 10px 10px 30px;\n}\n\n.markdown-body .admonition table {\n  color: #333;\n}\n\n.markdown-body .admonition p {\n  padding: 0;\n}\n\n.markdown-body .admonition-title {\n  font-weight: bold;\n  margin: 0;\n}\n\n.markdown-body .admonition>.admonition-title {\n  color: #333;\n}\n\n.markdown-body .attention>.admonition-title {\n  color: #a6d796;\n}\n\n.markdown-body .caution>.admonition-title {\n  color: #d7a796;\n}\n\n.markdown-body .hint>.admonition-title {\n  color: #96c6d7;\n}\n\n.markdown-body .danger>.admonition-title {\n  color: #c25f77;\n}\n\n.markdown-body .question>.admonition-title {\n  color: #96a6d7;\n}\n\n.markdown-body .note>.admonition-title {\n  color: #d7c896;\n}\n\n.markdown-body .admonition:before,\n.markdown-body .attention:before,\n.markdown-body .caution:before,\n.markdown-body .hint:before,\n.markdown-body .danger:before,\n.markdown-body .question:before,\n.markdown-body .note:before {\n  font: normal normal 16px fontawesome-mini;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  line-height: 1.5;\n  color: #333;\n  position: absolute;\n  left: 0;\n  top: 0;\n  padding-top: 10px;\n  padding-left: 10px;\n}\n\n.markdown-body .admonition:before {\n  content: \"\\f056\\00a0\";\n  color: 333;\n}\n\n.markdown-body .attention:before {\n  content: \"\\f058\\00a0\";\n  color: #a6d796;\n}\n\n.markdown-body .caution:before {\n  content: \"\\f06a\\00a0\";\n  color: #d7a796;\n}\n\n.markdown-body .hint:before {\n  content: \"\\f05a\\00a0\";\n  color: #96c6d7;\n}\n\n.markdown-body .danger:before {\n  content: \"\\f057\\00a0\";\n  color: #c25f77;\n}\n\n.markdown-body .question:before {\n  content: \"\\f059\\00a0\";\n  color: #96a6d7;\n}\n\n.markdown-body .note:before {\n  content: \"\\f040\\00a0\";\n  color: #d7c896;\n}\n\n.markdown-body .admonition::after {\n  content: normal;\n}\n\n.markdown-body .attention {\n  border-left: 6px solid #a6d796;\n}\n\n.markdown-body .caution {\n  border-left: 6px solid #d7a796;\n}\n\n.markdown-body .hint {\n  border-left: 6px solid #96c6d7;\n}\n\n.markdown-body .danger {\n  border-left: 6px solid #c25f77;\n}\n\n.markdown-body .question {\n  border-left: 6px solid #96a6d7;\n}\n\n.markdown-body .note {\n  border-left: 6px solid #d7c896;\n}\n\n.markdown-body .admonition>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body .admonition>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n/* progress bar*/\n.markdown-body .progress {\n  display: block;\n  width: 300px;\n  margin: 10px 0;\n  height: 24px;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  background-color: #ededed;\n  position: relative;\n  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);\n}\n\n.markdown-body .progress-label {\n  position: absolute;\n  text-align: center;\n  font-weight: bold;\n  width: 100%; margin: 0;\n  line-height: 24px;\n  color: #333;\n  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;\n  -webkit-font-smoothing: antialiased !important;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.markdown-body .progress-bar {\n  height: 24px;\n  float: left;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  background-color: #96c6d7;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);\n  background-size: 30px 30px;\n  background-image: -webkit-linear-gradient(\n    135deg, rgba(255, 255, 255, .4) 27%,\n    transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%,\n    transparent 77%, transparent\n  );\n  background-image: -moz-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: -ms-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: -o-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n}\n\n.markdown-body .progress-100plus .progress-bar {\n  background-color: #a6d796;\n}\n\n.markdown-body .progress-80plus .progress-bar {\n  background-color: #c6d796;\n}\n\n.markdown-body .progress-60plus .progress-bar {\n  background-color: #d7c896;\n}\n\n.markdown-body .progress-40plus .progress-bar {\n  background-color: #d7a796;\n}\n\n.markdown-body .progress-20plus .progress-bar {\n  background-color: #d796a6;\n}\n\n.markdown-body .progress-0plus .progress-bar {\n  background-color: #c25f77;\n}\n\n.markdown-body .candystripe-animate .progress-bar{\n  -webkit-animation: animate-stripes 3s linear infinite;\n  -moz-animation: animate-stripes 3s linear infinite;\n  animation: animate-stripes 3s linear infinite;\n}\n\n@-webkit-keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n@-moz-keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n@keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n.markdown-body .gloss .progress-bar {\n  box-shadow:\n    inset 0 4px 12px rgba(255, 255, 255, .7),\n    inset 0 -12px 0 rgba(0, 0, 0, .05);\n}\n\n/* Multimarkdown Critic Blocks */\n.markdown-body .critic_mark {\n  background: #ff0;\n}\n\n.markdown-body .critic_delete {\n  color: #c82829;\n  text-decoration: line-through;\n}\n\n.markdown-body .critic_insert {\n  color: #718c00 ;\n  text-decoration: underline;\n}\n\n.markdown-body .critic_comment {\n  color: #8e908c;\n  font-style: italic;\n}\n\n.markdown-body .headeranchor {\n  font: normal normal 16px octicons-anchor;\n  line-height: 1;\n  display: inline-block;\n  text-decoration: none;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.headeranchor:before {\n  content: '\\f05c';\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 4px 0.25em -20px;\n  vertical-align: middle;\n}\n\n/* Media */\n@media only screen and (min-width: 480px) {\n  .markdown-body {\n    font-size:14px;\n  }\n}\n\n@media only screen and (min-width: 768px) {\n  .markdown-body {\n    font-size:16px;\n  }\n}\n\n@media print {\n  .markdown-body * {\n    background: transparent !important;\n    color: black !important;\n    filter:none !important;\n    -ms-filter: none !important;\n  }\n\n  .markdown-body {\n    font-size:12pt;\n    max-width:100%;\n    outline:none;\n    border: 0;\n  }\n\n  .markdown-body a,\n  .markdown-body a:visited {\n    text-decoration: underline;\n  }\n\n  .markdown-body .headeranchor-link {\n    display: none;\n  }\n\n  .markdown-body a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n\n  .markdown-body abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n\n  .markdown-body .ir a:after,\n  .markdown-body a[href^=\"javascript:\"]:after,\n  .markdown-body a[href^=\"#\"]:after {\n    content: \"\";\n  }\n\n  .markdown-body pre {\n    white-space: pre;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n  }\n\n  .markdown-body pre,\n  .markdown-body blockquote {\n    border: 1px solid #999;\n    padding-right: 1em;\n    page-break-inside: avoid;\n  }\n\n  .markdown-body .progress,\n  .markdown-body .progress-bar {\n    -moz-box-shadow: none;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n  }\n\n  .markdown-body .progress {\n    border: 1px solid #ddd;\n  }\n\n  .markdown-body .progress-bar {\n    height: 22px;\n    border-right: 1px solid #ddd;\n  }\n\n  .markdown-body tr,\n  .markdown-body img {\n    page-break-inside: avoid;\n  }\n\n  .markdown-body img {\n    max-width: 100% !important;\n  }\n\n  .markdown-body p,\n  .markdown-body h2,\n  .markdown-body h3 {\n    orphans: 3;\n    widows: 3;\n  }\n\n  .markdown-body h2,\n  .markdown-body h3 {\n    page-break-after: avoid;\n  }\n}\n</style><title>react -start</title></head><body><article class=\"markdown-body\"><p>React -start</p>\n<h2 id=\"react\"><a name=\"user-content-react\" href=\"#react\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React</h2>\n<ul>\n<li>Facebook</li>\n<li>MVC中的V：M -&gt; V</li>\n<li>和Flux搭配，可以做到MVVM</li>\n<li>默认转义所有字符串，防止XSS攻击</li>\n<li>React认为HTML标签及生成这些标签的代码间存在着内在联系，React设计允许你在构建标签结构时充分利用JS的强大能力，而不必在笨拙的模板语言上浪费时间</li>\n</ul>\n<h2 id=\"why-react\"><a name=\"user-content-why-react\" href=\"#why-react\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Why React?</h2>\n<ul>\n<li>简单：<br />\n  model改变后，react自动处理用户界面的更新；</li>\n<li>声明式：<br />\n  更新界面时，react仅仅会更新变化的部分；</li>\n<li>虚拟Dom<br />\n  React在内存中维护一个快速响应的DOM描述，并利用他来快速地计算出差异，然后更新浏览器中的DOM;</li>\n</ul>\n<h2 id=\"react_1\"><a name=\"user-content-react_1\" href=\"#react_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React 最需要走心的工作</h2>\n<ul>\n<li>构建可组合的、可复用的组件;</li>\n<li>组件的好处：代码复用、测试更加点多;</li>\n</ul>\n<h2 id=\"react-hello-world\"><a name=\"user-content-react-hello-world\" href=\"#react-hello-world\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - hello world</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"./react.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n        &lt;script type=\"text/javascript\"&gt;\n            function h1 (text, style) {\n                return '&lt;h1&gt;'' + text + '&lt;/h1&gt;';\n            }\n            var el = React.createElement('h1', {style: {color: '##00f'}}, 'Hello World!');\n            React.render(el, document.getElementById('app'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"react-\"><a name=\"user-content-react-\" href=\"#react-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 类似的工作</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n        &lt;script type=\"text/javascript\"&gt;\n              function h1 (text, style) {\n                var result;\n                var styleStr;\n\n                if (style) {\n                    styleStr = 'style=\"';\n                    for (var name in style) {\n                        styleStr += name + ':' + style[name] + ';'; \n                    }\n                    styleStr += '\"';\n                }\n\n                if (styleStr) {\n                    result = '&lt;h1 ' + styleStr + '&gt;' + text + '&lt;/h1&gt;';\n                } else {\n                    result = '&lt;h1&gt;' + text + '&lt;/h1&gt;';\n                }\n\n                  return result;\n              }\n\n              function render(target, container) {\n                container.innerHTML = target;\n              }\n\n              render(h1('Hello World!', {color: '##00f'}), document.getElementById('app'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"jsx-javascript-xml\"><a name=\"user-content-jsx-javascript-xml\" href=\"#jsx-javascript-xml\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX - Javascript XML</h2>\n<p>优势：<br />\n- 类HTML标记语言，都是熟悉的语法<br />\n- 抽象了React Element的创建过程<br />\n- 简单直观，可以提升效率且成本很低<br />\n劣势：<br />\n- 在浏览器运行会很慢，项目中需要预处理</p>\n<h2 id=\"jsx-hello-world\"><a name=\"user-content-jsx-hello-world\" href=\"#jsx-hello-world\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX - hello world</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"./react.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"./JSXTransformer.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n        &lt;script type=\"text/jsx\"&gt;\n            React.render(&lt;h1&gt;Hello World, JSX!&lt;/h1&gt;, document.getElementById('app'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"jsx-\"><a name=\"user-content-jsx-\" href=\"#jsx-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX - 工作原理</h2>\n<ol>\n<li>使用JSXTransformer通过监听windows的onload/DOMContentLoaded，来遍历所有&rdquo;text/jsx&rdquo;脚本标签</li>\n<li>获取每个标签的source code并把JSX代码转为react的虚拟dom代码</li>\n<li>最后把react代码添加到新建的script标签中</li>\n<li>预编译的插件是同理，只不过发生在编译阶段</li>\n</ol>\n<h2 id=\"jsx-tips\"><a name=\"user-content-jsx-tips\" href=\"#jsx-tips\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX Tips</h2>\n<ul>\n<li>JSX设置动态属性时，用花括号包裹Javascript变量</li>\n<li>也可以把属性设置为一个函数的调用返回结果</li>\n<li>条件判断支持：三元运输符、&amp;&amp;、||</li>\n<li>key: 列表时会建议使用，重用组件提升渲染性能</li>\n<li>refs：获取创建dom的描述对象 or 获取创建dom的对象, this.refs.usernameInput.getDOMNode() x</li>\n<li>HTML关键词：for &gt; htmlFor, class &gt; className, style: {}</li>\n<li>事件统一使用驼峰式</li>\n</ul>\n<h2 id=\"react-tips\"><a name=\"user-content-react-tips\" href=\"#react-tips\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React Tips</h2>\n<ul>\n<li>React创建的class名称首字母必须大写，不然找不到</li>\n<li>JSX可以不换行，换行时必须使用（）包装，不然会报非法组件错误；</li>\n<li>只能有根一个节点，多个节点会抛错</li>\n<li>内联样式支持对象，名称使用驼峰式，否则不起作用，fontSize</li>\n<li>返回：null、false、React组件</li>\n</ul>\n<h2 id=\"_1\"><a name=\"user-content-_1\" href=\"#_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>组件的复合</h2>\n<ul>\n<li>复用那些接口定义良好的组件来开发新的模块化组件</li>\n<li>this.props.children X</li>\n<li>组件支持 ref=&rdquo;refId&rdquo;  this.refs.refId</li>\n</ul>\n<h2 id=\"react-_1\"><a name=\"user-content-react-_1\" href=\"#react-_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 组件数据流</h2>\n<ul>\n<li>props</li>\n<li>state</li>\n</ul>\n<h2 id=\"react-dom\"><a name=\"user-content-react-dom\" href=\"#react-dom\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - dom对象</h2>\n<ul>\n<li>refs</li>\n</ul>\n<h2 id=\"react-_2\"><a name=\"user-content-react-_2\" href=\"#react-_2\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 组件生命周期</h2>\n<h3 id=\"_2\"><a name=\"user-content-_2\" href=\"#_2\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>组件类创建时</h3>\n<ul>\n<li>getDefaultProps</li>\n</ul>\n<h3 id=\"_3\"><a name=\"user-content-_3\" href=\"#_3\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>初始化</h3>\n<ul>\n<li>getinitialState</li>\n</ul>\n<h3 id=\"_4\"><a name=\"user-content-_4\" href=\"#_4\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>挂载</h3>\n<ul>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>\n<h3 id=\"_5\"><a name=\"user-content-_5\" href=\"#_5\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>更新</h3>\n<ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h3 id=\"_6\"><a name=\"user-content-_6\" href=\"#_6\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>卸载</h3>\n<ul>\n<li>componentWillUnmount</li>\n</ul>\n<h3 id=\"_7\"><a name=\"user-content-_7\" href=\"#_7\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>生命周期</h3>\n<ul>\n<li>Class Create Pahses:<ul>\n<li>invoke while class created and be shared between instances.</li>\n</ul>\n</li>\n<li>Initialization Pahses:<ul>\n<li>constructor: Initialization of state. The instance is now retained.</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>[children&rsquo;s constructors]<ul>\n<li>[children&rsquo;s componentWillMount and render]</li>\n<li>[children&rsquo;s componentDidMount]</li>\n</ul>\n</li>\n<li>componentDidMount</li>\n</ul>\n</li>\n<li>Update Phases:<ul>\n<li>componentWillReceiveProps (only called if parent updated)</li>\n<li>shouldComponentUpdate (default: always returns true to prevent subtle bugs)<ul>\n<li>componentWillUpdate</li>\n<li>render<ul>\n<li>[children&rsquo;s constructors or receive props phases]</li>\n</ul>\n</li>\n<li>componentDidUpdate</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Unmount Phases:<ul>\n<li>componentWillUnmount<ul>\n<li>[children&rsquo;s componentWillUnmount]</li>\n<li>[children destroyed]</li>\n</ul>\n</li>\n<li>(destroyed): The instance is now blank, released by React and ready for GC</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"mixin\"><a name=\"user-content-mixin\" href=\"#mixin\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Mixin</h2>\n<ul>\n<li>独立于组件的</li>\n<li>多个组件可共享的</li>\n<li>对象类型的配置</li>\n</ul>\n<h2 id=\"mixin-demo\"><a name=\"user-content-mixin-demo\" href=\"#mixin-demo\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Mixin - DEMO</h2>\n<pre><code>var userMixin = {\n    getDefaultProps: function () {\n        return {\n            username: '小红'\n        };\n    },\n    renderUser: function (welcomeMsg) {\n        return (\n                &lt;div className=\"user-wrap\"&gt;\n                    &lt;span ref=\"welcomeDesc\" className=\"welcome-user\"&gt;{welcomeMsg}&lt;/span&gt;\n                &lt;/div&gt;\n            );\n    },\n    componentDidMount: function () {\n        console.log('mount');\n    }\n}\n\n\nvar Header = React.createClass({\n    mixins: [userMixin],\n    getInitialState: function () {\n        return {\n            systemName: 'React平台Header'\n        };\n    },\n    render: function () {\n        var welcomeMsg;\n        if (this.props.username) {\n            welcomeMsg = '欢迎，' + this.props.username + '！'\n        };\n        return (\n                &lt;div className=\"header-content\"&gt;\n                    &lt;h1&gt;{this.state.systemName}&lt;/h1&gt;\n                    {\n                        welcomeMsg ? this.renderUser(welcomeMsg) : null\n                    }\n                &lt;/div&gt;\n            );\n    }\n});\n</code></pre>\n<h2 id=\"react-purerendermixin\"><a name=\"user-content-react-purerendermixin\" href=\"#react-purerendermixin\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - PureRenderMixin</h2>\n<ul>\n<li>React组件的渲染函数是“纯粹的” - 同样的props和state，渲染出同样的效果</li>\n<li>可以提升性能 - 在shouldComponentUpdate里检查props、state是否会发生变化</li>\n<li>shouldComponentUpdate的判断结果会影响整个组件子树</li>\n<li>据说props、state比较是浅比较，不适合(特别)复杂的数据结构 x</li>\n</ul>\n<h2 id=\"purerendermixin-shouldcomponentupdate-shallow-check\"><a name=\"user-content-purerendermixin-shouldcomponentupdate-shallow-check\" href=\"#purerendermixin-shouldcomponentupdate-shallow-check\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>PureRenderMixin - shouldComponentUpdate: shallow check</h2>\n<pre><code>/**\n - Performs equality by iterating through keys on an object and returning false\n - when any key has values which are not strictly equal between the arguments.\n - Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  var bHasOwnProperty = hasOwnProperty.bind(objB);\n  for (var i = 0; i &lt; keysA.length; i++) {\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n</code></pre>\n<h3 id=\"react-mixin\"><a name=\"user-content-react-mixin\" href=\"#react-mixin\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - Mixin原理</h3>\n<ul>\n<li>Mixin必须是一个对象</li>\n<li>在React.createClass（源码：ReactClass &gt; createClass: function (spec) {&hellip;}会把Mixin对象融入react对象</li>\n<li>融入过程是通过遍历Mixin的属性（for..in）逐个添加到react对象得prototype上（mixSpecIntoComponent）</li>\n<li>添加之前需要判断是否已经有了相同属性，且此属性是否支持覆盖、是否支持多个、是否需要合并</li>\n<li>添加的方式是：覆盖（override）、合并、多个函数链</li>\n</ul>\n<h3 id=\"react-mixin_1\"><a name=\"user-content-react-mixin_1\" href=\"#react-mixin_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - Mixin融合方式的标准</h3>\n<ul>\n<li>一些基础的属性是不允许覆盖的，比如：setProps、replaceProps、replaceState、isMounted</li>\n<li>渲染的属性是不允许定义多次的，比如：render、shouldComponentUpdate</li>\n<li>需要合并的是那些有返回值的，比如：getDefaultProps、getInitialState</li>\n<li>其他的都支持多个函数链的形式（先执行已有的，在执行Mixin的），比如：willMount、didMount、willUpdate、didUpdate等等</li>\n</ul>\n<h2 id=\"react-_3\"><a name=\"user-content-react-_3\" href=\"#react-_3\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 表单组件</h2>\n<h3 id=\"_8\"><a name=\"user-content-_8\" href=\"#_8\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>受用户交互影响的属性</h3>\n<ul>\n<li>value，用于 input、textarea 组件</li>\n<li>checked，用于类型为 checkbox 或者 radio 的 input 组件</li>\n<li>selected，用于 option 组件</li>\n</ul>\n<h3 id=\"onchange\"><a name=\"user-content-onchange\" href=\"#onchange\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>onChange 回调函数来监听组件变化</h3>\n<ul>\n<li>input 或 textarea 的 value 发生变化时。</li>\n<li>input 的 checked 状态改变时。</li>\n<li>option 的 selected 状态改变时。</li>\n</ul>\n<h3 id=\"controlled-components-\"><a name=\"user-content-controlled-components-\" href=\"#controlled-components-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Controlled Components - 受限组件</h3>\n<ul>\n<li>设置了 value 的 input 是一个受限组件</li>\n</ul>\n<h3 id=\"-demo\"><a name=\"user-content--demo\" href=\"#-demo\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>受限组件 - DEMO</h3>\n<pre><code>var App = React.createClass({\n    getInitialState: function () {\n        return {\n            phone: '15821466666'\n        };\n    },\n    render: function () {\n        return (\n                &lt;div&gt;\n                    &lt;label htmlFor=\"phone\"&gt;手机号：&lt;/label&gt;\n                    &lt;input type='text' id=\"phone\" value={this.state.phone} onChange={this.phoneChangeHlr} /&gt;\n                &lt;/div&gt;\n            );\n    },\n    phoneChangeHlr: function (event) {\n        this.setState({phone: event.target.value});\n    }\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('app'));\n</code></pre>\n<h2 id=\"react-add-ons\"><a name=\"user-content-react-add-ons\" href=\"#react-add-ons\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - add-ons</h2>\n<ul>\n<li>TransitionGroup和CSSTransitionGroup</li>\n<li>LinkedStateMixin - 用于简化用户表单输入数据和组件 state 之间的双向数据绑定</li>\n<li>classSet，用于更加干净简洁地操作 DOM 中的 class 字符串</li>\n<li>cloneWithProps，用于实现 React 组件浅复制，同时改变它们的 props </li>\n<li>update，一个辅助方法，使得在 JavaScript 中处理不可变数据更加容易</li>\n<li>PureRenderMixin，在某些场景下的性能检测器</li>\n</ul>\n<h2 id=\"linkedstatemixin-demo\"><a name=\"user-content-linkedstatemixin-demo\" href=\"#linkedstatemixin-demo\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>LinkedStateMixin - DEMO</h2>\n<pre><code>var LinkedStateMixin = React.addons.LinkedStateMixin;\nvar App = React.createClass({\n    mixins: [LinkedStateMixin],\n    getInitialState: function () {\n        return {\n            phone: '15821466666'\n        };\n    },\n    render: function () {\n        return (\n                &lt;div&gt;\n                    &lt;label htmlFor=\"phone\"&gt;手机号：&lt;/label&gt;\n                    &lt;input type='text' id=\"phone\" valueLink={this.linkState('phone')}  /&gt;\n                &lt;/div&gt;\n            );\n    }\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('app'));\n</code></pre>\n<h2 id=\"webpack\"><a name=\"user-content-webpack\" href=\"#webpack\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>开发工具webpack</h2>\n<h3 id=\"webpack-react-install\"><a name=\"user-content-webpack-react-install\" href=\"#webpack-react-install\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>webpack + react install</h3>\n<ul>\n<li>npm init</li>\n<li>npm install &ndash;save react react</li>\n<li>npm install &ndash;save-dev webpack webpack-dev-server</li>\n<li>npm install &ndash;save-dev jsx-loader css-loader file-loader style-loader url-loader</li>\n</ul>\n<h3 id=\"configuring-webpack\"><a name=\"user-content-configuring-webpack\" href=\"#configuring-webpack\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Configuring webpack</h3>\n<pre><code>var webpack = require('webpack');\n\nmodule.exports = {\n    // 它定义了打包的入口文件，数组中的文件会按顺序进行，并且它会自行解决依赖问题。\n    entry: {\n        main: './pages/main.js',\n    },\n    // 它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径\n    output: {\n        path: __dirname + '/build',\n        publicPath: '/build/',\n        filename: '[name].js'\n    },\n    // Webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。\n    // resolve属性中的extensions数组中用于配置程序可以自行补全哪些后缀。\n    // 比如 Hello.jsx 这样的文件就可以直接用 require(./Hello) 引用。\n    resolve: {\n        extensions: ['', '.js', '.jsx']\n    },\n    // webpack将所有的资源都看做是模块，而模块就需要加载器\n    module: {\n        loaders: [\n            // loaders 指定 jsx-loader 编译后缀名为 .jsx 的文件，\n            // 建议给含有 JSX 的文件添加 .jsx 后缀，\n            // 当然你也可以直接使用 .js 后缀， 相应的 test 配置正则要修改匹配就是。\n            { test: /\\.js?$/, exclude: /node_modules/, loader: 'jsx?harmony' }, \n            { test: /\\.(css)/, loader: 'style-loader!css-loader' },\n            // inline base64 URLs for &lt;=8k images, direct URLs for the rest\n            {test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192' } \n            // loaders: ['react-hot', 'jsx?harmony']\n            // loaders后面如果跟的不是数组，则会报错：LoadersList.js:81 r.forEach(function(r) \n        ]\n    },\n    // 我们可以在plugin参数中配置我们需要用到的各种各样的插件。\n    plugins: [\n        new webpack.NoErrorsPlugin(),\n    ]\n}\n</code></pre>\n<h3 id=\"webpack_1\"><a name=\"user-content-webpack_1\" href=\"#webpack_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Webpack 命令</h3>\n<p>启动webpack命令<br />\n- webpack -d 提供SourceMaps，方便调试<br />\n- webpack -w 提供watch方法，实时进行打包更新<br />\n- webpack &ndash;colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤<br />\n- webpack &ndash;progress 输出的接口带进度<br />\n- webpack &ndash;profile 输出性能数据，可以看到每一步的耗时<br />\n- webpack -p 对打包后的文件进行压缩<br />\n- webpack &ndash;config <filename> 支持指定实用的配置文件，处理release和debug不同的情况</p>\n<h3 id=\"scripts\"><a name=\"user-content-scripts\" href=\"#scripts\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>配置scripts</h3>\n<pre><code>\"scripts\": {\n    \"locDev\": \"webpack -d -w --progress --colors\",\n    \"serDev\": \"webpack-dev-server --progress --colors --port 8082\"\n}\n</code></pre>\n<h3 id=\"_9\"><a name=\"user-content-_9\" href=\"#_9\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>运行</h3>\n<ul>\n<li>npm run locDev</li>\n<li>npm run serDev</li>\n</ul>\n<h3 id=\"react-_4\"><a name=\"user-content-react-_4\" href=\"#react-_4\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 热插拔</h3>\n<ul>\n<li>npm install &ndash;save-dev react-hot-loader</li>\n<li>webpack.config.js: entry 使用数组，并添加 &lsquo;webpack/hot/only-dev-server&rsquo;</li>\n<li>webpack.config.js: loaders: [&lsquo;react-hot&rsquo;, &lsquo;jsx?harmony&rsquo;]</li>\n<li>入口文件添加 module.hot.accept()</li>\n<li>启动：webpack-dev-server -d &ndash;port 8082 &ndash;hot &ndash;progress &ndash;colors</li>\n</ul>\n<h3 id=\"react-_5\"><a name=\"user-content-react-_5\" href=\"#react-_5\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 热拔插多个入口</h3>\n<ul>\n<li>webpack.config.js: entry:<br />\n    entry: {<br />\n        main: [&lsquo;./pages/main/index.js&rsquo;, &lsquo;webpack/hot/only-dev-server&rsquo;],<br />\n        help: [&lsquo;./pages/help/index.js&rsquo;, &lsquo;webpack/hot/only-dev-server&rsquo;]<br />\n    }</li>\n</ul>\n<h2 id=\"react-render\"><a name=\"user-content-react-render\" href=\"#react-render\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - render时机</h2>\n<h3 id=\"-\"><a name=\"user-content--\" href=\"#-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>批量更新 - 事件回调函数</h3>\n<ul>\n<li>事件处理函数中的多次setState/replaceState会被标记为一次批量更新</li>\n<li>事件处理函数本身在React事件机制中是作为一个回调函数被调用，在函数执行完成后才会触发render</li>\n</ul>\n<h3 id=\"-_1\"><a name=\"user-content--_1\" href=\"#-_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>实时更新 - 其他</h3>\n<ul>\n<li>调用setState/replaceState后直接触发render，比如setInterval</li>\n</ul>\n<h3 id=\"render\"><a name=\"user-content-render\" href=\"#render\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>render流程</h3>\n<ul>\n<li>setState/replaceState 修改状态后</li>\n<li>组件添加等待更新的状态列表，并把新的状态压入列表（ReactUpdateQueue.js: enqueueSetState()）</li>\n<li>标记组件为需要重新渲染的组件（dirty components list）ReactUpdates：enqueueUpdate()</li>\n<li>runBatchedUpdates来处理dirty components（调用对应的render）</li>\n</ul>\n<h2 id=\"react-react\"><a name=\"user-content-react-react\" href=\"#react-react\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - React事件系统</h2>\n<ol>\n<li>React初始化时会把事件监听 ReactEventListener 注入到 ReactBrowserEventEmitter</li>\n<li>ReactBrowserEventEmitter 是浏览器事件的顶级委托，ReactEventListener 为用户绑定事件的DOM绑定自己的处理函数，并在处理函数中调用用户的事件处理函数，然后理render相关逻辑；</li>\n<li>React 事件系统：<ul>\n<li>浏览器事件的顶级委托（top-level delegation）用来 trap (捕获？) 大多数原生浏览器事件，可以注入事件处理器；</li>\n<li>主线程唯一的工作是注入的 ReactEventListener（是为可插拔事件源准备的事件监听器）；</li>\n<li>转发这些被 trap 原生浏览器事件至 EventPluginHub， EventPluginHub 在提取任何组合事件时会调用对应插件（比如 SimpleEventPlugin ）并返回需要处理的事件列表；</li>\n<li>事件插件包括：ResponderEventPlugin、SimpleEventPlugin、TapEventPlugin、EnterLeaveEventPlugin、ChangeEventPlugin、SelectEventPlugin、BeforeInputEventPlugin</li>\n<li>EventPluginHub 同时会维护Dom、事件名称和事件处理器的Mapping；</li>\n<li>ReactEventListener 监听 EventPluginHub 的事件，并处理事件派发及事件响应</li>\n<li>ReactEventListener 的事件响应函数会处理用户的事件处理函数</li>\n</ul>\n</li>\n<li>React组件及组件树的渲染都是在ReactMount里面执行</li>\n<li>mount组件时，初始化组件并注册事件监听（mountComponent）</li>\n<li>事件响应由ReactEventListener的dispatchEvent触发，通过EventPluginHub找到事件处理相关 </li>\n<li>我们的事件函数作为回调处理</li>\n</ol></article></body></html>","source":"start/index.html","raw":"<!DOCTYPE html><html><head><meta charset=\"utf-8\"><meta name=\"date\" content=\"2016-03-28 14:31:16\"><style>body {\n  width: 45em;\n  border: 1px solid #ddd;\n  outline: 1300px solid #fff;\n  margin: 16px auto;\n}\n\nbody .markdown-body\n{\n  padding: 30px;\n}\n\n@font-face {\n  font-family: fontawesome-mini;\n  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');\n}\n\n@font-face {\n  font-family: octicons-anchor;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAYcAA0AAAAACjQAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABMAAAABwAAAAca8vGTk9TLzIAAAFMAAAARAAAAFZG1VHVY21hcAAAAZAAAAA+AAABQgAP9AdjdnQgAAAB0AAAAAQAAAAEACICiGdhc3AAAAHUAAAACAAAAAj//wADZ2x5ZgAAAdwAAADRAAABEKyikaNoZWFkAAACsAAAAC0AAAA2AtXoA2hoZWEAAALgAAAAHAAAACQHngNFaG10eAAAAvwAAAAQAAAAEAwAACJsb2NhAAADDAAAAAoAAAAKALIAVG1heHAAAAMYAAAAHwAAACABEAB2bmFtZQAAAzgAAALBAAAFu3I9x/Nwb3N0AAAF/AAAAB0AAAAvaoFvbwAAAAEAAAAAzBdyYwAAAADP2IQvAAAAAM/bz7t4nGNgZGFgnMDAysDB1Ml0hoGBoR9CM75mMGLkYGBgYmBlZsAKAtJcUxgcPsR8iGF2+O/AEMPsznAYKMwIkgMA5REMOXicY2BgYGaAYBkGRgYQsAHyGMF8FgYFIM0ChED+h5j//yEk/3KoSgZGNgYYk4GRCUgwMaACRoZhDwCs7QgGAAAAIgKIAAAAAf//AAJ4nHWMMQrCQBBF/0zWrCCIKUQsTDCL2EXMohYGSSmorScInsRGL2DOYJe0Ntp7BK+gJ1BxF1stZvjz/v8DRghQzEc4kIgKwiAppcA9LtzKLSkdNhKFY3HF4lK69ExKslx7Xa+vPRVS43G98vG1DnkDMIBUgFN0MDXflU8tbaZOUkXUH0+U27RoRpOIyCKjbMCVejwypzJJG4jIwb43rfl6wbwanocrJm9XFYfskuVC5K/TPyczNU7b84CXcbxks1Un6H6tLH9vf2LRnn8Ax7A5WQAAAHicY2BkYGAA4teL1+yI57f5ysDNwgAC529f0kOmWRiYVgEpDgYmEA8AUzEKsQAAAHicY2BkYGB2+O/AEMPCAAJAkpEBFbAAADgKAe0EAAAiAAAAAAQAAAAEAAAAAAAAKgAqACoAiAAAeJxjYGRgYGBhsGFgYgABEMkFhAwM/xn0QAIAD6YBhwB4nI1Ty07cMBS9QwKlQapQW3VXySvEqDCZGbGaHULiIQ1FKgjWMxknMfLEke2A+IJu+wntrt/QbVf9gG75jK577Lg8K1qQPCfnnnt8fX1NRC/pmjrk/zprC+8D7tBy9DHgBXoWfQ44Av8t4Bj4Z8CLtBL9CniJluPXASf0Lm4CXqFX8Q84dOLnMB17N4c7tBo1AS/Qi+hTwBH4rwHHwN8DXqQ30XXAS7QaLwSc0Gn8NuAVWou/gFmnjLrEaEh9GmDdDGgL3B4JsrRPDU2hTOiMSuJUIdKQQayiAth69r6akSSFqIJuA19TrzCIaY8sIoxyrNIrL//pw7A2iMygkX5vDj+G+kuoLdX4GlGK/8Lnlz6/h9MpmoO9rafrz7ILXEHHaAx95s9lsI7AHNMBWEZHULnfAXwG9/ZqdzLI08iuwRloXE8kfhXYAvE23+23DU3t626rbs8/8adv+9DWknsHp3E17oCf+Z48rvEQNZ78paYM38qfk3v/u3l3u3GXN2Dmvmvpf1Srwk3pB/VSsp512bA/GG5i2WJ7wu430yQ5K3nFGiOqgtmSB5pJVSizwaacmUZzZhXLlZTq8qGGFY2YcSkqbth6aW1tRmlaCFs2016m5qn36SbJrqosG4uMV4aP2PHBmB3tjtmgN2izkGQyLWprekbIntJFing32a5rKWCN/SdSoga45EJykyQ7asZvHQ8PTm6cslIpwyeyjbVltNikc2HTR7YKh9LBl9DADC0U/jLcBZDKrMhUBfQBvXRzLtFtjU9eNHKin0x5InTqb8lNpfKv1s1xHzTXRqgKzek/mb7nB8RZTCDhGEX3kK/8Q75AmUM/eLkfA+0Hi908Kx4eNsMgudg5GLdRD7a84npi+YxNr5i5KIbW5izXas7cHXIMAau1OueZhfj+cOcP3P8MNIWLyYOBuxL6DRylJ4cAAAB4nGNgYoAALjDJyIAOWMCiTIxMLDmZedkABtIBygAAAA==) format('woff');\n}\n\n.markdown-body {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  color: #333333;\n  overflow: hidden;\n  font-family: \"Helvetica Neue\", Helvetica, \"Segoe UI\", Arial, freesans, sans-serif;\n  font-size: 16px;\n  line-height: 1.6;\n  word-wrap: break-word;\n}\n\n.markdown-body a {\n  background: transparent;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline: 0;\n}\n\n.markdown-body b,\n.markdown-body strong {\n  font-weight: bold;\n}\n\n.markdown-body mark {\n  background: #ff0;\n  color: #000;\n  font-style: italic;\n  font-weight: bold;\n}\n\n.markdown-body sub,\n.markdown-body sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n.markdown-body sup {\n  top: -0.5em;\n}\n.markdown-body sub {\n  bottom: -0.25em;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border: 0;\n}\n\n.markdown-body hr {\n  -moz-box-sizing: content-box;\n  box-sizing: content-box;\n  height: 0;\n}\n\n.markdown-body pre {\n  overflow: auto;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body input {\n  color: inherit;\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body html input[disabled] {\n  cursor: default;\n}\n\n.markdown-body input {\n  line-height: normal;\n}\n\n.markdown-body input[type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body table {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body .codehilitetable {\n  border: 0;\n  border-spacing: 0;\n}\n\n.markdown-body .codehilitetable tr {\n  border: 0;\n}\n\n.markdown-body .codehilitetable pre,\n.markdown-body .codehilitetable div.codehilite {\n  margin: 0;\n}\n\n.markdown-body .linenos,\n.markdown-body .code,\n.markdown-body .codehilitetable td {\n  border: 0;\n  padding: 0;\n}\n\n.markdown-body td:not(.linenos) .linenodiv {\n  padding: 0 !important;\n}\n\n.markdown-body .code {\n  width: 100%;\n}\n\n.markdown-body .linenos div pre,\n.markdown-body .linenodiv pre,\n.markdown-body .linenodiv {\n  border: 0;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-border-top-left-radius: 3px;\n  -webkit-border-bottom-left-radius: 3px;\n  -moz-border-radius-topleft: 3px;\n  -moz-border-radius-bottomleft: 3px;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n\n.markdown-body .code div pre,\n.markdown-body .code div {\n  border: 0;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-border-top-right-radius: 3px;\n  -webkit-border-bottom-right-radius: 3px;\n  -moz-border-radius-topright: 3px;\n  -moz-border-radius-bottomright: 3px;\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n\n.markdown-body * {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font: 13px Helvetica, arial, freesans, clean, sans-serif, \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  line-height: 1.4;\n}\n\n.markdown-body a {\n  color: #4183c4;\n  text-decoration: none;\n}\n\n.markdown-body a:hover,\n.markdown-body a:focus,\n.markdown-body a:active {\n  text-decoration: underline;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #ddd;\n}\n\n.markdown-body hr:before,\n.markdown-body hr:after {\n  display: table;\n  content: \" \";\n}\n\n.markdown-body hr:after {\n  clear: both;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 15px;\n  margin-bottom: 15px;\n  line-height: 1.1;\n}\n\n.markdown-body h1 {\n  font-size: 30px;\n}\n\n.markdown-body h2 {\n  font-size: 21px;\n}\n\n.markdown-body h3 {\n  font-size: 16px;\n}\n\n.markdown-body h4 {\n  font-size: 14px;\n}\n\n.markdown-body h5 {\n  font-size: 12px;\n}\n\n.markdown-body h6 {\n  font-size: 11px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  background-color: #e7e7e7;\n  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);\n  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);\n  background-image: linear-gradient(#fefefe, #e7e7e7);\n  background-repeat: repeat-x;\n  border-radius: 2px;\n  border: 1px solid #cfcfcf;\n  color: #000;\n  padding: 3px 5px;\n  line-height: 10px;\n  font: 11px Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  display: inline-block;\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body .headeranchor-link {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  display: block;\n  padding-right: 6px;\n  padding-left: 30px;\n  margin-left: -30px;\n}\n\n.markdown-body .headeranchor-link:focus {\n  outline: none;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  position: relative;\n  margin-top: 1em;\n  margin-bottom: 16px;\n  font-weight: bold;\n  line-height: 1.4;\n}\n\n.markdown-body h1 .headeranchor,\n.markdown-body h2 .headeranchor,\n.markdown-body h3 .headeranchor,\n.markdown-body h4 .headeranchor,\n.markdown-body h5 .headeranchor,\n.markdown-body h6 .headeranchor {\n  display: none;\n  color: #000;\n  vertical-align: middle;\n}\n\n.markdown-body h1:hover .headeranchor-link,\n.markdown-body h2:hover .headeranchor-link,\n.markdown-body h3:hover .headeranchor-link,\n.markdown-body h4:hover .headeranchor-link,\n.markdown-body h5:hover .headeranchor-link,\n.markdown-body h6:hover .headeranchor-link {\n  height: 1em;\n  padding-left: 8px;\n  margin-left: -30px;\n  line-height: 1;\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .headeranchor-link .headeranchor,\n.markdown-body h2:hover .headeranchor-link .headeranchor,\n.markdown-body h3:hover .headeranchor-link .headeranchor,\n.markdown-body h4:hover .headeranchor-link .headeranchor,\n.markdown-body h5:hover .headeranchor-link .headeranchor,\n.markdown-body h6:hover .headeranchor-link .headeranchor {\n  display: inline-block;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2.25em;\n  line-height: 1.2;\n  border-bottom: 1px solid #eee;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.75em;\n  line-height: 1.225;\n  border-bottom: 1px solid #eee;\n}\n\n.markdown-body h3 {\n  font-size: 1.5em;\n  line-height: 1.43;\n}\n\n.markdown-body h4 {\n  font-size: 1.25em;\n}\n\n.markdown-body h5 {\n  font-size: 1em;\n}\n\n.markdown-body h6 {\n  font-size: 1em;\n  color: #777;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre,\n.markdown-body .admonition {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 4px;\n  padding: 0;\n  margin: 16px 0;\n  background-color: #e7e7e7;\n  border: 0 none;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: bold;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body blockquote {\n  padding: 0 15px;\n  color: #777;\n  border-left: 4px solid #ddd;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n  word-break: normal;\n  word-break: keep-all;\n}\n\n.markdown-body table th {\n  font-weight: bold;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #ddd;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #ccc;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f8f8f8;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.markdown-body code,\n.markdown-body samp {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(0,0,0,0.04);\n  border-radius: 3px;\n}\n\n.markdown-body code:before,\n.markdown-body code:after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .codehilite {\n  margin-bottom: 16px;\n}\n\n.markdown-body .codehilite pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f7f7f7;\n  border-radius: 3px;\n}\n\n.markdown-body .codehilite pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: initial;\n  padding: 0;\n  margin: 0;\n  overflow: initial;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code:before,\n.markdown-body pre code:after {\n  content: normal;\n}\n\n/* Admonition */\n.markdown-body .admonition {\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  position: relative;\n  border-radius: 3px;\n  border: 1px solid #e0e0e0;\n  border-left: 6px solid #333;\n  padding: 10px 10px 10px 30px;\n}\n\n.markdown-body .admonition table {\n  color: #333;\n}\n\n.markdown-body .admonition p {\n  padding: 0;\n}\n\n.markdown-body .admonition-title {\n  font-weight: bold;\n  margin: 0;\n}\n\n.markdown-body .admonition>.admonition-title {\n  color: #333;\n}\n\n.markdown-body .attention>.admonition-title {\n  color: #a6d796;\n}\n\n.markdown-body .caution>.admonition-title {\n  color: #d7a796;\n}\n\n.markdown-body .hint>.admonition-title {\n  color: #96c6d7;\n}\n\n.markdown-body .danger>.admonition-title {\n  color: #c25f77;\n}\n\n.markdown-body .question>.admonition-title {\n  color: #96a6d7;\n}\n\n.markdown-body .note>.admonition-title {\n  color: #d7c896;\n}\n\n.markdown-body .admonition:before,\n.markdown-body .attention:before,\n.markdown-body .caution:before,\n.markdown-body .hint:before,\n.markdown-body .danger:before,\n.markdown-body .question:before,\n.markdown-body .note:before {\n  font: normal normal 16px fontawesome-mini;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  line-height: 1.5;\n  color: #333;\n  position: absolute;\n  left: 0;\n  top: 0;\n  padding-top: 10px;\n  padding-left: 10px;\n}\n\n.markdown-body .admonition:before {\n  content: \"\\f056\\00a0\";\n  color: 333;\n}\n\n.markdown-body .attention:before {\n  content: \"\\f058\\00a0\";\n  color: #a6d796;\n}\n\n.markdown-body .caution:before {\n  content: \"\\f06a\\00a0\";\n  color: #d7a796;\n}\n\n.markdown-body .hint:before {\n  content: \"\\f05a\\00a0\";\n  color: #96c6d7;\n}\n\n.markdown-body .danger:before {\n  content: \"\\f057\\00a0\";\n  color: #c25f77;\n}\n\n.markdown-body .question:before {\n  content: \"\\f059\\00a0\";\n  color: #96a6d7;\n}\n\n.markdown-body .note:before {\n  content: \"\\f040\\00a0\";\n  color: #d7c896;\n}\n\n.markdown-body .admonition::after {\n  content: normal;\n}\n\n.markdown-body .attention {\n  border-left: 6px solid #a6d796;\n}\n\n.markdown-body .caution {\n  border-left: 6px solid #d7a796;\n}\n\n.markdown-body .hint {\n  border-left: 6px solid #96c6d7;\n}\n\n.markdown-body .danger {\n  border-left: 6px solid #c25f77;\n}\n\n.markdown-body .question {\n  border-left: 6px solid #96a6d7;\n}\n\n.markdown-body .note {\n  border-left: 6px solid #d7c896;\n}\n\n.markdown-body .admonition>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body .admonition>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n/* progress bar*/\n.markdown-body .progress {\n  display: block;\n  width: 300px;\n  margin: 10px 0;\n  height: 24px;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  background-color: #ededed;\n  position: relative;\n  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);\n}\n\n.markdown-body .progress-label {\n  position: absolute;\n  text-align: center;\n  font-weight: bold;\n  width: 100%; margin: 0;\n  line-height: 24px;\n  color: #333;\n  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;\n  -webkit-font-smoothing: antialiased !important;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.markdown-body .progress-bar {\n  height: 24px;\n  float: left;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  background-color: #96c6d7;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);\n  background-size: 30px 30px;\n  background-image: -webkit-linear-gradient(\n    135deg, rgba(255, 255, 255, .4) 27%,\n    transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%,\n    transparent 77%, transparent\n  );\n  background-image: -moz-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: -ms-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: -o-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n}\n\n.markdown-body .progress-100plus .progress-bar {\n  background-color: #a6d796;\n}\n\n.markdown-body .progress-80plus .progress-bar {\n  background-color: #c6d796;\n}\n\n.markdown-body .progress-60plus .progress-bar {\n  background-color: #d7c896;\n}\n\n.markdown-body .progress-40plus .progress-bar {\n  background-color: #d7a796;\n}\n\n.markdown-body .progress-20plus .progress-bar {\n  background-color: #d796a6;\n}\n\n.markdown-body .progress-0plus .progress-bar {\n  background-color: #c25f77;\n}\n\n.markdown-body .candystripe-animate .progress-bar{\n  -webkit-animation: animate-stripes 3s linear infinite;\n  -moz-animation: animate-stripes 3s linear infinite;\n  animation: animate-stripes 3s linear infinite;\n}\n\n@-webkit-keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n@-moz-keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n@keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n.markdown-body .gloss .progress-bar {\n  box-shadow:\n    inset 0 4px 12px rgba(255, 255, 255, .7),\n    inset 0 -12px 0 rgba(0, 0, 0, .05);\n}\n\n/* Multimarkdown Critic Blocks */\n.markdown-body .critic_mark {\n  background: #ff0;\n}\n\n.markdown-body .critic_delete {\n  color: #c82829;\n  text-decoration: line-through;\n}\n\n.markdown-body .critic_insert {\n  color: #718c00 ;\n  text-decoration: underline;\n}\n\n.markdown-body .critic_comment {\n  color: #8e908c;\n  font-style: italic;\n}\n\n.markdown-body .headeranchor {\n  font: normal normal 16px octicons-anchor;\n  line-height: 1;\n  display: inline-block;\n  text-decoration: none;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.headeranchor:before {\n  content: '\\f05c';\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 4px 0.25em -20px;\n  vertical-align: middle;\n}\n\n/* Media */\n@media only screen and (min-width: 480px) {\n  .markdown-body {\n    font-size:14px;\n  }\n}\n\n@media only screen and (min-width: 768px) {\n  .markdown-body {\n    font-size:16px;\n  }\n}\n\n@media print {\n  .markdown-body * {\n    background: transparent !important;\n    color: black !important;\n    filter:none !important;\n    -ms-filter: none !important;\n  }\n\n  .markdown-body {\n    font-size:12pt;\n    max-width:100%;\n    outline:none;\n    border: 0;\n  }\n\n  .markdown-body a,\n  .markdown-body a:visited {\n    text-decoration: underline;\n  }\n\n  .markdown-body .headeranchor-link {\n    display: none;\n  }\n\n  .markdown-body a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n\n  .markdown-body abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n\n  .markdown-body .ir a:after,\n  .markdown-body a[href^=\"javascript:\"]:after,\n  .markdown-body a[href^=\"#\"]:after {\n    content: \"\";\n  }\n\n  .markdown-body pre {\n    white-space: pre;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n  }\n\n  .markdown-body pre,\n  .markdown-body blockquote {\n    border: 1px solid #999;\n    padding-right: 1em;\n    page-break-inside: avoid;\n  }\n\n  .markdown-body .progress,\n  .markdown-body .progress-bar {\n    -moz-box-shadow: none;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n  }\n\n  .markdown-body .progress {\n    border: 1px solid #ddd;\n  }\n\n  .markdown-body .progress-bar {\n    height: 22px;\n    border-right: 1px solid #ddd;\n  }\n\n  .markdown-body tr,\n  .markdown-body img {\n    page-break-inside: avoid;\n  }\n\n  .markdown-body img {\n    max-width: 100% !important;\n  }\n\n  .markdown-body p,\n  .markdown-body h2,\n  .markdown-body h3 {\n    orphans: 3;\n    widows: 3;\n  }\n\n  .markdown-body h2,\n  .markdown-body h3 {\n    page-break-after: avoid;\n  }\n}\n</style><title>react -start</title></head><body><article class=\"markdown-body\"><p>React -start</p>\n<h2 id=\"react\"><a name=\"user-content-react\" href=\"#react\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React</h2>\n<ul>\n<li>Facebook</li>\n<li>MVC中的V：M -&gt; V</li>\n<li>和Flux搭配，可以做到MVVM</li>\n<li>默认转义所有字符串，防止XSS攻击</li>\n<li>React认为HTML标签及生成这些标签的代码间存在着内在联系，React设计允许你在构建标签结构时充分利用JS的强大能力，而不必在笨拙的模板语言上浪费时间</li>\n</ul>\n<h2 id=\"why-react\"><a name=\"user-content-why-react\" href=\"#why-react\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Why React?</h2>\n<ul>\n<li>简单：<br />\n  model改变后，react自动处理用户界面的更新；</li>\n<li>声明式：<br />\n  更新界面时，react仅仅会更新变化的部分；</li>\n<li>虚拟Dom<br />\n  React在内存中维护一个快速响应的DOM描述，并利用他来快速地计算出差异，然后更新浏览器中的DOM;</li>\n</ul>\n<h2 id=\"react_1\"><a name=\"user-content-react_1\" href=\"#react_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React 最需要走心的工作</h2>\n<ul>\n<li>构建可组合的、可复用的组件;</li>\n<li>组件的好处：代码复用、测试更加点多;</li>\n</ul>\n<h2 id=\"react-hello-world\"><a name=\"user-content-react-hello-world\" href=\"#react-hello-world\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - hello world</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"./react.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n        &lt;script type=\"text/javascript\"&gt;\n            function h1 (text, style) {\n                return '&lt;h1&gt;'' + text + '&lt;/h1&gt;';\n            }\n            var el = React.createElement('h1', {style: {color: '##00f'}}, 'Hello World!');\n            React.render(el, document.getElementById('app'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"react-\"><a name=\"user-content-react-\" href=\"#react-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 类似的工作</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n        &lt;script type=\"text/javascript\"&gt;\n              function h1 (text, style) {\n                var result;\n                var styleStr;\n\n                if (style) {\n                    styleStr = 'style=\"';\n                    for (var name in style) {\n                        styleStr += name + ':' + style[name] + ';'; \n                    }\n                    styleStr += '\"';\n                }\n\n                if (styleStr) {\n                    result = '&lt;h1 ' + styleStr + '&gt;' + text + '&lt;/h1&gt;';\n                } else {\n                    result = '&lt;h1&gt;' + text + '&lt;/h1&gt;';\n                }\n\n                  return result;\n              }\n\n              function render(target, container) {\n                container.innerHTML = target;\n              }\n\n              render(h1('Hello World!', {color: '##00f'}), document.getElementById('app'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"jsx-javascript-xml\"><a name=\"user-content-jsx-javascript-xml\" href=\"#jsx-javascript-xml\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX - Javascript XML</h2>\n<p>优势：<br />\n- 类HTML标记语言，都是熟悉的语法<br />\n- 抽象了React Element的创建过程<br />\n- 简单直观，可以提升效率且成本很低<br />\n劣势：<br />\n- 在浏览器运行会很慢，项目中需要预处理</p>\n<h2 id=\"jsx-hello-world\"><a name=\"user-content-jsx-hello-world\" href=\"#jsx-hello-world\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX - hello world</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"./react.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"./JSXTransformer.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n        &lt;script type=\"text/jsx\"&gt;\n            React.render(&lt;h1&gt;Hello World, JSX!&lt;/h1&gt;, document.getElementById('app'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"jsx-\"><a name=\"user-content-jsx-\" href=\"#jsx-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX - 工作原理</h2>\n<ol>\n<li>使用JSXTransformer通过监听windows的onload/DOMContentLoaded，来遍历所有&rdquo;text/jsx&rdquo;脚本标签</li>\n<li>获取每个标签的source code并把JSX代码转为react的虚拟dom代码</li>\n<li>最后把react代码添加到新建的script标签中</li>\n<li>预编译的插件是同理，只不过发生在编译阶段</li>\n</ol>\n<h2 id=\"jsx-tips\"><a name=\"user-content-jsx-tips\" href=\"#jsx-tips\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX Tips</h2>\n<ul>\n<li>JSX设置动态属性时，用花括号包裹Javascript变量</li>\n<li>也可以把属性设置为一个函数的调用返回结果</li>\n<li>条件判断支持：三元运输符、&amp;&amp;、||</li>\n<li>key: 列表时会建议使用，重用组件提升渲染性能</li>\n<li>refs：获取创建dom的描述对象 or 获取创建dom的对象, this.refs.usernameInput.getDOMNode() x</li>\n<li>HTML关键词：for &gt; htmlFor, class &gt; className, style: {}</li>\n<li>事件统一使用驼峰式</li>\n</ul>\n<h2 id=\"react-tips\"><a name=\"user-content-react-tips\" href=\"#react-tips\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React Tips</h2>\n<ul>\n<li>React创建的class名称首字母必须大写，不然找不到</li>\n<li>JSX可以不换行，换行时必须使用（）包装，不然会报非法组件错误；</li>\n<li>只能有根一个节点，多个节点会抛错</li>\n<li>内联样式支持对象，名称使用驼峰式，否则不起作用，fontSize</li>\n<li>返回：null、false、React组件</li>\n</ul>\n<h2 id=\"_1\"><a name=\"user-content-_1\" href=\"#_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>组件的复合</h2>\n<ul>\n<li>复用那些接口定义良好的组件来开发新的模块化组件</li>\n<li>this.props.children X</li>\n<li>组件支持 ref=&rdquo;refId&rdquo;  this.refs.refId</li>\n</ul>\n<h2 id=\"react-_1\"><a name=\"user-content-react-_1\" href=\"#react-_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 组件数据流</h2>\n<ul>\n<li>props</li>\n<li>state</li>\n</ul>\n<h2 id=\"react-dom\"><a name=\"user-content-react-dom\" href=\"#react-dom\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - dom对象</h2>\n<ul>\n<li>refs</li>\n</ul>\n<h2 id=\"react-_2\"><a name=\"user-content-react-_2\" href=\"#react-_2\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 组件生命周期</h2>\n<h3 id=\"_2\"><a name=\"user-content-_2\" href=\"#_2\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>组件类创建时</h3>\n<ul>\n<li>getDefaultProps</li>\n</ul>\n<h3 id=\"_3\"><a name=\"user-content-_3\" href=\"#_3\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>初始化</h3>\n<ul>\n<li>getinitialState</li>\n</ul>\n<h3 id=\"_4\"><a name=\"user-content-_4\" href=\"#_4\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>挂载</h3>\n<ul>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>\n<h3 id=\"_5\"><a name=\"user-content-_5\" href=\"#_5\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>更新</h3>\n<ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h3 id=\"_6\"><a name=\"user-content-_6\" href=\"#_6\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>卸载</h3>\n<ul>\n<li>componentWillUnmount</li>\n</ul>\n<h3 id=\"_7\"><a name=\"user-content-_7\" href=\"#_7\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>生命周期</h3>\n<ul>\n<li>Class Create Pahses:<ul>\n<li>invoke while class created and be shared between instances.</li>\n</ul>\n</li>\n<li>Initialization Pahses:<ul>\n<li>constructor: Initialization of state. The instance is now retained.</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>[children&rsquo;s constructors]<ul>\n<li>[children&rsquo;s componentWillMount and render]</li>\n<li>[children&rsquo;s componentDidMount]</li>\n</ul>\n</li>\n<li>componentDidMount</li>\n</ul>\n</li>\n<li>Update Phases:<ul>\n<li>componentWillReceiveProps (only called if parent updated)</li>\n<li>shouldComponentUpdate (default: always returns true to prevent subtle bugs)<ul>\n<li>componentWillUpdate</li>\n<li>render<ul>\n<li>[children&rsquo;s constructors or receive props phases]</li>\n</ul>\n</li>\n<li>componentDidUpdate</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Unmount Phases:<ul>\n<li>componentWillUnmount<ul>\n<li>[children&rsquo;s componentWillUnmount]</li>\n<li>[children destroyed]</li>\n</ul>\n</li>\n<li>(destroyed): The instance is now blank, released by React and ready for GC</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"mixin\"><a name=\"user-content-mixin\" href=\"#mixin\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Mixin</h2>\n<ul>\n<li>独立于组件的</li>\n<li>多个组件可共享的</li>\n<li>对象类型的配置</li>\n</ul>\n<h2 id=\"mixin-demo\"><a name=\"user-content-mixin-demo\" href=\"#mixin-demo\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Mixin - DEMO</h2>\n<pre><code>var userMixin = {\n    getDefaultProps: function () {\n        return {\n            username: '小红'\n        };\n    },\n    renderUser: function (welcomeMsg) {\n        return (\n                &lt;div className=\"user-wrap\"&gt;\n                    &lt;span ref=\"welcomeDesc\" className=\"welcome-user\"&gt;{welcomeMsg}&lt;/span&gt;\n                &lt;/div&gt;\n            );\n    },\n    componentDidMount: function () {\n        console.log('mount');\n    }\n}\n\n\nvar Header = React.createClass({\n    mixins: [userMixin],\n    getInitialState: function () {\n        return {\n            systemName: 'React平台Header'\n        };\n    },\n    render: function () {\n        var welcomeMsg;\n        if (this.props.username) {\n            welcomeMsg = '欢迎，' + this.props.username + '！'\n        };\n        return (\n                &lt;div className=\"header-content\"&gt;\n                    &lt;h1&gt;{this.state.systemName}&lt;/h1&gt;\n                    {\n                        welcomeMsg ? this.renderUser(welcomeMsg) : null\n                    }\n                &lt;/div&gt;\n            );\n    }\n});\n</code></pre>\n<h2 id=\"react-purerendermixin\"><a name=\"user-content-react-purerendermixin\" href=\"#react-purerendermixin\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - PureRenderMixin</h2>\n<ul>\n<li>React组件的渲染函数是“纯粹的” - 同样的props和state，渲染出同样的效果</li>\n<li>可以提升性能 - 在shouldComponentUpdate里检查props、state是否会发生变化</li>\n<li>shouldComponentUpdate的判断结果会影响整个组件子树</li>\n<li>据说props、state比较是浅比较，不适合(特别)复杂的数据结构 x</li>\n</ul>\n<h2 id=\"purerendermixin-shouldcomponentupdate-shallow-check\"><a name=\"user-content-purerendermixin-shouldcomponentupdate-shallow-check\" href=\"#purerendermixin-shouldcomponentupdate-shallow-check\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>PureRenderMixin - shouldComponentUpdate: shallow check</h2>\n<pre><code>/**\n - Performs equality by iterating through keys on an object and returning false\n - when any key has values which are not strictly equal between the arguments.\n - Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  var bHasOwnProperty = hasOwnProperty.bind(objB);\n  for (var i = 0; i &lt; keysA.length; i++) {\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n</code></pre>\n<h3 id=\"react-mixin\"><a name=\"user-content-react-mixin\" href=\"#react-mixin\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - Mixin原理</h3>\n<ul>\n<li>Mixin必须是一个对象</li>\n<li>在React.createClass（源码：ReactClass &gt; createClass: function (spec) {&hellip;}会把Mixin对象融入react对象</li>\n<li>融入过程是通过遍历Mixin的属性（for..in）逐个添加到react对象得prototype上（mixSpecIntoComponent）</li>\n<li>添加之前需要判断是否已经有了相同属性，且此属性是否支持覆盖、是否支持多个、是否需要合并</li>\n<li>添加的方式是：覆盖（override）、合并、多个函数链</li>\n</ul>\n<h3 id=\"react-mixin_1\"><a name=\"user-content-react-mixin_1\" href=\"#react-mixin_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - Mixin融合方式的标准</h3>\n<ul>\n<li>一些基础的属性是不允许覆盖的，比如：setProps、replaceProps、replaceState、isMounted</li>\n<li>渲染的属性是不允许定义多次的，比如：render、shouldComponentUpdate</li>\n<li>需要合并的是那些有返回值的，比如：getDefaultProps、getInitialState</li>\n<li>其他的都支持多个函数链的形式（先执行已有的，在执行Mixin的），比如：willMount、didMount、willUpdate、didUpdate等等</li>\n</ul>\n<h2 id=\"react-_3\"><a name=\"user-content-react-_3\" href=\"#react-_3\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 表单组件</h2>\n<h3 id=\"_8\"><a name=\"user-content-_8\" href=\"#_8\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>受用户交互影响的属性</h3>\n<ul>\n<li>value，用于 input、textarea 组件</li>\n<li>checked，用于类型为 checkbox 或者 radio 的 input 组件</li>\n<li>selected，用于 option 组件</li>\n</ul>\n<h3 id=\"onchange\"><a name=\"user-content-onchange\" href=\"#onchange\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>onChange 回调函数来监听组件变化</h3>\n<ul>\n<li>input 或 textarea 的 value 发生变化时。</li>\n<li>input 的 checked 状态改变时。</li>\n<li>option 的 selected 状态改变时。</li>\n</ul>\n<h3 id=\"controlled-components-\"><a name=\"user-content-controlled-components-\" href=\"#controlled-components-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Controlled Components - 受限组件</h3>\n<ul>\n<li>设置了 value 的 input 是一个受限组件</li>\n</ul>\n<h3 id=\"-demo\"><a name=\"user-content--demo\" href=\"#-demo\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>受限组件 - DEMO</h3>\n<pre><code>var App = React.createClass({\n    getInitialState: function () {\n        return {\n            phone: '15821466666'\n        };\n    },\n    render: function () {\n        return (\n                &lt;div&gt;\n                    &lt;label htmlFor=\"phone\"&gt;手机号：&lt;/label&gt;\n                    &lt;input type='text' id=\"phone\" value={this.state.phone} onChange={this.phoneChangeHlr} /&gt;\n                &lt;/div&gt;\n            );\n    },\n    phoneChangeHlr: function (event) {\n        this.setState({phone: event.target.value});\n    }\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('app'));\n</code></pre>\n<h2 id=\"react-add-ons\"><a name=\"user-content-react-add-ons\" href=\"#react-add-ons\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - add-ons</h2>\n<ul>\n<li>TransitionGroup和CSSTransitionGroup</li>\n<li>LinkedStateMixin - 用于简化用户表单输入数据和组件 state 之间的双向数据绑定</li>\n<li>classSet，用于更加干净简洁地操作 DOM 中的 class 字符串</li>\n<li>cloneWithProps，用于实现 React 组件浅复制，同时改变它们的 props </li>\n<li>update，一个辅助方法，使得在 JavaScript 中处理不可变数据更加容易</li>\n<li>PureRenderMixin，在某些场景下的性能检测器</li>\n</ul>\n<h2 id=\"linkedstatemixin-demo\"><a name=\"user-content-linkedstatemixin-demo\" href=\"#linkedstatemixin-demo\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>LinkedStateMixin - DEMO</h2>\n<pre><code>var LinkedStateMixin = React.addons.LinkedStateMixin;\nvar App = React.createClass({\n    mixins: [LinkedStateMixin],\n    getInitialState: function () {\n        return {\n            phone: '15821466666'\n        };\n    },\n    render: function () {\n        return (\n                &lt;div&gt;\n                    &lt;label htmlFor=\"phone\"&gt;手机号：&lt;/label&gt;\n                    &lt;input type='text' id=\"phone\" valueLink={this.linkState('phone')}  /&gt;\n                &lt;/div&gt;\n            );\n    }\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('app'));\n</code></pre>\n<h2 id=\"webpack\"><a name=\"user-content-webpack\" href=\"#webpack\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>开发工具webpack</h2>\n<h3 id=\"webpack-react-install\"><a name=\"user-content-webpack-react-install\" href=\"#webpack-react-install\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>webpack + react install</h3>\n<ul>\n<li>npm init</li>\n<li>npm install &ndash;save react react</li>\n<li>npm install &ndash;save-dev webpack webpack-dev-server</li>\n<li>npm install &ndash;save-dev jsx-loader css-loader file-loader style-loader url-loader</li>\n</ul>\n<h3 id=\"configuring-webpack\"><a name=\"user-content-configuring-webpack\" href=\"#configuring-webpack\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Configuring webpack</h3>\n<pre><code>var webpack = require('webpack');\n\nmodule.exports = {\n    // 它定义了打包的入口文件，数组中的文件会按顺序进行，并且它会自行解决依赖问题。\n    entry: {\n        main: './pages/main.js',\n    },\n    // 它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径\n    output: {\n        path: __dirname + '/build',\n        publicPath: '/build/',\n        filename: '[name].js'\n    },\n    // Webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。\n    // resolve属性中的extensions数组中用于配置程序可以自行补全哪些后缀。\n    // 比如 Hello.jsx 这样的文件就可以直接用 require(./Hello) 引用。\n    resolve: {\n        extensions: ['', '.js', '.jsx']\n    },\n    // webpack将所有的资源都看做是模块，而模块就需要加载器\n    module: {\n        loaders: [\n            // loaders 指定 jsx-loader 编译后缀名为 .jsx 的文件，\n            // 建议给含有 JSX 的文件添加 .jsx 后缀，\n            // 当然你也可以直接使用 .js 后缀， 相应的 test 配置正则要修改匹配就是。\n            { test: /\\.js?$/, exclude: /node_modules/, loader: 'jsx?harmony' }, \n            { test: /\\.(css)/, loader: 'style-loader!css-loader' },\n            // inline base64 URLs for &lt;=8k images, direct URLs for the rest\n            {test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192' } \n            // loaders: ['react-hot', 'jsx?harmony']\n            // loaders后面如果跟的不是数组，则会报错：LoadersList.js:81 r.forEach(function(r) \n        ]\n    },\n    // 我们可以在plugin参数中配置我们需要用到的各种各样的插件。\n    plugins: [\n        new webpack.NoErrorsPlugin(),\n    ]\n}\n</code></pre>\n<h3 id=\"webpack_1\"><a name=\"user-content-webpack_1\" href=\"#webpack_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Webpack 命令</h3>\n<p>启动webpack命令<br />\n- webpack -d 提供SourceMaps，方便调试<br />\n- webpack -w 提供watch方法，实时进行打包更新<br />\n- webpack &ndash;colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤<br />\n- webpack &ndash;progress 输出的接口带进度<br />\n- webpack &ndash;profile 输出性能数据，可以看到每一步的耗时<br />\n- webpack -p 对打包后的文件进行压缩<br />\n- webpack &ndash;config <filename> 支持指定实用的配置文件，处理release和debug不同的情况</p>\n<h3 id=\"scripts\"><a name=\"user-content-scripts\" href=\"#scripts\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>配置scripts</h3>\n<pre><code>\"scripts\": {\n    \"locDev\": \"webpack -d -w --progress --colors\",\n    \"serDev\": \"webpack-dev-server --progress --colors --port 8082\"\n}\n</code></pre>\n<h3 id=\"_9\"><a name=\"user-content-_9\" href=\"#_9\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>运行</h3>\n<ul>\n<li>npm run locDev</li>\n<li>npm run serDev</li>\n</ul>\n<h3 id=\"react-_4\"><a name=\"user-content-react-_4\" href=\"#react-_4\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 热插拔</h3>\n<ul>\n<li>npm install &ndash;save-dev react-hot-loader</li>\n<li>webpack.config.js: entry 使用数组，并添加 &lsquo;webpack/hot/only-dev-server&rsquo;</li>\n<li>webpack.config.js: loaders: [&lsquo;react-hot&rsquo;, &lsquo;jsx?harmony&rsquo;]</li>\n<li>入口文件添加 module.hot.accept()</li>\n<li>启动：webpack-dev-server -d &ndash;port 8082 &ndash;hot &ndash;progress &ndash;colors</li>\n</ul>\n<h3 id=\"react-_5\"><a name=\"user-content-react-_5\" href=\"#react-_5\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 热拔插多个入口</h3>\n<ul>\n<li>webpack.config.js: entry:<br />\n    entry: {<br />\n        main: [&lsquo;./pages/main/index.js&rsquo;, &lsquo;webpack/hot/only-dev-server&rsquo;],<br />\n        help: [&lsquo;./pages/help/index.js&rsquo;, &lsquo;webpack/hot/only-dev-server&rsquo;]<br />\n    }</li>\n</ul>\n<h2 id=\"react-render\"><a name=\"user-content-react-render\" href=\"#react-render\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - render时机</h2>\n<h3 id=\"-\"><a name=\"user-content--\" href=\"#-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>批量更新 - 事件回调函数</h3>\n<ul>\n<li>事件处理函数中的多次setState/replaceState会被标记为一次批量更新</li>\n<li>事件处理函数本身在React事件机制中是作为一个回调函数被调用，在函数执行完成后才会触发render</li>\n</ul>\n<h3 id=\"-_1\"><a name=\"user-content--_1\" href=\"#-_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>实时更新 - 其他</h3>\n<ul>\n<li>调用setState/replaceState后直接触发render，比如setInterval</li>\n</ul>\n<h3 id=\"render\"><a name=\"user-content-render\" href=\"#render\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>render流程</h3>\n<ul>\n<li>setState/replaceState 修改状态后</li>\n<li>组件添加等待更新的状态列表，并把新的状态压入列表（ReactUpdateQueue.js: enqueueSetState()）</li>\n<li>标记组件为需要重新渲染的组件（dirty components list）ReactUpdates：enqueueUpdate()</li>\n<li>runBatchedUpdates来处理dirty components（调用对应的render）</li>\n</ul>\n<h2 id=\"react-react\"><a name=\"user-content-react-react\" href=\"#react-react\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - React事件系统</h2>\n<ol>\n<li>React初始化时会把事件监听 ReactEventListener 注入到 ReactBrowserEventEmitter</li>\n<li>ReactBrowserEventEmitter 是浏览器事件的顶级委托，ReactEventListener 为用户绑定事件的DOM绑定自己的处理函数，并在处理函数中调用用户的事件处理函数，然后理render相关逻辑；</li>\n<li>React 事件系统：<ul>\n<li>浏览器事件的顶级委托（top-level delegation）用来 trap (捕获？) 大多数原生浏览器事件，可以注入事件处理器；</li>\n<li>主线程唯一的工作是注入的 ReactEventListener（是为可插拔事件源准备的事件监听器）；</li>\n<li>转发这些被 trap 原生浏览器事件至 EventPluginHub， EventPluginHub 在提取任何组合事件时会调用对应插件（比如 SimpleEventPlugin ）并返回需要处理的事件列表；</li>\n<li>事件插件包括：ResponderEventPlugin、SimpleEventPlugin、TapEventPlugin、EnterLeaveEventPlugin、ChangeEventPlugin、SelectEventPlugin、BeforeInputEventPlugin</li>\n<li>EventPluginHub 同时会维护Dom、事件名称和事件处理器的Mapping；</li>\n<li>ReactEventListener 监听 EventPluginHub 的事件，并处理事件派发及事件响应</li>\n<li>ReactEventListener 的事件响应函数会处理用户的事件处理函数</li>\n</ul>\n</li>\n<li>React组件及组件树的渲染都是在ReactMount里面执行</li>\n<li>mount组件时，初始化组件并注册事件监听（mountComponent）</li>\n<li>事件响应由ReactEventListener的dispatchEvent触发，通过EventPluginHub找到事件处理相关 </li>\n<li>我们的事件函数作为回调处理</li>\n</ol></article></body></html>","date":"2016-04-11T05:47:07.658Z","updated":"2016-04-11T05:47:07.658Z","path":"start/index.html","title":"","comments":1,"layout":"page","_id":"cimvsajy600011sjak0ijt748","content":"<!DOCTYPE html><html><head><meta charset=\"utf-8\"><meta name=\"date\" content=\"2016-03-28 14:31:16\"><style>body {\n  width: 45em;\n  border: 1px solid #ddd;\n  outline: 1300px solid #fff;\n  margin: 16px auto;\n}\n\nbody .markdown-body\n{\n  padding: 30px;\n}\n\n@font-face {\n  font-family: fontawesome-mini;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAzUABAAAAAAFNgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABbAAAABwAAAAcZMzaOEdERUYAAAGIAAAAHQAAACAAOQAET1MvMgAAAagAAAA+AAAAYHqhde9jbWFwAAAB6AAAAFIAAAFa4azkLWN2dCAAAAI8AAAAKAAAACgFgwioZnBnbQAAAmQAAAGxAAACZVO0L6dnYXNwAAAEGAAAAAgAAAAIAAAAEGdseWYAAAQgAAAFDgAACMz7eroHaGVhZAAACTAAAAAwAAAANgWEOEloaGVhAAAJYAAAAB0AAAAkDGEGa2htdHgAAAmAAAAAEwAAADBEgAAQbG9jYQAACZQAAAAaAAAAGgsICJBtYXhwAAAJsAAAACAAAAAgASgBD25hbWUAAAnQAAACZwAABOD4no+3cG9zdAAADDgAAABsAAAAmF+yXM9wcmVwAAAMpAAAAC4AAAAusPIrFAAAAAEAAAAAyYlvMQAAAADLVHQgAAAAAM/u9uZ4nGNgZGBg4ANiCQYQYGJgBEJuIGYB8xgABMMAPgAAAHicY2Bm42OcwMDKwMLSw2LMwMDQBqGZihmiwHycoKCyqJjB4YPDh4NsDP+BfNb3DIuAFCOSEgUGRgAKDgt4AAB4nGNgYGBmgGAZBkYGEAgB8hjBfBYGCyDNxcDBwMTA9MHhQ9SHrA8H//9nYACyQyFs/sP86/kX8HtB9UIBIxsDXICRCUgwMaACRoZhDwA3fxKSAAAAAAHyAHABJQB/AIEAdAFGAOsBIwC/ALgAxACGAGYAugBNACcA/wCIeJxdUbtOW0EQ3Q0PA4HE2CA52hSzmZDGe6EFCcTVjWJkO4XlCGk3cpGLcQEfQIFEDdqvGaChpEibBiEXSHxCPiESM2uIojQ7O7NzzpkzS8qRqnfpa89T5ySQwt0GzTb9Tki1swD3pOvrjYy0gwdabGb0ynX7/gsGm9GUO2oA5T1vKQ8ZTTuBWrSn/tH8Cob7/B/zOxi0NNP01DoJ6SEE5ptxS4PvGc26yw/6gtXhYjAwpJim4i4/plL+tzTnasuwtZHRvIMzEfnJNEBTa20Emv7UIdXzcRRLkMumsTaYmLL+JBPBhcl0VVO1zPjawV2ys+hggyrNgQfYw1Z5DB4ODyYU0rckyiwNEfZiq8QIEZMcCjnl3Mn+pED5SBLGvElKO+OGtQbGkdfAoDZPs/88m01tbx3C+FkcwXe/GUs6+MiG2hgRYjtiKYAJREJGVfmGGs+9LAbkUvvPQJSA5fGPf50ItO7YRDyXtXUOMVYIen7b3PLLirtWuc6LQndvqmqo0inN+17OvscDnh4Lw0FjwZvP+/5Kgfo8LK40aA4EQ3o3ev+iteqIq7wXPrIn07+xWgAAAAABAAH//wAPeJyFlctvG1UUh+/12DPN1B7P3JnYjj2Ox4/MuDHxJH5N3UdaEUQLqBIkfQQioJWQ6AMEQkIqsPGCPwA1otuWSmTBhjtps2ADWbJg3EpIXbGouqSbCraJw7kzNo2dRN1cnXN1ZvT7zuuiMEI7ncizyA0URofRBJpCdbQuIFShYY+GZRrxMDVtih5TwQPHtXDFFSIKoWIbuREBjLH27Ny4MsbVx+uOJThavebgVrNRLAiYx06rXsvhxLgWx9xpfHdrs/ekc2Pl2cpPCVEITQpwbj8VQhfXSq2m+Wxqaq2D73Kne5e3NjHqQNj3CRYlJlgUl/jRNP+2Gs2pNYRQiOnmUaQDqm30KqKiTTWPWjboxnTWpvgxjXo0KrtZXAHt7hwIz0YVcj88JnKlJKi3NPAwLyDwZudSmJSMMJFDYaOkaol6XtESx3Gt1VTytdZJ3DCLeaVhVnCBH1fycHTxFXwPX+l2e3d6H/TufGGmMTLTnbSJUdo00zuBswMO/nl3YLeL/wnu9/limCuD3vC54h5NBVz6Li414AI8Vx3iiosKcQXUbrvhFFiYb++HN4DaF4XzFW0fIN4XDWJ3a3XQoq9V8WiyRmdsatV9xUcHims1JloH0YUa090G3Tro3mC6c01f+YwCPquINr1PTaCP6rVTOOmf0GE2dBc7zWIhji3/5MchSuBHgDbU99RMWt3YUNMZMJmx92YP6NsHx/5/M1yvInpnkIOM3Z8fA3JQ2lW1RFC1KaBPDFXNAHYYvGy73aYZZZ3HifbeuiVZCpwA3oQBs0wGPYJbJfg60xrKEbKiNtTe1adwrpBRwlAuQ3q3VRaX0QmQ9a49BTSCuF1MLfQ6+tinOubRBZuWPNoMevGMT+V41KitO1is3D/tpMcq1JHZqDHGs8DoYGDkxJgKjHROeTCmhZvzPm9pod+ltKm4PN7Dyvvldlpsg8D+4AUJZ3F/JBstZz7cbFRxsaAGV6yX/dkcycWf8eS3QlQea+YLjdm3yrOnrhFpUyKVvFE4lpv4bO3Svx/6F/4xmiDu/RT5iI++lko18mY1oX+5UGKR6kmVjM/Zb76yfHtxy+h/SyQ0lLdpdKy/lWB6szatetQJ8nZ80A2Qt6ift6gJeavU3BO4gtxs/KCtNPVibCtYCWY3SIlSBPKXZALXiIR9oZeJ1AuMyxLpHIy/yO7vSiSE+kZvk0ihJ30HgHfzZtEMmvV58x6dtqns0XTAW7Vdm4HJ04OCp/crOO7rd9SGxQAE/mVA9xRN+kVSMRFF6S9JFGUtthkjBA5tFCWc2l4V43Ex9GmUP3SI37Jjmir9KqlaDJ4S4JB3vuM/jzyH1+8MuoZ+QGzfnvPoJb96cZlWjMcKLfgDwB7E634JTY+asjsPzS5CiVnEWY+KsrsIN5rn3mAPjqmQBxGjcGKB9f9ZxY3mYC2L85CJ2FXIxKKyHk+dg0FHbuEc7D5NzWUX32WxFcWNGRAbvwSx0RmIXVDuYySafluQBmzA/ssqJAMLnli+WIC90Gw4lm85wcp0qjArEDPJJV/sSx4P9ungTpgMw5gVC1XO4uULq0s3v1rqLi0vX/z65vlH50f8T/RHmSPTk5xxWBWOluMT6WiOy+tdvWxlV/XQb3o3c6Ssr+r6I708GsX9/nzp1tKFh0s3v7m4vAy/Hnb/KMOvc1wump6Il48K6mGDy02X9Yd65pa+nQIjk76lWxCkG8NBCP0HQS9IpAAAeJxjYGRgYGBhcCrq214Qz2/zlUGenQEEzr/77oug/zewFbB+AHI5GJhAogBwKQ0qeJxjYGRgYH3/P46BgZ0BBNgKGBgZUAEPAE/7At0AAAB4nGNngAB2IGYjhBsYBAAIYADVAAAAAAAAAAAAAFwAyAEeAaACCgKmAx4DggRmAAAAAQAAAAwAagAEAAAAAAACAAEAAgAWAAABAAChAAAAAHiclZI7bxQxFIWPd/JkUYQChEhIyAVKgdBMskm1QkKrRETpQiLRUczueB/K7HhlOxttg8LvoKPgP9DxFxANDR0tHRWi4NjrPIBEgh1p/dm+vufcawNYFWsQmP6e4jSyQB2fI9cwj++RE9wTjyPP4LYoI89iWbyLPIe6+Bh5Hs9rryMv4GbtW+RF3EhuRa7jbrIbeQkPkjdUETOLnL0Kip4FVvAhco1RXyMnSPEz8gzWxE7kWTwUp5HnsCLeR57HW/El8gJWa58iL+JO7UfkOh4l9yMv4UnyEtvQGGECgwF66MNBooF1bGCL1ELB/TYU+ZBRlvsKQ44Se6jQ4a7hef+fh72Crv25kp+8lNWGmeKoOI5jJLb1aGIGvb6TjfWNLdkqdFvJw4l1amjlXtXRZqRN7lSRylZZyhBqpVFWmTEXgWfUrpi/hZOQXdOd4rKuXOtEWT3k5IArPRzTUU5tHKjecZkTpnVbNOnt6jzN8240GD4xtikvZW56043rPMg/dS+dlOceXoR+WPbJ55Dsekq1lJpnypsMUsYOdCW30o103Ytu/lvh+5RWFLfBjm9/N8hJntPhvx92rnoE/kyHdGasGy754kw36vsVf/lFeBi+0COu+cfgQr42G3CRpeLoZ53gmfe3X6rcKt5oVxnptHR9JS8ehVUd5wvvahN2uqxOOpMXapibI5k7Zwbt4xBSaTfoKBufhAnO/uqNcfK8OTs0OQ6l7JIqFjDhYj5WcjevCnI/1DDiI8j4ndWb/5YzDZWh79yomWXeXj7Nnw70/2TIeFPTrlSh89k1ObOSRVZWZfgF0r/zJQB4nG2JUQuCQBCEd07TTg36fb2IyBaLd3vWaUh/vmSJnvpgmG8YcmS8X3Shf3R7QA4OBUocUKHGER5NNbOOEvwc1txnuWkTRb/aPjimJ5vXabI+3VfOiyS15UWvyezM2xiGOPyuMohOH8O8JiO4Af+FsAGNAEuwCFBYsQEBjlmxRgYrWCGwEFlLsBRSWCGwgFkdsAYrXFhZsBQrAAA=) format('woff');\n}\n\n@font-face {\n  font-family: octicons-anchor;\n  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');\n}\n\n.markdown-body {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  color: #333333;\n  overflow: hidden;\n  font-family: \"Helvetica Neue\", Helvetica, \"Segoe UI\", Arial, freesans, sans-serif;\n  font-size: 16px;\n  line-height: 1.6;\n  word-wrap: break-word;\n}\n\n.markdown-body a {\n  background: transparent;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline: 0;\n}\n\n.markdown-body b,\n.markdown-body strong {\n  font-weight: bold;\n}\n\n.markdown-body mark {\n  background: #ff0;\n  color: #000;\n  font-style: italic;\n  font-weight: bold;\n}\n\n.markdown-body sub,\n.markdown-body sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n.markdown-body sup {\n  top: -0.5em;\n}\n.markdown-body sub {\n  bottom: -0.25em;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border: 0;\n}\n\n.markdown-body hr {\n  -moz-box-sizing: content-box;\n  box-sizing: content-box;\n  height: 0;\n}\n\n.markdown-body pre {\n  overflow: auto;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body input {\n  color: inherit;\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body html input[disabled] {\n  cursor: default;\n}\n\n.markdown-body input {\n  line-height: normal;\n}\n\n.markdown-body input[type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body table {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body .codehilitetable {\n  border: 0;\n  border-spacing: 0;\n}\n\n.markdown-body .codehilitetable tr {\n  border: 0;\n}\n\n.markdown-body .codehilitetable pre,\n.markdown-body .codehilitetable div.codehilite {\n  margin: 0;\n}\n\n.markdown-body .linenos,\n.markdown-body .code,\n.markdown-body .codehilitetable td {\n  border: 0;\n  padding: 0;\n}\n\n.markdown-body td:not(.linenos) .linenodiv {\n  padding: 0 !important;\n}\n\n.markdown-body .code {\n  width: 100%;\n}\n\n.markdown-body .linenos div pre,\n.markdown-body .linenodiv pre,\n.markdown-body .linenodiv {\n  border: 0;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-border-top-left-radius: 3px;\n  -webkit-border-bottom-left-radius: 3px;\n  -moz-border-radius-topleft: 3px;\n  -moz-border-radius-bottomleft: 3px;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n\n.markdown-body .code div pre,\n.markdown-body .code div {\n  border: 0;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-border-top-right-radius: 3px;\n  -webkit-border-bottom-right-radius: 3px;\n  -moz-border-radius-topright: 3px;\n  -moz-border-radius-bottomright: 3px;\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n\n.markdown-body * {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font: 13px Helvetica, arial, freesans, clean, sans-serif, \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  line-height: 1.4;\n}\n\n.markdown-body a {\n  color: #4183c4;\n  text-decoration: none;\n}\n\n.markdown-body a:hover,\n.markdown-body a:focus,\n.markdown-body a:active {\n  text-decoration: underline;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #ddd;\n}\n\n.markdown-body hr:before,\n.markdown-body hr:after {\n  display: table;\n  content: \" \";\n}\n\n.markdown-body hr:after {\n  clear: both;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 15px;\n  margin-bottom: 15px;\n  line-height: 1.1;\n}\n\n.markdown-body h1 {\n  font-size: 30px;\n}\n\n.markdown-body h2 {\n  font-size: 21px;\n}\n\n.markdown-body h3 {\n  font-size: 16px;\n}\n\n.markdown-body h4 {\n  font-size: 14px;\n}\n\n.markdown-body h5 {\n  font-size: 12px;\n}\n\n.markdown-body h6 {\n  font-size: 11px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  background-color: #e7e7e7;\n  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);\n  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);\n  background-image: linear-gradient(#fefefe, #e7e7e7);\n  background-repeat: repeat-x;\n  border-radius: 2px;\n  border: 1px solid #cfcfcf;\n  color: #000;\n  padding: 3px 5px;\n  line-height: 10px;\n  font: 11px Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  display: inline-block;\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body .headeranchor-link {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  display: block;\n  padding-right: 6px;\n  padding-left: 30px;\n  margin-left: -30px;\n}\n\n.markdown-body .headeranchor-link:focus {\n  outline: none;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  position: relative;\n  margin-top: 1em;\n  margin-bottom: 16px;\n  font-weight: bold;\n  line-height: 1.4;\n}\n\n.markdown-body h1 .headeranchor,\n.markdown-body h2 .headeranchor,\n.markdown-body h3 .headeranchor,\n.markdown-body h4 .headeranchor,\n.markdown-body h5 .headeranchor,\n.markdown-body h6 .headeranchor {\n  display: none;\n  color: #000;\n  vertical-align: middle;\n}\n\n.markdown-body h1:hover .headeranchor-link,\n.markdown-body h2:hover .headeranchor-link,\n.markdown-body h3:hover .headeranchor-link,\n.markdown-body h4:hover .headeranchor-link,\n.markdown-body h5:hover .headeranchor-link,\n.markdown-body h6:hover .headeranchor-link {\n  height: 1em;\n  padding-left: 8px;\n  margin-left: -30px;\n  line-height: 1;\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .headeranchor-link .headeranchor,\n.markdown-body h2:hover .headeranchor-link .headeranchor,\n.markdown-body h3:hover .headeranchor-link .headeranchor,\n.markdown-body h4:hover .headeranchor-link .headeranchor,\n.markdown-body h5:hover .headeranchor-link .headeranchor,\n.markdown-body h6:hover .headeranchor-link .headeranchor {\n  display: inline-block;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2.25em;\n  line-height: 1.2;\n  border-bottom: 1px solid #eee;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.75em;\n  line-height: 1.225;\n  border-bottom: 1px solid #eee;\n}\n\n.markdown-body h3 {\n  font-size: 1.5em;\n  line-height: 1.43;\n}\n\n.markdown-body h4 {\n  font-size: 1.25em;\n}\n\n.markdown-body h5 {\n  font-size: 1em;\n}\n\n.markdown-body h6 {\n  font-size: 1em;\n  color: #777;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre,\n.markdown-body .admonition {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 4px;\n  padding: 0;\n  margin: 16px 0;\n  background-color: #e7e7e7;\n  border: 0 none;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: bold;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body blockquote {\n  padding: 0 15px;\n  color: #777;\n  border-left: 4px solid #ddd;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n  word-break: normal;\n  word-break: keep-all;\n}\n\n.markdown-body table th {\n  font-weight: bold;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #ddd;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #ccc;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f8f8f8;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.markdown-body code,\n.markdown-body samp {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(0,0,0,0.04);\n  border-radius: 3px;\n}\n\n.markdown-body code:before,\n.markdown-body code:after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .codehilite {\n  margin-bottom: 16px;\n}\n\n.markdown-body .codehilite pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f7f7f7;\n  border-radius: 3px;\n}\n\n.markdown-body .codehilite pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: initial;\n  padding: 0;\n  margin: 0;\n  overflow: initial;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code:before,\n.markdown-body pre code:after {\n  content: normal;\n}\n\n/* Admonition */\n.markdown-body .admonition {\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  position: relative;\n  border-radius: 3px;\n  border: 1px solid #e0e0e0;\n  border-left: 6px solid #333;\n  padding: 10px 10px 10px 30px;\n}\n\n.markdown-body .admonition table {\n  color: #333;\n}\n\n.markdown-body .admonition p {\n  padding: 0;\n}\n\n.markdown-body .admonition-title {\n  font-weight: bold;\n  margin: 0;\n}\n\n.markdown-body .admonition>.admonition-title {\n  color: #333;\n}\n\n.markdown-body .attention>.admonition-title {\n  color: #a6d796;\n}\n\n.markdown-body .caution>.admonition-title {\n  color: #d7a796;\n}\n\n.markdown-body .hint>.admonition-title {\n  color: #96c6d7;\n}\n\n.markdown-body .danger>.admonition-title {\n  color: #c25f77;\n}\n\n.markdown-body .question>.admonition-title {\n  color: #96a6d7;\n}\n\n.markdown-body .note>.admonition-title {\n  color: #d7c896;\n}\n\n.markdown-body .admonition:before,\n.markdown-body .attention:before,\n.markdown-body .caution:before,\n.markdown-body .hint:before,\n.markdown-body .danger:before,\n.markdown-body .question:before,\n.markdown-body .note:before {\n  font: normal normal 16px fontawesome-mini;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  line-height: 1.5;\n  color: #333;\n  position: absolute;\n  left: 0;\n  top: 0;\n  padding-top: 10px;\n  padding-left: 10px;\n}\n\n.markdown-body .admonition:before {\n  content: \"\\f056\\00a0\";\n  color: 333;\n}\n\n.markdown-body .attention:before {\n  content: \"\\f058\\00a0\";\n  color: #a6d796;\n}\n\n.markdown-body .caution:before {\n  content: \"\\f06a\\00a0\";\n  color: #d7a796;\n}\n\n.markdown-body .hint:before {\n  content: \"\\f05a\\00a0\";\n  color: #96c6d7;\n}\n\n.markdown-body .danger:before {\n  content: \"\\f057\\00a0\";\n  color: #c25f77;\n}\n\n.markdown-body .question:before {\n  content: \"\\f059\\00a0\";\n  color: #96a6d7;\n}\n\n.markdown-body .note:before {\n  content: \"\\f040\\00a0\";\n  color: #d7c896;\n}\n\n.markdown-body .admonition::after {\n  content: normal;\n}\n\n.markdown-body .attention {\n  border-left: 6px solid #a6d796;\n}\n\n.markdown-body .caution {\n  border-left: 6px solid #d7a796;\n}\n\n.markdown-body .hint {\n  border-left: 6px solid #96c6d7;\n}\n\n.markdown-body .danger {\n  border-left: 6px solid #c25f77;\n}\n\n.markdown-body .question {\n  border-left: 6px solid #96a6d7;\n}\n\n.markdown-body .note {\n  border-left: 6px solid #d7c896;\n}\n\n.markdown-body .admonition>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body .admonition>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n/* progress bar*/\n.markdown-body .progress {\n  display: block;\n  width: 300px;\n  margin: 10px 0;\n  height: 24px;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  background-color: #ededed;\n  position: relative;\n  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);\n}\n\n.markdown-body .progress-label {\n  position: absolute;\n  text-align: center;\n  font-weight: bold;\n  width: 100%; margin: 0;\n  line-height: 24px;\n  color: #333;\n  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;\n  -webkit-font-smoothing: antialiased !important;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.markdown-body .progress-bar {\n  height: 24px;\n  float: left;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  background-color: #96c6d7;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);\n  background-size: 30px 30px;\n  background-image: -webkit-linear-gradient(\n    135deg, rgba(255, 255, 255, .4) 27%,\n    transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%,\n    transparent 77%, transparent\n  );\n  background-image: -moz-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: -ms-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: -o-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n}\n\n.markdown-body .progress-100plus .progress-bar {\n  background-color: #a6d796;\n}\n\n.markdown-body .progress-80plus .progress-bar {\n  background-color: #c6d796;\n}\n\n.markdown-body .progress-60plus .progress-bar {\n  background-color: #d7c896;\n}\n\n.markdown-body .progress-40plus .progress-bar {\n  background-color: #d7a796;\n}\n\n.markdown-body .progress-20plus .progress-bar {\n  background-color: #d796a6;\n}\n\n.markdown-body .progress-0plus .progress-bar {\n  background-color: #c25f77;\n}\n\n.markdown-body .candystripe-animate .progress-bar{\n  -webkit-animation: animate-stripes 3s linear infinite;\n  -moz-animation: animate-stripes 3s linear infinite;\n  animation: animate-stripes 3s linear infinite;\n}\n\n@-webkit-keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n@-moz-keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n@keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n.markdown-body .gloss .progress-bar {\n  box-shadow:\n    inset 0 4px 12px rgba(255, 255, 255, .7),\n    inset 0 -12px 0 rgba(0, 0, 0, .05);\n}\n\n/* Multimarkdown Critic Blocks */\n.markdown-body .critic_mark {\n  background: #ff0;\n}\n\n.markdown-body .critic_delete {\n  color: #c82829;\n  text-decoration: line-through;\n}\n\n.markdown-body .critic_insert {\n  color: #718c00 ;\n  text-decoration: underline;\n}\n\n.markdown-body .critic_comment {\n  color: #8e908c;\n  font-style: italic;\n}\n\n.markdown-body .headeranchor {\n  font: normal normal 16px octicons-anchor;\n  line-height: 1;\n  display: inline-block;\n  text-decoration: none;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.headeranchor:before {\n  content: '\\f05c';\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 4px 0.25em -20px;\n  vertical-align: middle;\n}\n\n/* Media */\n@media only screen and (min-width: 480px) {\n  .markdown-body {\n    font-size:14px;\n  }\n}\n\n@media only screen and (min-width: 768px) {\n  .markdown-body {\n    font-size:16px;\n  }\n}\n\n@media print {\n  .markdown-body * {\n    background: transparent !important;\n    color: black !important;\n    filter:none !important;\n    -ms-filter: none !important;\n  }\n\n  .markdown-body {\n    font-size:12pt;\n    max-width:100%;\n    outline:none;\n    border: 0;\n  }\n\n  .markdown-body a,\n  .markdown-body a:visited {\n    text-decoration: underline;\n  }\n\n  .markdown-body .headeranchor-link {\n    display: none;\n  }\n\n  .markdown-body a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n\n  .markdown-body abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n\n  .markdown-body .ir a:after,\n  .markdown-body a[href^=\"javascript:\"]:after,\n  .markdown-body a[href^=\"#\"]:after {\n    content: \"\";\n  }\n\n  .markdown-body pre {\n    white-space: pre;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n  }\n\n  .markdown-body pre,\n  .markdown-body blockquote {\n    border: 1px solid #999;\n    padding-right: 1em;\n    page-break-inside: avoid;\n  }\n\n  .markdown-body .progress,\n  .markdown-body .progress-bar {\n    -moz-box-shadow: none;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n  }\n\n  .markdown-body .progress {\n    border: 1px solid #ddd;\n  }\n\n  .markdown-body .progress-bar {\n    height: 22px;\n    border-right: 1px solid #ddd;\n  }\n\n  .markdown-body tr,\n  .markdown-body img {\n    page-break-inside: avoid;\n  }\n\n  .markdown-body img {\n    max-width: 100% !important;\n  }\n\n  .markdown-body p,\n  .markdown-body h2,\n  .markdown-body h3 {\n    orphans: 3;\n    widows: 3;\n  }\n\n  .markdown-body h2,\n  .markdown-body h3 {\n    page-break-after: avoid;\n  }\n}\n</style><title>react -start</title></head><body><article class=\"markdown-body\"><p>React -start</p>\n<h2 id=\"react\"><a name=\"user-content-react\" href=\"#react\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React</h2>\n<ul>\n<li>Facebook</li>\n<li>MVC中的V：M -&gt; V</li>\n<li>和Flux搭配，可以做到MVVM</li>\n<li>默认转义所有字符串，防止XSS攻击</li>\n<li>React认为HTML标签及生成这些标签的代码间存在着内在联系，React设计允许你在构建标签结构时充分利用JS的强大能力，而不必在笨拙的模板语言上浪费时间</li>\n</ul>\n<h2 id=\"why-react\"><a name=\"user-content-why-react\" href=\"#why-react\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Why React?</h2>\n<ul>\n<li>简单：<br>\n  model改变后，react自动处理用户界面的更新；</li>\n<li>声明式：<br>\n  更新界面时，react仅仅会更新变化的部分；</li>\n<li>虚拟Dom<br>\n  React在内存中维护一个快速响应的DOM描述，并利用他来快速地计算出差异，然后更新浏览器中的DOM;</li>\n</ul>\n<h2 id=\"react_1\"><a name=\"user-content-react_1\" href=\"#react_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React 最需要走心的工作</h2>\n<ul>\n<li>构建可组合的、可复用的组件;</li>\n<li>组件的好处：代码复用、测试更加点多;</li>\n</ul>\n<h2 id=\"react-hello-world\"><a name=\"user-content-react-hello-world\" href=\"#react-hello-world\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - hello world</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"./react.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n        &lt;script type=\"text/javascript\"&gt;\n            function h1 (text, style) {\n                return '&lt;h1&gt;'' + text + '&lt;/h1&gt;';\n            }\n            var el = React.createElement('h1', {style: {color: '##00f'}}, 'Hello World!');\n            React.render(el, document.getElementById('app'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"react-\"><a name=\"user-content-react-\" href=\"#react-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 类似的工作</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n        &lt;script type=\"text/javascript\"&gt;\n              function h1 (text, style) {\n                var result;\n                var styleStr;\n\n                if (style) {\n                    styleStr = 'style=\"';\n                    for (var name in style) {\n                        styleStr += name + ':' + style[name] + ';'; \n                    }\n                    styleStr += '\"';\n                }\n\n                if (styleStr) {\n                    result = '&lt;h1 ' + styleStr + '&gt;' + text + '&lt;/h1&gt;';\n                } else {\n                    result = '&lt;h1&gt;' + text + '&lt;/h1&gt;';\n                }\n\n                  return result;\n              }\n\n              function render(target, container) {\n                container.innerHTML = target;\n              }\n\n              render(h1('Hello World!', {color: '##00f'}), document.getElementById('app'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"jsx-javascript-xml\"><a name=\"user-content-jsx-javascript-xml\" href=\"#jsx-javascript-xml\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX - Javascript XML</h2>\n<p>优势：<br>\n- 类HTML标记语言，都是熟悉的语法<br>\n- 抽象了React Element的创建过程<br>\n- 简单直观，可以提升效率且成本很低<br>\n劣势：<br>\n- 在浏览器运行会很慢，项目中需要预处理</p>\n<h2 id=\"jsx-hello-world\"><a name=\"user-content-jsx-hello-world\" href=\"#jsx-hello-world\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX - hello world</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"./react.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"./JSXTransformer.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n        &lt;script type=\"text/jsx\"&gt;\n            React.render(&lt;h1&gt;Hello World, JSX!&lt;/h1&gt;, document.getElementById('app'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"jsx-\"><a name=\"user-content-jsx-\" href=\"#jsx-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX - 工作原理</h2>\n<ol>\n<li>使用JSXTransformer通过监听windows的onload/DOMContentLoaded，来遍历所有&rdquo;text/jsx&rdquo;脚本标签</li>\n<li>获取每个标签的source code并把JSX代码转为react的虚拟dom代码</li>\n<li>最后把react代码添加到新建的script标签中</li>\n<li>预编译的插件是同理，只不过发生在编译阶段</li>\n</ol>\n<h2 id=\"jsx-tips\"><a name=\"user-content-jsx-tips\" href=\"#jsx-tips\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX Tips</h2>\n<ul>\n<li>JSX设置动态属性时，用花括号包裹Javascript变量</li>\n<li>也可以把属性设置为一个函数的调用返回结果</li>\n<li>条件判断支持：三元运输符、&amp;&amp;、||</li>\n<li>key: 列表时会建议使用，重用组件提升渲染性能</li>\n<li>refs：获取创建dom的描述对象 or 获取创建dom的对象, this.refs.usernameInput.getDOMNode() x</li>\n<li>HTML关键词：for &gt; htmlFor, class &gt; className, style: {}</li>\n<li>事件统一使用驼峰式</li>\n</ul>\n<h2 id=\"react-tips\"><a name=\"user-content-react-tips\" href=\"#react-tips\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React Tips</h2>\n<ul>\n<li>React创建的class名称首字母必须大写，不然找不到</li>\n<li>JSX可以不换行，换行时必须使用（）包装，不然会报非法组件错误；</li>\n<li>只能有根一个节点，多个节点会抛错</li>\n<li>内联样式支持对象，名称使用驼峰式，否则不起作用，fontSize</li>\n<li>返回：null、false、React组件</li>\n</ul>\n<h2 id=\"_1\"><a name=\"user-content-_1\" href=\"#_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>组件的复合</h2>\n<ul>\n<li>复用那些接口定义良好的组件来开发新的模块化组件</li>\n<li>this.props.children X</li>\n<li>组件支持 ref=&rdquo;refId&rdquo;  this.refs.refId</li>\n</ul>\n<h2 id=\"react-_1\"><a name=\"user-content-react-_1\" href=\"#react-_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 组件数据流</h2>\n<ul>\n<li>props</li>\n<li>state</li>\n</ul>\n<h2 id=\"react-dom\"><a name=\"user-content-react-dom\" href=\"#react-dom\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - dom对象</h2>\n<ul>\n<li>refs</li>\n</ul>\n<h2 id=\"react-_2\"><a name=\"user-content-react-_2\" href=\"#react-_2\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 组件生命周期</h2>\n<h3 id=\"_2\"><a name=\"user-content-_2\" href=\"#_2\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>组件类创建时</h3>\n<ul>\n<li>getDefaultProps</li>\n</ul>\n<h3 id=\"_3\"><a name=\"user-content-_3\" href=\"#_3\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>初始化</h3>\n<ul>\n<li>getinitialState</li>\n</ul>\n<h3 id=\"_4\"><a name=\"user-content-_4\" href=\"#_4\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>挂载</h3>\n<ul>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>\n<h3 id=\"_5\"><a name=\"user-content-_5\" href=\"#_5\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>更新</h3>\n<ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h3 id=\"_6\"><a name=\"user-content-_6\" href=\"#_6\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>卸载</h3>\n<ul>\n<li>componentWillUnmount</li>\n</ul>\n<h3 id=\"_7\"><a name=\"user-content-_7\" href=\"#_7\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>生命周期</h3>\n<ul>\n<li>Class Create Pahses:<ul>\n<li>invoke while class created and be shared between instances.</li>\n</ul>\n</li>\n<li>Initialization Pahses:<ul>\n<li>constructor: Initialization of state. The instance is now retained.</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>[children&rsquo;s constructors]<ul>\n<li>[children&rsquo;s componentWillMount and render]</li>\n<li>[children&rsquo;s componentDidMount]</li>\n</ul>\n</li>\n<li>componentDidMount</li>\n</ul>\n</li>\n<li>Update Phases:<ul>\n<li>componentWillReceiveProps (only called if parent updated)</li>\n<li>shouldComponentUpdate (default: always returns true to prevent subtle bugs)<ul>\n<li>componentWillUpdate</li>\n<li>render<ul>\n<li>[children&rsquo;s constructors or receive props phases]</li>\n</ul>\n</li>\n<li>componentDidUpdate</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Unmount Phases:<ul>\n<li>componentWillUnmount<ul>\n<li>[children&rsquo;s componentWillUnmount]</li>\n<li>[children destroyed]</li>\n</ul>\n</li>\n<li>(destroyed): The instance is now blank, released by React and ready for GC</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"mixin\"><a name=\"user-content-mixin\" href=\"#mixin\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Mixin</h2>\n<ul>\n<li>独立于组件的</li>\n<li>多个组件可共享的</li>\n<li>对象类型的配置</li>\n</ul>\n<h2 id=\"mixin-demo\"><a name=\"user-content-mixin-demo\" href=\"#mixin-demo\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Mixin - DEMO</h2>\n<pre><code>var userMixin = {\n    getDefaultProps: function () {\n        return {\n            username: '小红'\n        };\n    },\n    renderUser: function (welcomeMsg) {\n        return (\n                &lt;div className=\"user-wrap\"&gt;\n                    &lt;span ref=\"welcomeDesc\" className=\"welcome-user\"&gt;{welcomeMsg}&lt;/span&gt;\n                &lt;/div&gt;\n            );\n    },\n    componentDidMount: function () {\n        console.log('mount');\n    }\n}\n\n\nvar Header = React.createClass({\n    mixins: [userMixin],\n    getInitialState: function () {\n        return {\n            systemName: 'React平台Header'\n        };\n    },\n    render: function () {\n        var welcomeMsg;\n        if (this.props.username) {\n            welcomeMsg = '欢迎，' + this.props.username + '！'\n        };\n        return (\n                &lt;div className=\"header-content\"&gt;\n                    &lt;h1&gt;{this.state.systemName}&lt;/h1&gt;\n                    {\n                        welcomeMsg ? this.renderUser(welcomeMsg) : null\n                    }\n                &lt;/div&gt;\n            );\n    }\n});\n</code></pre>\n<h2 id=\"react-purerendermixin\"><a name=\"user-content-react-purerendermixin\" href=\"#react-purerendermixin\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - PureRenderMixin</h2>\n<ul>\n<li>React组件的渲染函数是“纯粹的” - 同样的props和state，渲染出同样的效果</li>\n<li>可以提升性能 - 在shouldComponentUpdate里检查props、state是否会发生变化</li>\n<li>shouldComponentUpdate的判断结果会影响整个组件子树</li>\n<li>据说props、state比较是浅比较，不适合(特别)复杂的数据结构 x</li>\n</ul>\n<h2 id=\"purerendermixin-shouldcomponentupdate-shallow-check\"><a name=\"user-content-purerendermixin-shouldcomponentupdate-shallow-check\" href=\"#purerendermixin-shouldcomponentupdate-shallow-check\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>PureRenderMixin - shouldComponentUpdate: shallow check</h2>\n<pre><code>/**\n - Performs equality by iterating through keys on an object and returning false\n - when any key has values which are not strictly equal between the arguments.\n - Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  var bHasOwnProperty = hasOwnProperty.bind(objB);\n  for (var i = 0; i &lt; keysA.length; i++) {\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n</code></pre>\n<h3 id=\"react-mixin\"><a name=\"user-content-react-mixin\" href=\"#react-mixin\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - Mixin原理</h3>\n<ul>\n<li>Mixin必须是一个对象</li>\n<li>在React.createClass（源码：ReactClass &gt; createClass: function (spec) {&hellip;}会把Mixin对象融入react对象</li>\n<li>融入过程是通过遍历Mixin的属性（for..in）逐个添加到react对象得prototype上（mixSpecIntoComponent）</li>\n<li>添加之前需要判断是否已经有了相同属性，且此属性是否支持覆盖、是否支持多个、是否需要合并</li>\n<li>添加的方式是：覆盖（override）、合并、多个函数链</li>\n</ul>\n<h3 id=\"react-mixin_1\"><a name=\"user-content-react-mixin_1\" href=\"#react-mixin_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - Mixin融合方式的标准</h3>\n<ul>\n<li>一些基础的属性是不允许覆盖的，比如：setProps、replaceProps、replaceState、isMounted</li>\n<li>渲染的属性是不允许定义多次的，比如：render、shouldComponentUpdate</li>\n<li>需要合并的是那些有返回值的，比如：getDefaultProps、getInitialState</li>\n<li>其他的都支持多个函数链的形式（先执行已有的，在执行Mixin的），比如：willMount、didMount、willUpdate、didUpdate等等</li>\n</ul>\n<h2 id=\"react-_3\"><a name=\"user-content-react-_3\" href=\"#react-_3\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 表单组件</h2>\n<h3 id=\"_8\"><a name=\"user-content-_8\" href=\"#_8\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>受用户交互影响的属性</h3>\n<ul>\n<li>value，用于 input、textarea 组件</li>\n<li>checked，用于类型为 checkbox 或者 radio 的 input 组件</li>\n<li>selected，用于 option 组件</li>\n</ul>\n<h3 id=\"onchange\"><a name=\"user-content-onchange\" href=\"#onchange\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>onChange 回调函数来监听组件变化</h3>\n<ul>\n<li>input 或 textarea 的 value 发生变化时。</li>\n<li>input 的 checked 状态改变时。</li>\n<li>option 的 selected 状态改变时。</li>\n</ul>\n<h3 id=\"controlled-components-\"><a name=\"user-content-controlled-components-\" href=\"#controlled-components-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Controlled Components - 受限组件</h3>\n<ul>\n<li>设置了 value 的 input 是一个受限组件</li>\n</ul>\n<h3 id=\"-demo\"><a name=\"user-content--demo\" href=\"#-demo\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>受限组件 - DEMO</h3>\n<pre><code>var App = React.createClass({\n    getInitialState: function () {\n        return {\n            phone: '15821466666'\n        };\n    },\n    render: function () {\n        return (\n                &lt;div&gt;\n                    &lt;label htmlFor=\"phone\"&gt;手机号：&lt;/label&gt;\n                    &lt;input type='text' id=\"phone\" value={this.state.phone} onChange={this.phoneChangeHlr} /&gt;\n                &lt;/div&gt;\n            );\n    },\n    phoneChangeHlr: function (event) {\n        this.setState({phone: event.target.value});\n    }\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('app'));\n</code></pre>\n<h2 id=\"react-add-ons\"><a name=\"user-content-react-add-ons\" href=\"#react-add-ons\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - add-ons</h2>\n<ul>\n<li>TransitionGroup和CSSTransitionGroup</li>\n<li>LinkedStateMixin - 用于简化用户表单输入数据和组件 state 之间的双向数据绑定</li>\n<li>classSet，用于更加干净简洁地操作 DOM 中的 class 字符串</li>\n<li>cloneWithProps，用于实现 React 组件浅复制，同时改变它们的 props </li>\n<li>update，一个辅助方法，使得在 JavaScript 中处理不可变数据更加容易</li>\n<li>PureRenderMixin，在某些场景下的性能检测器</li>\n</ul>\n<h2 id=\"linkedstatemixin-demo\"><a name=\"user-content-linkedstatemixin-demo\" href=\"#linkedstatemixin-demo\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>LinkedStateMixin - DEMO</h2>\n<pre><code>var LinkedStateMixin = React.addons.LinkedStateMixin;\nvar App = React.createClass({\n    mixins: [LinkedStateMixin],\n    getInitialState: function () {\n        return {\n            phone: '15821466666'\n        };\n    },\n    render: function () {\n        return (\n                &lt;div&gt;\n                    &lt;label htmlFor=\"phone\"&gt;手机号：&lt;/label&gt;\n                    &lt;input type='text' id=\"phone\" valueLink={this.linkState('phone')}  /&gt;\n                &lt;/div&gt;\n            );\n    }\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('app'));\n</code></pre>\n<h2 id=\"webpack\"><a name=\"user-content-webpack\" href=\"#webpack\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>开发工具webpack</h2>\n<h3 id=\"webpack-react-install\"><a name=\"user-content-webpack-react-install\" href=\"#webpack-react-install\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>webpack + react install</h3>\n<ul>\n<li>npm init</li>\n<li>npm install &ndash;save react react</li>\n<li>npm install &ndash;save-dev webpack webpack-dev-server</li>\n<li>npm install &ndash;save-dev jsx-loader css-loader file-loader style-loader url-loader</li>\n</ul>\n<h3 id=\"configuring-webpack\"><a name=\"user-content-configuring-webpack\" href=\"#configuring-webpack\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Configuring webpack</h3>\n<pre><code>var webpack = require('webpack');\n\nmodule.exports = {\n    // 它定义了打包的入口文件，数组中的文件会按顺序进行，并且它会自行解决依赖问题。\n    entry: {\n        main: './pages/main.js',\n    },\n    // 它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径\n    output: {\n        path: __dirname + '/build',\n        publicPath: '/build/',\n        filename: '[name].js'\n    },\n    // Webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。\n    // resolve属性中的extensions数组中用于配置程序可以自行补全哪些后缀。\n    // 比如 Hello.jsx 这样的文件就可以直接用 require(./Hello) 引用。\n    resolve: {\n        extensions: ['', '.js', '.jsx']\n    },\n    // webpack将所有的资源都看做是模块，而模块就需要加载器\n    module: {\n        loaders: [\n            // loaders 指定 jsx-loader 编译后缀名为 .jsx 的文件，\n            // 建议给含有 JSX 的文件添加 .jsx 后缀，\n            // 当然你也可以直接使用 .js 后缀， 相应的 test 配置正则要修改匹配就是。\n            { test: /\\.js?$/, exclude: /node_modules/, loader: 'jsx?harmony' }, \n            { test: /\\.(css)/, loader: 'style-loader!css-loader' },\n            // inline base64 URLs for &lt;=8k images, direct URLs for the rest\n            {test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192' } \n            // loaders: ['react-hot', 'jsx?harmony']\n            // loaders后面如果跟的不是数组，则会报错：LoadersList.js:81 r.forEach(function(r) \n        ]\n    },\n    // 我们可以在plugin参数中配置我们需要用到的各种各样的插件。\n    plugins: [\n        new webpack.NoErrorsPlugin(),\n    ]\n}\n</code></pre>\n<h3 id=\"webpack_1\"><a name=\"user-content-webpack_1\" href=\"#webpack_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Webpack 命令</h3>\n<p>启动webpack命令<br>\n- webpack -d 提供SourceMaps，方便调试<br>\n- webpack -w 提供watch方法，实时进行打包更新<br>\n- webpack &ndash;colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤<br>\n- webpack &ndash;progress 输出的接口带进度<br>\n- webpack &ndash;profile 输出性能数据，可以看到每一步的耗时<br>\n- webpack -p 对打包后的文件进行压缩<br>\n- webpack &ndash;config <filename> 支持指定实用的配置文件，处理release和debug不同的情况</filename></p>\n<h3 id=\"scripts\"><a name=\"user-content-scripts\" href=\"#scripts\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>配置scripts</h3>\n<pre><code>\"scripts\": {\n    \"locDev\": \"webpack -d -w --progress --colors\",\n    \"serDev\": \"webpack-dev-server --progress --colors --port 8082\"\n}\n</code></pre>\n<h3 id=\"_9\"><a name=\"user-content-_9\" href=\"#_9\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>运行</h3>\n<ul>\n<li>npm run locDev</li>\n<li>npm run serDev</li>\n</ul>\n<h3 id=\"react-_4\"><a name=\"user-content-react-_4\" href=\"#react-_4\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 热插拔</h3>\n<ul>\n<li>npm install &ndash;save-dev react-hot-loader</li>\n<li>webpack.config.js: entry 使用数组，并添加 &lsquo;webpack/hot/only-dev-server&rsquo;</li>\n<li>webpack.config.js: loaders: [&lsquo;react-hot&rsquo;, &lsquo;jsx?harmony&rsquo;]</li>\n<li>入口文件添加 module.hot.accept()</li>\n<li>启动：webpack-dev-server -d &ndash;port 8082 &ndash;hot &ndash;progress &ndash;colors</li>\n</ul>\n<h3 id=\"react-_5\"><a name=\"user-content-react-_5\" href=\"#react-_5\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 热拔插多个入口</h3>\n<ul>\n<li>webpack.config.js: entry:<br>\n    entry: {<br>\n        main: [&lsquo;./pages/main/index.js&rsquo;, &lsquo;webpack/hot/only-dev-server&rsquo;],<br>\n        help: [&lsquo;./pages/help/index.js&rsquo;, &lsquo;webpack/hot/only-dev-server&rsquo;]<br>\n    }</li>\n</ul>\n<h2 id=\"react-render\"><a name=\"user-content-react-render\" href=\"#react-render\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - render时机</h2>\n<h3 id=\"-\"><a name=\"user-content--\" href=\"#-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>批量更新 - 事件回调函数</h3>\n<ul>\n<li>事件处理函数中的多次setState/replaceState会被标记为一次批量更新</li>\n<li>事件处理函数本身在React事件机制中是作为一个回调函数被调用，在函数执行完成后才会触发render</li>\n</ul>\n<h3 id=\"-_1\"><a name=\"user-content--_1\" href=\"#-_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>实时更新 - 其他</h3>\n<ul>\n<li>调用setState/replaceState后直接触发render，比如setInterval</li>\n</ul>\n<h3 id=\"render\"><a name=\"user-content-render\" href=\"#render\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>render流程</h3>\n<ul>\n<li>setState/replaceState 修改状态后</li>\n<li>组件添加等待更新的状态列表，并把新的状态压入列表（ReactUpdateQueue.js: enqueueSetState()）</li>\n<li>标记组件为需要重新渲染的组件（dirty components list）ReactUpdates：enqueueUpdate()</li>\n<li>runBatchedUpdates来处理dirty components（调用对应的render）</li>\n</ul>\n<h2 id=\"react-react\"><a name=\"user-content-react-react\" href=\"#react-react\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - React事件系统</h2>\n<ol>\n<li>React初始化时会把事件监听 ReactEventListener 注入到 ReactBrowserEventEmitter</li>\n<li>ReactBrowserEventEmitter 是浏览器事件的顶级委托，ReactEventListener 为用户绑定事件的DOM绑定自己的处理函数，并在处理函数中调用用户的事件处理函数，然后理render相关逻辑；</li>\n<li>React 事件系统：<ul>\n<li>浏览器事件的顶级委托（top-level delegation）用来 trap (捕获？) 大多数原生浏览器事件，可以注入事件处理器；</li>\n<li>主线程唯一的工作是注入的 ReactEventListener（是为可插拔事件源准备的事件监听器）；</li>\n<li>转发这些被 trap 原生浏览器事件至 EventPluginHub， EventPluginHub 在提取任何组合事件时会调用对应插件（比如 SimpleEventPlugin ）并返回需要处理的事件列表；</li>\n<li>事件插件包括：ResponderEventPlugin、SimpleEventPlugin、TapEventPlugin、EnterLeaveEventPlugin、ChangeEventPlugin、SelectEventPlugin、BeforeInputEventPlugin</li>\n<li>EventPluginHub 同时会维护Dom、事件名称和事件处理器的Mapping；</li>\n<li>ReactEventListener 监听 EventPluginHub 的事件，并处理事件派发及事件响应</li>\n<li>ReactEventListener 的事件响应函数会处理用户的事件处理函数</li>\n</ul>\n</li>\n<li>React组件及组件树的渲染都是在ReactMount里面执行</li>\n<li>mount组件时，初始化组件并注册事件监听（mountComponent）</li>\n<li>事件响应由ReactEventListener的dispatchEvent触发，通过EventPluginHub找到事件处理相关 </li>\n<li>我们的事件函数作为回调处理</li>\n</ol></article></body></html>","excerpt":"","more":"<!DOCTYPE html><html><head><meta charset=\"utf-8\"><meta name=\"date\" content=\"2016-03-28 14:31:16\"><style>body {\n  width: 45em;\n  border: 1px solid #ddd;\n  outline: 1300px solid #fff;\n  margin: 16px auto;\n}\n\nbody .markdown-body\n{\n  padding: 30px;\n}\n\n@font-face {\n  font-family: fontawesome-mini;\n  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');\n}\n\n@font-face {\n  font-family: octicons-anchor;\n  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');\n}\n\n.markdown-body {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  color: #333333;\n  overflow: hidden;\n  font-family: \"Helvetica Neue\", Helvetica, \"Segoe UI\", Arial, freesans, sans-serif;\n  font-size: 16px;\n  line-height: 1.6;\n  word-wrap: break-word;\n}\n\n.markdown-body a {\n  background: transparent;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline: 0;\n}\n\n.markdown-body b,\n.markdown-body strong {\n  font-weight: bold;\n}\n\n.markdown-body mark {\n  background: #ff0;\n  color: #000;\n  font-style: italic;\n  font-weight: bold;\n}\n\n.markdown-body sub,\n.markdown-body sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n.markdown-body sup {\n  top: -0.5em;\n}\n.markdown-body sub {\n  bottom: -0.25em;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border: 0;\n}\n\n.markdown-body hr {\n  -moz-box-sizing: content-box;\n  box-sizing: content-box;\n  height: 0;\n}\n\n.markdown-body pre {\n  overflow: auto;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body input {\n  color: inherit;\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body html input[disabled] {\n  cursor: default;\n}\n\n.markdown-body input {\n  line-height: normal;\n}\n\n.markdown-body input[type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body table {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body .codehilitetable {\n  border: 0;\n  border-spacing: 0;\n}\n\n.markdown-body .codehilitetable tr {\n  border: 0;\n}\n\n.markdown-body .codehilitetable pre,\n.markdown-body .codehilitetable div.codehilite {\n  margin: 0;\n}\n\n.markdown-body .linenos,\n.markdown-body .code,\n.markdown-body .codehilitetable td {\n  border: 0;\n  padding: 0;\n}\n\n.markdown-body td:not(.linenos) .linenodiv {\n  padding: 0 !important;\n}\n\n.markdown-body .code {\n  width: 100%;\n}\n\n.markdown-body .linenos div pre,\n.markdown-body .linenodiv pre,\n.markdown-body .linenodiv {\n  border: 0;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-border-top-left-radius: 3px;\n  -webkit-border-bottom-left-radius: 3px;\n  -moz-border-radius-topleft: 3px;\n  -moz-border-radius-bottomleft: 3px;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n\n.markdown-body .code div pre,\n.markdown-body .code div {\n  border: 0;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-border-top-right-radius: 3px;\n  -webkit-border-bottom-right-radius: 3px;\n  -moz-border-radius-topright: 3px;\n  -moz-border-radius-bottomright: 3px;\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n\n.markdown-body * {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font: 13px Helvetica, arial, freesans, clean, sans-serif, \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  line-height: 1.4;\n}\n\n.markdown-body a {\n  color: #4183c4;\n  text-decoration: none;\n}\n\n.markdown-body a:hover,\n.markdown-body a:focus,\n.markdown-body a:active {\n  text-decoration: underline;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #ddd;\n}\n\n.markdown-body hr:before,\n.markdown-body hr:after {\n  display: table;\n  content: \" \";\n}\n\n.markdown-body hr:after {\n  clear: both;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 15px;\n  margin-bottom: 15px;\n  line-height: 1.1;\n}\n\n.markdown-body h1 {\n  font-size: 30px;\n}\n\n.markdown-body h2 {\n  font-size: 21px;\n}\n\n.markdown-body h3 {\n  font-size: 16px;\n}\n\n.markdown-body h4 {\n  font-size: 14px;\n}\n\n.markdown-body h5 {\n  font-size: 12px;\n}\n\n.markdown-body h6 {\n  font-size: 11px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  background-color: #e7e7e7;\n  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);\n  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);\n  background-image: linear-gradient(#fefefe, #e7e7e7);\n  background-repeat: repeat-x;\n  border-radius: 2px;\n  border: 1px solid #cfcfcf;\n  color: #000;\n  padding: 3px 5px;\n  line-height: 10px;\n  font: 11px Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  display: inline-block;\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body .headeranchor-link {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  display: block;\n  padding-right: 6px;\n  padding-left: 30px;\n  margin-left: -30px;\n}\n\n.markdown-body .headeranchor-link:focus {\n  outline: none;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  position: relative;\n  margin-top: 1em;\n  margin-bottom: 16px;\n  font-weight: bold;\n  line-height: 1.4;\n}\n\n.markdown-body h1 .headeranchor,\n.markdown-body h2 .headeranchor,\n.markdown-body h3 .headeranchor,\n.markdown-body h4 .headeranchor,\n.markdown-body h5 .headeranchor,\n.markdown-body h6 .headeranchor {\n  display: none;\n  color: #000;\n  vertical-align: middle;\n}\n\n.markdown-body h1:hover .headeranchor-link,\n.markdown-body h2:hover .headeranchor-link,\n.markdown-body h3:hover .headeranchor-link,\n.markdown-body h4:hover .headeranchor-link,\n.markdown-body h5:hover .headeranchor-link,\n.markdown-body h6:hover .headeranchor-link {\n  height: 1em;\n  padding-left: 8px;\n  margin-left: -30px;\n  line-height: 1;\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .headeranchor-link .headeranchor,\n.markdown-body h2:hover .headeranchor-link .headeranchor,\n.markdown-body h3:hover .headeranchor-link .headeranchor,\n.markdown-body h4:hover .headeranchor-link .headeranchor,\n.markdown-body h5:hover .headeranchor-link .headeranchor,\n.markdown-body h6:hover .headeranchor-link .headeranchor {\n  display: inline-block;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2.25em;\n  line-height: 1.2;\n  border-bottom: 1px solid #eee;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.75em;\n  line-height: 1.225;\n  border-bottom: 1px solid #eee;\n}\n\n.markdown-body h3 {\n  font-size: 1.5em;\n  line-height: 1.43;\n}\n\n.markdown-body h4 {\n  font-size: 1.25em;\n}\n\n.markdown-body h5 {\n  font-size: 1em;\n}\n\n.markdown-body h6 {\n  font-size: 1em;\n  color: #777;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre,\n.markdown-body .admonition {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 4px;\n  padding: 0;\n  margin: 16px 0;\n  background-color: #e7e7e7;\n  border: 0 none;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: bold;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body blockquote {\n  padding: 0 15px;\n  color: #777;\n  border-left: 4px solid #ddd;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n  word-break: normal;\n  word-break: keep-all;\n}\n\n.markdown-body table th {\n  font-weight: bold;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #ddd;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #ccc;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f8f8f8;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.markdown-body code,\n.markdown-body samp {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(0,0,0,0.04);\n  border-radius: 3px;\n}\n\n.markdown-body code:before,\n.markdown-body code:after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .codehilite {\n  margin-bottom: 16px;\n}\n\n.markdown-body .codehilite pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f7f7f7;\n  border-radius: 3px;\n}\n\n.markdown-body .codehilite pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: initial;\n  padding: 0;\n  margin: 0;\n  overflow: initial;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code:before,\n.markdown-body pre code:after {\n  content: normal;\n}\n\n/* Admonition */\n.markdown-body .admonition {\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  position: relative;\n  border-radius: 3px;\n  border: 1px solid #e0e0e0;\n  border-left: 6px solid #333;\n  padding: 10px 10px 10px 30px;\n}\n\n.markdown-body .admonition table {\n  color: #333;\n}\n\n.markdown-body .admonition p {\n  padding: 0;\n}\n\n.markdown-body .admonition-title {\n  font-weight: bold;\n  margin: 0;\n}\n\n.markdown-body .admonition>.admonition-title {\n  color: #333;\n}\n\n.markdown-body .attention>.admonition-title {\n  color: #a6d796;\n}\n\n.markdown-body .caution>.admonition-title {\n  color: #d7a796;\n}\n\n.markdown-body .hint>.admonition-title {\n  color: #96c6d7;\n}\n\n.markdown-body .danger>.admonition-title {\n  color: #c25f77;\n}\n\n.markdown-body .question>.admonition-title {\n  color: #96a6d7;\n}\n\n.markdown-body .note>.admonition-title {\n  color: #d7c896;\n}\n\n.markdown-body .admonition:before,\n.markdown-body .attention:before,\n.markdown-body .caution:before,\n.markdown-body .hint:before,\n.markdown-body .danger:before,\n.markdown-body .question:before,\n.markdown-body .note:before {\n  font: normal normal 16px fontawesome-mini;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  line-height: 1.5;\n  color: #333;\n  position: absolute;\n  left: 0;\n  top: 0;\n  padding-top: 10px;\n  padding-left: 10px;\n}\n\n.markdown-body .admonition:before {\n  content: \"\\f056\\00a0\";\n  color: 333;\n}\n\n.markdown-body .attention:before {\n  content: \"\\f058\\00a0\";\n  color: #a6d796;\n}\n\n.markdown-body .caution:before {\n  content: \"\\f06a\\00a0\";\n  color: #d7a796;\n}\n\n.markdown-body .hint:before {\n  content: \"\\f05a\\00a0\";\n  color: #96c6d7;\n}\n\n.markdown-body .danger:before {\n  content: \"\\f057\\00a0\";\n  color: #c25f77;\n}\n\n.markdown-body .question:before {\n  content: \"\\f059\\00a0\";\n  color: #96a6d7;\n}\n\n.markdown-body .note:before {\n  content: \"\\f040\\00a0\";\n  color: #d7c896;\n}\n\n.markdown-body .admonition::after {\n  content: normal;\n}\n\n.markdown-body .attention {\n  border-left: 6px solid #a6d796;\n}\n\n.markdown-body .caution {\n  border-left: 6px solid #d7a796;\n}\n\n.markdown-body .hint {\n  border-left: 6px solid #96c6d7;\n}\n\n.markdown-body .danger {\n  border-left: 6px solid #c25f77;\n}\n\n.markdown-body .question {\n  border-left: 6px solid #96a6d7;\n}\n\n.markdown-body .note {\n  border-left: 6px solid #d7c896;\n}\n\n.markdown-body .admonition>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body .admonition>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n/* progress bar*/\n.markdown-body .progress {\n  display: block;\n  width: 300px;\n  margin: 10px 0;\n  height: 24px;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  background-color: #ededed;\n  position: relative;\n  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);\n}\n\n.markdown-body .progress-label {\n  position: absolute;\n  text-align: center;\n  font-weight: bold;\n  width: 100%; margin: 0;\n  line-height: 24px;\n  color: #333;\n  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;\n  -webkit-font-smoothing: antialiased !important;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.markdown-body .progress-bar {\n  height: 24px;\n  float: left;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  background-color: #96c6d7;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);\n  background-size: 30px 30px;\n  background-image: -webkit-linear-gradient(\n    135deg, rgba(255, 255, 255, .4) 27%,\n    transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%,\n    transparent 77%, transparent\n  );\n  background-image: -moz-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: -ms-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: -o-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n}\n\n.markdown-body .progress-100plus .progress-bar {\n  background-color: #a6d796;\n}\n\n.markdown-body .progress-80plus .progress-bar {\n  background-color: #c6d796;\n}\n\n.markdown-body .progress-60plus .progress-bar {\n  background-color: #d7c896;\n}\n\n.markdown-body .progress-40plus .progress-bar {\n  background-color: #d7a796;\n}\n\n.markdown-body .progress-20plus .progress-bar {\n  background-color: #d796a6;\n}\n\n.markdown-body .progress-0plus .progress-bar {\n  background-color: #c25f77;\n}\n\n.markdown-body .candystripe-animate .progress-bar{\n  -webkit-animation: animate-stripes 3s linear infinite;\n  -moz-animation: animate-stripes 3s linear infinite;\n  animation: animate-stripes 3s linear infinite;\n}\n\n@-webkit-keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n@-moz-keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n@keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n.markdown-body .gloss .progress-bar {\n  box-shadow:\n    inset 0 4px 12px rgba(255, 255, 255, .7),\n    inset 0 -12px 0 rgba(0, 0, 0, .05);\n}\n\n/* Multimarkdown Critic Blocks */\n.markdown-body .critic_mark {\n  background: #ff0;\n}\n\n.markdown-body .critic_delete {\n  color: #c82829;\n  text-decoration: line-through;\n}\n\n.markdown-body .critic_insert {\n  color: #718c00 ;\n  text-decoration: underline;\n}\n\n.markdown-body .critic_comment {\n  color: #8e908c;\n  font-style: italic;\n}\n\n.markdown-body .headeranchor {\n  font: normal normal 16px octicons-anchor;\n  line-height: 1;\n  display: inline-block;\n  text-decoration: none;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.headeranchor:before {\n  content: '\\f05c';\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 4px 0.25em -20px;\n  vertical-align: middle;\n}\n\n/* Media */\n@media only screen and (min-width: 480px) {\n  .markdown-body {\n    font-size:14px;\n  }\n}\n\n@media only screen and (min-width: 768px) {\n  .markdown-body {\n    font-size:16px;\n  }\n}\n\n@media print {\n  .markdown-body * {\n    background: transparent !important;\n    color: black !important;\n    filter:none !important;\n    -ms-filter: none !important;\n  }\n\n  .markdown-body {\n    font-size:12pt;\n    max-width:100%;\n    outline:none;\n    border: 0;\n  }\n\n  .markdown-body a,\n  .markdown-body a:visited {\n    text-decoration: underline;\n  }\n\n  .markdown-body .headeranchor-link {\n    display: none;\n  }\n\n  .markdown-body a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n\n  .markdown-body abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n\n  .markdown-body .ir a:after,\n  .markdown-body a[href^=\"javascript:\"]:after,\n  .markdown-body a[href^=\"#\"]:after {\n    content: \"\";\n  }\n\n  .markdown-body pre {\n    white-space: pre;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n  }\n\n  .markdown-body pre,\n  .markdown-body blockquote {\n    border: 1px solid #999;\n    padding-right: 1em;\n    page-break-inside: avoid;\n  }\n\n  .markdown-body .progress,\n  .markdown-body .progress-bar {\n    -moz-box-shadow: none;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n  }\n\n  .markdown-body .progress {\n    border: 1px solid #ddd;\n  }\n\n  .markdown-body .progress-bar {\n    height: 22px;\n    border-right: 1px solid #ddd;\n  }\n\n  .markdown-body tr,\n  .markdown-body img {\n    page-break-inside: avoid;\n  }\n\n  .markdown-body img {\n    max-width: 100% !important;\n  }\n\n  .markdown-body p,\n  .markdown-body h2,\n  .markdown-body h3 {\n    orphans: 3;\n    widows: 3;\n  }\n\n  .markdown-body h2,\n  .markdown-body h3 {\n    page-break-after: avoid;\n  }\n}\n</style><title>react -start</title></head><body><article class=\"markdown-body\"><p>React -start</p>\n<h2 id=\"react\"><a name=\"user-content-react\" href=\"#react\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React</h2>\n<ul>\n<li>Facebook</li>\n<li>MVC中的V：M -&gt; V</li>\n<li>和Flux搭配，可以做到MVVM</li>\n<li>默认转义所有字符串，防止XSS攻击</li>\n<li>React认为HTML标签及生成这些标签的代码间存在着内在联系，React设计允许你在构建标签结构时充分利用JS的强大能力，而不必在笨拙的模板语言上浪费时间</li>\n</ul>\n<h2 id=\"why-react\"><a name=\"user-content-why-react\" href=\"#why-react\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Why React?</h2>\n<ul>\n<li>简单：<br />\n  model改变后，react自动处理用户界面的更新；</li>\n<li>声明式：<br />\n  更新界面时，react仅仅会更新变化的部分；</li>\n<li>虚拟Dom<br />\n  React在内存中维护一个快速响应的DOM描述，并利用他来快速地计算出差异，然后更新浏览器中的DOM;</li>\n</ul>\n<h2 id=\"react_1\"><a name=\"user-content-react_1\" href=\"#react_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React 最需要走心的工作</h2>\n<ul>\n<li>构建可组合的、可复用的组件;</li>\n<li>组件的好处：代码复用、测试更加点多;</li>\n</ul>\n<h2 id=\"react-hello-world\"><a name=\"user-content-react-hello-world\" href=\"#react-hello-world\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - hello world</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"./react.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n        &lt;script type=\"text/javascript\"&gt;\n            function h1 (text, style) {\n                return '&lt;h1&gt;'' + text + '&lt;/h1&gt;';\n            }\n            var el = React.createElement('h1', {style: {color: '##00f'}}, 'Hello World!');\n            React.render(el, document.getElementById('app'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"react-\"><a name=\"user-content-react-\" href=\"#react-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 类似的工作</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n        &lt;script type=\"text/javascript\"&gt;\n              function h1 (text, style) {\n                var result;\n                var styleStr;\n\n                if (style) {\n                    styleStr = 'style=\"';\n                    for (var name in style) {\n                        styleStr += name + ':' + style[name] + ';'; \n                    }\n                    styleStr += '\"';\n                }\n\n                if (styleStr) {\n                    result = '&lt;h1 ' + styleStr + '&gt;' + text + '&lt;/h1&gt;';\n                } else {\n                    result = '&lt;h1&gt;' + text + '&lt;/h1&gt;';\n                }\n\n                  return result;\n              }\n\n              function render(target, container) {\n                container.innerHTML = target;\n              }\n\n              render(h1('Hello World!', {color: '##00f'}), document.getElementById('app'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"jsx-javascript-xml\"><a name=\"user-content-jsx-javascript-xml\" href=\"#jsx-javascript-xml\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX - Javascript XML</h2>\n<p>优势：<br />\n- 类HTML标记语言，都是熟悉的语法<br />\n- 抽象了React Element的创建过程<br />\n- 简单直观，可以提升效率且成本很低<br />\n劣势：<br />\n- 在浏览器运行会很慢，项目中需要预处理</p>\n<h2 id=\"jsx-hello-world\"><a name=\"user-content-jsx-hello-world\" href=\"#jsx-hello-world\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX - hello world</h2>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"./react.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"./JSXTransformer.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n\n        &lt;script type=\"text/jsx\"&gt;\n            React.render(&lt;h1&gt;Hello World, JSX!&lt;/h1&gt;, document.getElementById('app'));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"jsx-\"><a name=\"user-content-jsx-\" href=\"#jsx-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX - 工作原理</h2>\n<ol>\n<li>使用JSXTransformer通过监听windows的onload/DOMContentLoaded，来遍历所有&rdquo;text/jsx&rdquo;脚本标签</li>\n<li>获取每个标签的source code并把JSX代码转为react的虚拟dom代码</li>\n<li>最后把react代码添加到新建的script标签中</li>\n<li>预编译的插件是同理，只不过发生在编译阶段</li>\n</ol>\n<h2 id=\"jsx-tips\"><a name=\"user-content-jsx-tips\" href=\"#jsx-tips\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>JSX Tips</h2>\n<ul>\n<li>JSX设置动态属性时，用花括号包裹Javascript变量</li>\n<li>也可以把属性设置为一个函数的调用返回结果</li>\n<li>条件判断支持：三元运输符、&amp;&amp;、||</li>\n<li>key: 列表时会建议使用，重用组件提升渲染性能</li>\n<li>refs：获取创建dom的描述对象 or 获取创建dom的对象, this.refs.usernameInput.getDOMNode() x</li>\n<li>HTML关键词：for &gt; htmlFor, class &gt; className, style: {}</li>\n<li>事件统一使用驼峰式</li>\n</ul>\n<h2 id=\"react-tips\"><a name=\"user-content-react-tips\" href=\"#react-tips\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React Tips</h2>\n<ul>\n<li>React创建的class名称首字母必须大写，不然找不到</li>\n<li>JSX可以不换行，换行时必须使用（）包装，不然会报非法组件错误；</li>\n<li>只能有根一个节点，多个节点会抛错</li>\n<li>内联样式支持对象，名称使用驼峰式，否则不起作用，fontSize</li>\n<li>返回：null、false、React组件</li>\n</ul>\n<h2 id=\"_1\"><a name=\"user-content-_1\" href=\"#_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>组件的复合</h2>\n<ul>\n<li>复用那些接口定义良好的组件来开发新的模块化组件</li>\n<li>this.props.children X</li>\n<li>组件支持 ref=&rdquo;refId&rdquo;  this.refs.refId</li>\n</ul>\n<h2 id=\"react-_1\"><a name=\"user-content-react-_1\" href=\"#react-_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 组件数据流</h2>\n<ul>\n<li>props</li>\n<li>state</li>\n</ul>\n<h2 id=\"react-dom\"><a name=\"user-content-react-dom\" href=\"#react-dom\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - dom对象</h2>\n<ul>\n<li>refs</li>\n</ul>\n<h2 id=\"react-_2\"><a name=\"user-content-react-_2\" href=\"#react-_2\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 组件生命周期</h2>\n<h3 id=\"_2\"><a name=\"user-content-_2\" href=\"#_2\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>组件类创建时</h3>\n<ul>\n<li>getDefaultProps</li>\n</ul>\n<h3 id=\"_3\"><a name=\"user-content-_3\" href=\"#_3\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>初始化</h3>\n<ul>\n<li>getinitialState</li>\n</ul>\n<h3 id=\"_4\"><a name=\"user-content-_4\" href=\"#_4\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>挂载</h3>\n<ul>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>\n<h3 id=\"_5\"><a name=\"user-content-_5\" href=\"#_5\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>更新</h3>\n<ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h3 id=\"_6\"><a name=\"user-content-_6\" href=\"#_6\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>卸载</h3>\n<ul>\n<li>componentWillUnmount</li>\n</ul>\n<h3 id=\"_7\"><a name=\"user-content-_7\" href=\"#_7\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>生命周期</h3>\n<ul>\n<li>Class Create Pahses:<ul>\n<li>invoke while class created and be shared between instances.</li>\n</ul>\n</li>\n<li>Initialization Pahses:<ul>\n<li>constructor: Initialization of state. The instance is now retained.</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>[children&rsquo;s constructors]<ul>\n<li>[children&rsquo;s componentWillMount and render]</li>\n<li>[children&rsquo;s componentDidMount]</li>\n</ul>\n</li>\n<li>componentDidMount</li>\n</ul>\n</li>\n<li>Update Phases:<ul>\n<li>componentWillReceiveProps (only called if parent updated)</li>\n<li>shouldComponentUpdate (default: always returns true to prevent subtle bugs)<ul>\n<li>componentWillUpdate</li>\n<li>render<ul>\n<li>[children&rsquo;s constructors or receive props phases]</li>\n</ul>\n</li>\n<li>componentDidUpdate</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Unmount Phases:<ul>\n<li>componentWillUnmount<ul>\n<li>[children&rsquo;s componentWillUnmount]</li>\n<li>[children destroyed]</li>\n</ul>\n</li>\n<li>(destroyed): The instance is now blank, released by React and ready for GC</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"mixin\"><a name=\"user-content-mixin\" href=\"#mixin\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Mixin</h2>\n<ul>\n<li>独立于组件的</li>\n<li>多个组件可共享的</li>\n<li>对象类型的配置</li>\n</ul>\n<h2 id=\"mixin-demo\"><a name=\"user-content-mixin-demo\" href=\"#mixin-demo\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Mixin - DEMO</h2>\n<pre><code>var userMixin = {\n    getDefaultProps: function () {\n        return {\n            username: '小红'\n        };\n    },\n    renderUser: function (welcomeMsg) {\n        return (\n                &lt;div className=\"user-wrap\"&gt;\n                    &lt;span ref=\"welcomeDesc\" className=\"welcome-user\"&gt;{welcomeMsg}&lt;/span&gt;\n                &lt;/div&gt;\n            );\n    },\n    componentDidMount: function () {\n        console.log('mount');\n    }\n}\n\n\nvar Header = React.createClass({\n    mixins: [userMixin],\n    getInitialState: function () {\n        return {\n            systemName: 'React平台Header'\n        };\n    },\n    render: function () {\n        var welcomeMsg;\n        if (this.props.username) {\n            welcomeMsg = '欢迎，' + this.props.username + '！'\n        };\n        return (\n                &lt;div className=\"header-content\"&gt;\n                    &lt;h1&gt;{this.state.systemName}&lt;/h1&gt;\n                    {\n                        welcomeMsg ? this.renderUser(welcomeMsg) : null\n                    }\n                &lt;/div&gt;\n            );\n    }\n});\n</code></pre>\n<h2 id=\"react-purerendermixin\"><a name=\"user-content-react-purerendermixin\" href=\"#react-purerendermixin\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - PureRenderMixin</h2>\n<ul>\n<li>React组件的渲染函数是“纯粹的” - 同样的props和state，渲染出同样的效果</li>\n<li>可以提升性能 - 在shouldComponentUpdate里检查props、state是否会发生变化</li>\n<li>shouldComponentUpdate的判断结果会影响整个组件子树</li>\n<li>据说props、state比较是浅比较，不适合(特别)复杂的数据结构 x</li>\n</ul>\n<h2 id=\"purerendermixin-shouldcomponentupdate-shallow-check\"><a name=\"user-content-purerendermixin-shouldcomponentupdate-shallow-check\" href=\"#purerendermixin-shouldcomponentupdate-shallow-check\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>PureRenderMixin - shouldComponentUpdate: shallow check</h2>\n<pre><code>/**\n - Performs equality by iterating through keys on an object and returning false\n - when any key has values which are not strictly equal between the arguments.\n - Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  var bHasOwnProperty = hasOwnProperty.bind(objB);\n  for (var i = 0; i &lt; keysA.length; i++) {\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n</code></pre>\n<h3 id=\"react-mixin\"><a name=\"user-content-react-mixin\" href=\"#react-mixin\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - Mixin原理</h3>\n<ul>\n<li>Mixin必须是一个对象</li>\n<li>在React.createClass（源码：ReactClass &gt; createClass: function (spec) {&hellip;}会把Mixin对象融入react对象</li>\n<li>融入过程是通过遍历Mixin的属性（for..in）逐个添加到react对象得prototype上（mixSpecIntoComponent）</li>\n<li>添加之前需要判断是否已经有了相同属性，且此属性是否支持覆盖、是否支持多个、是否需要合并</li>\n<li>添加的方式是：覆盖（override）、合并、多个函数链</li>\n</ul>\n<h3 id=\"react-mixin_1\"><a name=\"user-content-react-mixin_1\" href=\"#react-mixin_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - Mixin融合方式的标准</h3>\n<ul>\n<li>一些基础的属性是不允许覆盖的，比如：setProps、replaceProps、replaceState、isMounted</li>\n<li>渲染的属性是不允许定义多次的，比如：render、shouldComponentUpdate</li>\n<li>需要合并的是那些有返回值的，比如：getDefaultProps、getInitialState</li>\n<li>其他的都支持多个函数链的形式（先执行已有的，在执行Mixin的），比如：willMount、didMount、willUpdate、didUpdate等等</li>\n</ul>\n<h2 id=\"react-_3\"><a name=\"user-content-react-_3\" href=\"#react-_3\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 表单组件</h2>\n<h3 id=\"_8\"><a name=\"user-content-_8\" href=\"#_8\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>受用户交互影响的属性</h3>\n<ul>\n<li>value，用于 input、textarea 组件</li>\n<li>checked，用于类型为 checkbox 或者 radio 的 input 组件</li>\n<li>selected，用于 option 组件</li>\n</ul>\n<h3 id=\"onchange\"><a name=\"user-content-onchange\" href=\"#onchange\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>onChange 回调函数来监听组件变化</h3>\n<ul>\n<li>input 或 textarea 的 value 发生变化时。</li>\n<li>input 的 checked 状态改变时。</li>\n<li>option 的 selected 状态改变时。</li>\n</ul>\n<h3 id=\"controlled-components-\"><a name=\"user-content-controlled-components-\" href=\"#controlled-components-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Controlled Components - 受限组件</h3>\n<ul>\n<li>设置了 value 的 input 是一个受限组件</li>\n</ul>\n<h3 id=\"-demo\"><a name=\"user-content--demo\" href=\"#-demo\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>受限组件 - DEMO</h3>\n<pre><code>var App = React.createClass({\n    getInitialState: function () {\n        return {\n            phone: '15821466666'\n        };\n    },\n    render: function () {\n        return (\n                &lt;div&gt;\n                    &lt;label htmlFor=\"phone\"&gt;手机号：&lt;/label&gt;\n                    &lt;input type='text' id=\"phone\" value={this.state.phone} onChange={this.phoneChangeHlr} /&gt;\n                &lt;/div&gt;\n            );\n    },\n    phoneChangeHlr: function (event) {\n        this.setState({phone: event.target.value});\n    }\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('app'));\n</code></pre>\n<h2 id=\"react-add-ons\"><a name=\"user-content-react-add-ons\" href=\"#react-add-ons\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - add-ons</h2>\n<ul>\n<li>TransitionGroup和CSSTransitionGroup</li>\n<li>LinkedStateMixin - 用于简化用户表单输入数据和组件 state 之间的双向数据绑定</li>\n<li>classSet，用于更加干净简洁地操作 DOM 中的 class 字符串</li>\n<li>cloneWithProps，用于实现 React 组件浅复制，同时改变它们的 props </li>\n<li>update，一个辅助方法，使得在 JavaScript 中处理不可变数据更加容易</li>\n<li>PureRenderMixin，在某些场景下的性能检测器</li>\n</ul>\n<h2 id=\"linkedstatemixin-demo\"><a name=\"user-content-linkedstatemixin-demo\" href=\"#linkedstatemixin-demo\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>LinkedStateMixin - DEMO</h2>\n<pre><code>var LinkedStateMixin = React.addons.LinkedStateMixin;\nvar App = React.createClass({\n    mixins: [LinkedStateMixin],\n    getInitialState: function () {\n        return {\n            phone: '15821466666'\n        };\n    },\n    render: function () {\n        return (\n                &lt;div&gt;\n                    &lt;label htmlFor=\"phone\"&gt;手机号：&lt;/label&gt;\n                    &lt;input type='text' id=\"phone\" valueLink={this.linkState('phone')}  /&gt;\n                &lt;/div&gt;\n            );\n    }\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('app'));\n</code></pre>\n<h2 id=\"webpack\"><a name=\"user-content-webpack\" href=\"#webpack\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>开发工具webpack</h2>\n<h3 id=\"webpack-react-install\"><a name=\"user-content-webpack-react-install\" href=\"#webpack-react-install\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>webpack + react install</h3>\n<ul>\n<li>npm init</li>\n<li>npm install &ndash;save react react</li>\n<li>npm install &ndash;save-dev webpack webpack-dev-server</li>\n<li>npm install &ndash;save-dev jsx-loader css-loader file-loader style-loader url-loader</li>\n</ul>\n<h3 id=\"configuring-webpack\"><a name=\"user-content-configuring-webpack\" href=\"#configuring-webpack\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Configuring webpack</h3>\n<pre><code>var webpack = require('webpack');\n\nmodule.exports = {\n    // 它定义了打包的入口文件，数组中的文件会按顺序进行，并且它会自行解决依赖问题。\n    entry: {\n        main: './pages/main.js',\n    },\n    // 它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径\n    output: {\n        path: __dirname + '/build',\n        publicPath: '/build/',\n        filename: '[name].js'\n    },\n    // Webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。\n    // resolve属性中的extensions数组中用于配置程序可以自行补全哪些后缀。\n    // 比如 Hello.jsx 这样的文件就可以直接用 require(./Hello) 引用。\n    resolve: {\n        extensions: ['', '.js', '.jsx']\n    },\n    // webpack将所有的资源都看做是模块，而模块就需要加载器\n    module: {\n        loaders: [\n            // loaders 指定 jsx-loader 编译后缀名为 .jsx 的文件，\n            // 建议给含有 JSX 的文件添加 .jsx 后缀，\n            // 当然你也可以直接使用 .js 后缀， 相应的 test 配置正则要修改匹配就是。\n            { test: /\\.js?$/, exclude: /node_modules/, loader: 'jsx?harmony' }, \n            { test: /\\.(css)/, loader: 'style-loader!css-loader' },\n            // inline base64 URLs for &lt;=8k images, direct URLs for the rest\n            {test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192' } \n            // loaders: ['react-hot', 'jsx?harmony']\n            // loaders后面如果跟的不是数组，则会报错：LoadersList.js:81 r.forEach(function(r) \n        ]\n    },\n    // 我们可以在plugin参数中配置我们需要用到的各种各样的插件。\n    plugins: [\n        new webpack.NoErrorsPlugin(),\n    ]\n}\n</code></pre>\n<h3 id=\"webpack_1\"><a name=\"user-content-webpack_1\" href=\"#webpack_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Webpack 命令</h3>\n<p>启动webpack命令<br />\n- webpack -d 提供SourceMaps，方便调试<br />\n- webpack -w 提供watch方法，实时进行打包更新<br />\n- webpack &ndash;colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤<br />\n- webpack &ndash;progress 输出的接口带进度<br />\n- webpack &ndash;profile 输出性能数据，可以看到每一步的耗时<br />\n- webpack -p 对打包后的文件进行压缩<br />\n- webpack &ndash;config <filename> 支持指定实用的配置文件，处理release和debug不同的情况</p>\n<h3 id=\"scripts\"><a name=\"user-content-scripts\" href=\"#scripts\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>配置scripts</h3>\n<pre><code>\"scripts\": {\n    \"locDev\": \"webpack -d -w --progress --colors\",\n    \"serDev\": \"webpack-dev-server --progress --colors --port 8082\"\n}\n</code></pre>\n<h3 id=\"_9\"><a name=\"user-content-_9\" href=\"#_9\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>运行</h3>\n<ul>\n<li>npm run locDev</li>\n<li>npm run serDev</li>\n</ul>\n<h3 id=\"react-_4\"><a name=\"user-content-react-_4\" href=\"#react-_4\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 热插拔</h3>\n<ul>\n<li>npm install &ndash;save-dev react-hot-loader</li>\n<li>webpack.config.js: entry 使用数组，并添加 &lsquo;webpack/hot/only-dev-server&rsquo;</li>\n<li>webpack.config.js: loaders: [&lsquo;react-hot&rsquo;, &lsquo;jsx?harmony&rsquo;]</li>\n<li>入口文件添加 module.hot.accept()</li>\n<li>启动：webpack-dev-server -d &ndash;port 8082 &ndash;hot &ndash;progress &ndash;colors</li>\n</ul>\n<h3 id=\"react-_5\"><a name=\"user-content-react-_5\" href=\"#react-_5\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - 热拔插多个入口</h3>\n<ul>\n<li>webpack.config.js: entry:<br />\n    entry: {<br />\n        main: [&lsquo;./pages/main/index.js&rsquo;, &lsquo;webpack/hot/only-dev-server&rsquo;],<br />\n        help: [&lsquo;./pages/help/index.js&rsquo;, &lsquo;webpack/hot/only-dev-server&rsquo;]<br />\n    }</li>\n</ul>\n<h2 id=\"react-render\"><a name=\"user-content-react-render\" href=\"#react-render\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - render时机</h2>\n<h3 id=\"-\"><a name=\"user-content--\" href=\"#-\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>批量更新 - 事件回调函数</h3>\n<ul>\n<li>事件处理函数中的多次setState/replaceState会被标记为一次批量更新</li>\n<li>事件处理函数本身在React事件机制中是作为一个回调函数被调用，在函数执行完成后才会触发render</li>\n</ul>\n<h3 id=\"-_1\"><a name=\"user-content--_1\" href=\"#-_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>实时更新 - 其他</h3>\n<ul>\n<li>调用setState/replaceState后直接触发render，比如setInterval</li>\n</ul>\n<h3 id=\"render\"><a name=\"user-content-render\" href=\"#render\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>render流程</h3>\n<ul>\n<li>setState/replaceState 修改状态后</li>\n<li>组件添加等待更新的状态列表，并把新的状态压入列表（ReactUpdateQueue.js: enqueueSetState()）</li>\n<li>标记组件为需要重新渲染的组件（dirty components list）ReactUpdates：enqueueUpdate()</li>\n<li>runBatchedUpdates来处理dirty components（调用对应的render）</li>\n</ul>\n<h2 id=\"react-react\"><a name=\"user-content-react-react\" href=\"#react-react\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>React - React事件系统</h2>\n<ol>\n<li>React初始化时会把事件监听 ReactEventListener 注入到 ReactBrowserEventEmitter</li>\n<li>ReactBrowserEventEmitter 是浏览器事件的顶级委托，ReactEventListener 为用户绑定事件的DOM绑定自己的处理函数，并在处理函数中调用用户的事件处理函数，然后理render相关逻辑；</li>\n<li>React 事件系统：<ul>\n<li>浏览器事件的顶级委托（top-level delegation）用来 trap (捕获？) 大多数原生浏览器事件，可以注入事件处理器；</li>\n<li>主线程唯一的工作是注入的 ReactEventListener（是为可插拔事件源准备的事件监听器）；</li>\n<li>转发这些被 trap 原生浏览器事件至 EventPluginHub， EventPluginHub 在提取任何组合事件时会调用对应插件（比如 SimpleEventPlugin ）并返回需要处理的事件列表；</li>\n<li>事件插件包括：ResponderEventPlugin、SimpleEventPlugin、TapEventPlugin、EnterLeaveEventPlugin、ChangeEventPlugin、SelectEventPlugin、BeforeInputEventPlugin</li>\n<li>EventPluginHub 同时会维护Dom、事件名称和事件处理器的Mapping；</li>\n<li>ReactEventListener 监听 EventPluginHub 的事件，并处理事件派发及事件响应</li>\n<li>ReactEventListener 的事件响应函数会处理用户的事件处理函数</li>\n</ul>\n</li>\n<li>React组件及组件树的渲染都是在ReactMount里面执行</li>\n<li>mount组件时，初始化组件并注册事件监听（mountComponent）</li>\n<li>事件响应由ReactEventListener的dispatchEvent触发，通过EventPluginHub找到事件处理相关 </li>\n<li>我们的事件函数作为回调处理</li>\n</ol></article></body></html>"},{"title":"react -start","date":"2016-03-28T06:31:16.000Z","_content":"React -start\n\n##React\n- Facebook\n- MVC中的V：M -> V\n- 和Flux搭配，可以做到MVVM\n- 默认转义所有字符串，防止XSS攻击\n- React认为HTML标签及生成这些标签的代码间存在着内在联系，React设计允许你在构建标签结构时充分利用JS的强大能力，而不必在笨拙的模板语言上浪费时间\n\n##Why React?\n- 简单：\n  model改变后，react自动处理用户界面的更新；\n- 声明式：\n  更新界面时，react仅仅会更新变化的部分；\n- 虚拟Dom\n  React在内存中维护一个快速响应的DOM描述，并利用他来快速地计算出差异，然后更新浏览器中的DOM;\n\n##React 最需要走心的工作\n- 构建可组合的、可复用的组件;\n- 组件的好处：代码复用、测试更加点多;\n\n##React - hello world\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>React Hello World</title>\n            <script type=\"text/javascript\" src=\"./react.js\"></script>\n        </head>\n        <body>\n            <div id=\"app\"></div>\n\n            <script type=\"text/javascript\">\n                function h1 (text, style) {\n                    return '<h1>'' + text + '</h1>';\n                }\n                var el = React.createElement('h1', {style: {color: '##00f'}}, 'Hello World!');\n                React.render(el, document.getElementById('app'));\n            </script>\n        </body>\n    </html>\n\n\n##React - 类似的工作\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>React Hello World</title>\n        </head>\n        <body>\n            <div id=\"app\"></div>\n\n            <script type=\"text/javascript\">\n                  function h1 (text, style) {\n                    var result;\n                    var styleStr;\n\n                    if (style) {\n                        styleStr = 'style=\"';\n                        for (var name in style) {\n                            styleStr += name + ':' + style[name] + ';'; \n                        }\n                        styleStr += '\"';\n                    }\n\n                    if (styleStr) {\n                        result = '<h1 ' + styleStr + '>' + text + '</h1>';\n                    } else {\n                        result = '<h1>' + text + '</h1>';\n                    }\n\n                      return result;\n                  }\n\n                  function render(target, container) {\n                    container.innerHTML = target;\n                  }\n\n                  render(h1('Hello World!', {color: '##00f'}), document.getElementById('app'));\n            </script>\n        </body>\n    </html>\n\n##JSX - Javascript XML\n优势：\n- 类HTML标记语言，都是熟悉的语法\n- 抽象了React Element的创建过程\n- 简单直观，可以提升效率且成本很低\n劣势：\n- 在浏览器运行会很慢，项目中需要预处理\n\n##JSX - hello world\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>React Hello World</title>\n            <script type=\"text/javascript\" src=\"./react.js\"></script>\n            <script type=\"text/javascript\" src=\"./JSXTransformer.js\"></script>\n        </head>\n        <body>\n            <div id=\"app\"></div>\n\n            <script type=\"text/jsx\">\n                React.render(<h1>Hello World, JSX!</h1>, document.getElementById('app'));\n            </script>\n        </body>\n    </html>\n\n##JSX - 工作原理\n1. 使用JSXTransformer通过监听windows的onload/DOMContentLoaded，来遍历所有\"text/jsx\"脚本标签\n2. 获取每个标签的source code并把JSX代码转为react的虚拟dom代码\n3. 最后把react代码添加到新建的script标签中\n4. 预编译的插件是同理，只不过发生在编译阶段\n\n##JSX Tips\n- JSX设置动态属性时，用花括号包裹Javascript变量\n- 也可以把属性设置为一个函数的调用返回结果\n- 条件判断支持：三元运输符、&&、||\n- key: 列表时会建议使用，重用组件提升渲染性能\n- refs：获取创建dom的描述对象 or 获取创建dom的对象, this.refs.usernameInput.getDOMNode() x\n- HTML关键词：for > htmlFor, class > className, style: {}\n- 事件统一使用驼峰式\n\n##React Tips\n- React创建的class名称首字母必须大写，不然找不到\n- JSX可以不换行，换行时必须使用（）包装，不然会报非法组件错误；\n- 只能有根一个节点，多个节点会抛错\n- 内联样式支持对象，名称使用驼峰式，否则不起作用，fontSize\n- 返回：null、false、React组件\n\n##组件的复合\n- 复用那些接口定义良好的组件来开发新的模块化组件\n- this.props.children X\n- 组件支持 ref=\"refId\"  this.refs.refId\n\n##React - 组件数据流\n- props\n- state\n\n##React - dom对象\n- refs\n\n##React - 组件生命周期\n\n###组件类创建时\n- getDefaultProps\n\n###初始化\n- getinitialState\n\n###挂载\n- componentWillMount\n- render\n- componentDidMount\n\n###更新\n- componentWillReceiveProps\n- shouldComponentUpdate\n- componentWillUpdate\n- render\n- componentDidUpdate\n\n###卸载\n- componentWillUnmount\n\n###生命周期\n- Class Create Pahses:\n    + invoke while class created and be shared between instances.\n- Initialization Pahses:\n    + constructor: Initialization of state. The instance is now retained.\n    + componentWillMount\n    + render\n    + [children's constructors]\n        - [children's componentWillMount and render]\n        - [children's componentDidMount]\n    + componentDidMount\n- Update Phases:\n    + componentWillReceiveProps (only called if parent updated)\n    + shouldComponentUpdate (default: always returns true to prevent subtle bugs)\n        - componentWillUpdate\n        - render\n            + [children's constructors or receive props phases]\n        - componentDidUpdate\n- Unmount Phases:\n    + componentWillUnmount\n        - [children's componentWillUnmount]\n        - [children destroyed]\n    + (destroyed): The instance is now blank, released by React and ready for GC\n\n##Mixin\n- 独立于组件的\n- 多个组件可共享的\n- 对象类型的配置\n\n##Mixin - DEMO\n    var userMixin = {\n        getDefaultProps: function () {\n            return {\n                username: '小红'\n            };\n        },\n        renderUser: function (welcomeMsg) {\n            return (\n                    <div className=\"user-wrap\">\n                        <span ref=\"welcomeDesc\" className=\"welcome-user\">{welcomeMsg}</span>\n                    </div>\n                );\n        },\n        componentDidMount: function () {\n            console.log('mount');\n        }\n    }\n\n\n    var Header = React.createClass({\n        mixins: [userMixin],\n        getInitialState: function () {\n            return {\n                systemName: 'React平台Header'\n            };\n        },\n        render: function () {\n            var welcomeMsg;\n            if (this.props.username) {\n                welcomeMsg = '欢迎，' + this.props.username + '！'\n            };\n            return (\n                    <div className=\"header-content\">\n                        <h1>{this.state.systemName}</h1>\n                        {\n                            welcomeMsg ? this.renderUser(welcomeMsg) : null\n                        }\n                    </div>\n                );\n        }\n    });\n\n##React - PureRenderMixin\n- React组件的渲染函数是“纯粹的” - 同样的props和state，渲染出同样的效果\n- 可以提升性能 - 在shouldComponentUpdate里检查props、state是否会发生变化\n- shouldComponentUpdate的判断结果会影响整个组件子树\n- 据说props、state比较是浅比较，不适合(特别)复杂的数据结构 x\n\n##PureRenderMixin - shouldComponentUpdate: shallow check\n    /**\n     - Performs equality by iterating through keys on an object and returning false\n     - when any key has values which are not strictly equal between the arguments.\n     - Returns true when the values of all keys are strictly equal.\n     */\n    function shallowEqual(objA, objB) {\n      if (objA === objB) {\n        return true;\n      }\n\n      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n        return false;\n      }\n\n      var keysA = Object.keys(objA);\n      var keysB = Object.keys(objB);\n\n      if (keysA.length !== keysB.length) {\n        return false;\n      }\n\n      // Test for A's keys different from B.\n      var bHasOwnProperty = hasOwnProperty.bind(objB);\n      for (var i = 0; i < keysA.length; i++) {\n        if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n###React - Mixin原理\n- Mixin必须是一个对象\n- 在React.createClass（源码：ReactClass > createClass: function (spec) {...}会把Mixin对象融入react对象\n- 融入过程是通过遍历Mixin的属性（for..in）逐个添加到react对象得prototype上（mixSpecIntoComponent）\n- 添加之前需要判断是否已经有了相同属性，且此属性是否支持覆盖、是否支持多个、是否需要合并\n- 添加的方式是：覆盖（override）、合并、多个函数链\n\n###React - Mixin融合方式的标准\n- 一些基础的属性是不允许覆盖的，比如：setProps、replaceProps、replaceState、isMounted\n- 渲染的属性是不允许定义多次的，比如：render、shouldComponentUpdate\n- 需要合并的是那些有返回值的，比如：getDefaultProps、getInitialState\n- 其他的都支持多个函数链的形式（先执行已有的，在执行Mixin的），比如：willMount、didMount、willUpdate、didUpdate等等\n\n##React - 表单组件\n\n###受用户交互影响的属性\n- value，用于 input、textarea 组件\n- checked，用于类型为 checkbox 或者 radio 的 input 组件\n- selected，用于 option 组件\n\n###onChange 回调函数来监听组件变化\n- input 或 textarea 的 value 发生变化时。\n- input 的 checked 状态改变时。\n- option 的 selected 状态改变时。\n\n###Controlled Components - 受限组件\n- 设置了 value 的 input 是一个受限组件\n\n###受限组件 - DEMO\n    var App = React.createClass({\n        getInitialState: function () {\n            return {\n                phone: '15821466666'\n            };\n        },\n        render: function () {\n            return (\n                    <div>\n                        <label htmlFor=\"phone\">手机号：</label>\n                        <input type='text' id=\"phone\" value={this.state.phone} onChange={this.phoneChangeHlr} />\n                    </div>\n                );\n        },\n        phoneChangeHlr: function (event) {\n            this.setState({phone: event.target.value});\n        }\n    });\n\n    ReactDOM.render(<App />, document.getElementById('app'));\n\n##React - add-ons\n- TransitionGroup和CSSTransitionGroup\n- LinkedStateMixin - 用于简化用户表单输入数据和组件 state 之间的双向数据绑定\n- classSet，用于更加干净简洁地操作 DOM 中的 class 字符串\n- cloneWithProps，用于实现 React 组件浅复制，同时改变它们的 props \n- update，一个辅助方法，使得在 JavaScript 中处理不可变数据更加容易\n- PureRenderMixin，在某些场景下的性能检测器\n\n##LinkedStateMixin - DEMO\n    var LinkedStateMixin = React.addons.LinkedStateMixin;\n    var App = React.createClass({\n        mixins: [LinkedStateMixin],\n        getInitialState: function () {\n            return {\n                phone: '15821466666'\n            };\n        },\n        render: function () {\n            return (\n                    <div>\n                        <label htmlFor=\"phone\">手机号：</label>\n                        <input type='text' id=\"phone\" valueLink={this.linkState('phone')}  />\n                    </div>\n                );\n        }\n    });\n\n    ReactDOM.render(<App />, document.getElementById('app'));\n\n\n##开发工具webpack\n\n###webpack + react install\n- npm init\n- npm install --save react react\n- npm install --save-dev webpack webpack-dev-server\n- npm install --save-dev jsx-loader css-loader file-loader style-loader url-loader\n\n###Configuring webpack\n    var webpack = require('webpack');\n\n    module.exports = {\n        // 它定义了打包的入口文件，数组中的文件会按顺序进行，并且它会自行解决依赖问题。\n        entry: {\n            main: './pages/main.js',\n        },\n        // 它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径\n        output: {\n            path: __dirname + '/build',\n            publicPath: '/build/',\n            filename: '[name].js'\n        },\n        // Webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。\n        // resolve属性中的extensions数组中用于配置程序可以自行补全哪些后缀。\n        // 比如 Hello.jsx 这样的文件就可以直接用 require(./Hello) 引用。\n        resolve: {\n            extensions: ['', '.js', '.jsx']\n        },\n        // webpack将所有的资源都看做是模块，而模块就需要加载器\n        module: {\n            loaders: [\n                // loaders 指定 jsx-loader 编译后缀名为 .jsx 的文件，\n                // 建议给含有 JSX 的文件添加 .jsx 后缀，\n                // 当然你也可以直接使用 .js 后缀， 相应的 test 配置正则要修改匹配就是。\n                { test: /\\.js?$/, exclude: /node_modules/, loader: 'jsx?harmony' }, \n                { test: /\\.(css)/, loader: 'style-loader!css-loader' },\n                // inline base64 URLs for <=8k images, direct URLs for the rest\n                {test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192' } \n                // loaders: ['react-hot', 'jsx?harmony']\n                // loaders后面如果跟的不是数组，则会报错：LoadersList.js:81 r.forEach(function(r) \n            ]\n        },\n        // 我们可以在plugin参数中配置我们需要用到的各种各样的插件。\n        plugins: [\n            new webpack.NoErrorsPlugin(),\n        ]\n    }\n\n###Webpack 命令\n启动webpack命令\n- webpack -d 提供SourceMaps，方便调试\n- webpack -w 提供watch方法，实时进行打包更新\n- webpack --colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤\n- webpack --progress 输出的接口带进度\n- webpack --profile 输出性能数据，可以看到每一步的耗时\n- webpack -p 对打包后的文件进行压缩\n- webpack --config <filename> 支持指定实用的配置文件，处理release和debug不同的情况\n\n###配置scripts\n    \"scripts\": {\n        \"locDev\": \"webpack -d -w --progress --colors\",\n        \"serDev\": \"webpack-dev-server --progress --colors --port 8082\"\n    }\n\n###运行\n- npm run locDev\n- npm run serDev\n\n###React - 热插拔\n- npm install --save-dev react-hot-loader\n- webpack.config.js: entry 使用数组，并添加 'webpack/hot/only-dev-server'\n- webpack.config.js: loaders: ['react-hot', 'jsx?harmony']\n- 入口文件添加 module.hot.accept()\n- 启动：webpack-dev-server -d --port 8082 --hot --progress --colors\n\n###React - 热拔插多个入口\n- webpack.config.js: entry:\n    entry: {\n        main: ['./pages/main/index.js', 'webpack/hot/only-dev-server'],\n        help: ['./pages/help/index.js', 'webpack/hot/only-dev-server']\n    }\n\n##React - render时机\n###批量更新 - 事件回调函数\n- 事件处理函数中的多次setState/replaceState会被标记为一次批量更新\n- 事件处理函数本身在React事件机制中是作为一个回调函数被调用，在函数执行完成后才会触发render\n\n###实时更新 - 其他\n- 调用setState/replaceState后直接触发render，比如setInterval\n\n###render流程\n- setState/replaceState 修改状态后\n- 组件添加等待更新的状态列表，并把新的状态压入列表（ReactUpdateQueue.js: enqueueSetState()）\n- 标记组件为需要重新渲染的组件（dirty components list）ReactUpdates：enqueueUpdate()\n- runBatchedUpdates来处理dirty components（调用对应的render）\n\n##React - React事件系统\n1. React初始化时会把事件监听 ReactEventListener 注入到 ReactBrowserEventEmitter\n2. ReactBrowserEventEmitter 是浏览器事件的顶级委托，ReactEventListener 为用户绑定事件的DOM绑定自己的处理函数，并在处理函数中调用用户的事件处理函数，然后理render相关逻辑；\n3. React 事件系统：\n    - 浏览器事件的顶级委托（top-level delegation）用来 trap (捕获？) 大多数原生浏览器事件，可以注入事件处理器；\n    - 主线程唯一的工作是注入的 ReactEventListener（是为可插拔事件源准备的事件监听器）；\n    - 转发这些被 trap 原生浏览器事件至 EventPluginHub， EventPluginHub 在提取任何组合事件时会调用对应插件（比如 SimpleEventPlugin ）并返回需要处理的事件列表；\n    - 事件插件包括：ResponderEventPlugin、SimpleEventPlugin、TapEventPlugin、EnterLeaveEventPlugin、ChangeEventPlugin、SelectEventPlugin、BeforeInputEventPlugin\n    - EventPluginHub 同时会维护Dom、事件名称和事件处理器的Mapping；\n    - ReactEventListener 监听 EventPluginHub 的事件，并处理事件派发及事件响应\n    - ReactEventListener 的事件响应函数会处理用户的事件处理函数\n4. React组件及组件树的渲染都是在ReactMount里面执行\n5. \nmount组件时，初始化组件并注册事件监听（mountComponent）\n6. 事件响应由ReactEventListener的dispatchEvent触发，通过EventPluginHub找到事件处理相关 \n7. 我们的事件函数作为回调处理\n","source":"start/index.md","raw":"---\ntitle: react -start\ndate: 2016-03-28 14:31:16\n---\nReact -start\n\n##React\n- Facebook\n- MVC中的V：M -> V\n- 和Flux搭配，可以做到MVVM\n- 默认转义所有字符串，防止XSS攻击\n- React认为HTML标签及生成这些标签的代码间存在着内在联系，React设计允许你在构建标签结构时充分利用JS的强大能力，而不必在笨拙的模板语言上浪费时间\n\n##Why React?\n- 简单：\n  model改变后，react自动处理用户界面的更新；\n- 声明式：\n  更新界面时，react仅仅会更新变化的部分；\n- 虚拟Dom\n  React在内存中维护一个快速响应的DOM描述，并利用他来快速地计算出差异，然后更新浏览器中的DOM;\n\n##React 最需要走心的工作\n- 构建可组合的、可复用的组件;\n- 组件的好处：代码复用、测试更加点多;\n\n##React - hello world\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>React Hello World</title>\n            <script type=\"text/javascript\" src=\"./react.js\"></script>\n        </head>\n        <body>\n            <div id=\"app\"></div>\n\n            <script type=\"text/javascript\">\n                function h1 (text, style) {\n                    return '<h1>'' + text + '</h1>';\n                }\n                var el = React.createElement('h1', {style: {color: '##00f'}}, 'Hello World!');\n                React.render(el, document.getElementById('app'));\n            </script>\n        </body>\n    </html>\n\n\n##React - 类似的工作\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>React Hello World</title>\n        </head>\n        <body>\n            <div id=\"app\"></div>\n\n            <script type=\"text/javascript\">\n                  function h1 (text, style) {\n                    var result;\n                    var styleStr;\n\n                    if (style) {\n                        styleStr = 'style=\"';\n                        for (var name in style) {\n                            styleStr += name + ':' + style[name] + ';'; \n                        }\n                        styleStr += '\"';\n                    }\n\n                    if (styleStr) {\n                        result = '<h1 ' + styleStr + '>' + text + '</h1>';\n                    } else {\n                        result = '<h1>' + text + '</h1>';\n                    }\n\n                      return result;\n                  }\n\n                  function render(target, container) {\n                    container.innerHTML = target;\n                  }\n\n                  render(h1('Hello World!', {color: '##00f'}), document.getElementById('app'));\n            </script>\n        </body>\n    </html>\n\n##JSX - Javascript XML\n优势：\n- 类HTML标记语言，都是熟悉的语法\n- 抽象了React Element的创建过程\n- 简单直观，可以提升效率且成本很低\n劣势：\n- 在浏览器运行会很慢，项目中需要预处理\n\n##JSX - hello world\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>React Hello World</title>\n            <script type=\"text/javascript\" src=\"./react.js\"></script>\n            <script type=\"text/javascript\" src=\"./JSXTransformer.js\"></script>\n        </head>\n        <body>\n            <div id=\"app\"></div>\n\n            <script type=\"text/jsx\">\n                React.render(<h1>Hello World, JSX!</h1>, document.getElementById('app'));\n            </script>\n        </body>\n    </html>\n\n##JSX - 工作原理\n1. 使用JSXTransformer通过监听windows的onload/DOMContentLoaded，来遍历所有\"text/jsx\"脚本标签\n2. 获取每个标签的source code并把JSX代码转为react的虚拟dom代码\n3. 最后把react代码添加到新建的script标签中\n4. 预编译的插件是同理，只不过发生在编译阶段\n\n##JSX Tips\n- JSX设置动态属性时，用花括号包裹Javascript变量\n- 也可以把属性设置为一个函数的调用返回结果\n- 条件判断支持：三元运输符、&&、||\n- key: 列表时会建议使用，重用组件提升渲染性能\n- refs：获取创建dom的描述对象 or 获取创建dom的对象, this.refs.usernameInput.getDOMNode() x\n- HTML关键词：for > htmlFor, class > className, style: {}\n- 事件统一使用驼峰式\n\n##React Tips\n- React创建的class名称首字母必须大写，不然找不到\n- JSX可以不换行，换行时必须使用（）包装，不然会报非法组件错误；\n- 只能有根一个节点，多个节点会抛错\n- 内联样式支持对象，名称使用驼峰式，否则不起作用，fontSize\n- 返回：null、false、React组件\n\n##组件的复合\n- 复用那些接口定义良好的组件来开发新的模块化组件\n- this.props.children X\n- 组件支持 ref=\"refId\"  this.refs.refId\n\n##React - 组件数据流\n- props\n- state\n\n##React - dom对象\n- refs\n\n##React - 组件生命周期\n\n###组件类创建时\n- getDefaultProps\n\n###初始化\n- getinitialState\n\n###挂载\n- componentWillMount\n- render\n- componentDidMount\n\n###更新\n- componentWillReceiveProps\n- shouldComponentUpdate\n- componentWillUpdate\n- render\n- componentDidUpdate\n\n###卸载\n- componentWillUnmount\n\n###生命周期\n- Class Create Pahses:\n    + invoke while class created and be shared between instances.\n- Initialization Pahses:\n    + constructor: Initialization of state. The instance is now retained.\n    + componentWillMount\n    + render\n    + [children's constructors]\n        - [children's componentWillMount and render]\n        - [children's componentDidMount]\n    + componentDidMount\n- Update Phases:\n    + componentWillReceiveProps (only called if parent updated)\n    + shouldComponentUpdate (default: always returns true to prevent subtle bugs)\n        - componentWillUpdate\n        - render\n            + [children's constructors or receive props phases]\n        - componentDidUpdate\n- Unmount Phases:\n    + componentWillUnmount\n        - [children's componentWillUnmount]\n        - [children destroyed]\n    + (destroyed): The instance is now blank, released by React and ready for GC\n\n##Mixin\n- 独立于组件的\n- 多个组件可共享的\n- 对象类型的配置\n\n##Mixin - DEMO\n    var userMixin = {\n        getDefaultProps: function () {\n            return {\n                username: '小红'\n            };\n        },\n        renderUser: function (welcomeMsg) {\n            return (\n                    <div className=\"user-wrap\">\n                        <span ref=\"welcomeDesc\" className=\"welcome-user\">{welcomeMsg}</span>\n                    </div>\n                );\n        },\n        componentDidMount: function () {\n            console.log('mount');\n        }\n    }\n\n\n    var Header = React.createClass({\n        mixins: [userMixin],\n        getInitialState: function () {\n            return {\n                systemName: 'React平台Header'\n            };\n        },\n        render: function () {\n            var welcomeMsg;\n            if (this.props.username) {\n                welcomeMsg = '欢迎，' + this.props.username + '！'\n            };\n            return (\n                    <div className=\"header-content\">\n                        <h1>{this.state.systemName}</h1>\n                        {\n                            welcomeMsg ? this.renderUser(welcomeMsg) : null\n                        }\n                    </div>\n                );\n        }\n    });\n\n##React - PureRenderMixin\n- React组件的渲染函数是“纯粹的” - 同样的props和state，渲染出同样的效果\n- 可以提升性能 - 在shouldComponentUpdate里检查props、state是否会发生变化\n- shouldComponentUpdate的判断结果会影响整个组件子树\n- 据说props、state比较是浅比较，不适合(特别)复杂的数据结构 x\n\n##PureRenderMixin - shouldComponentUpdate: shallow check\n    /**\n     - Performs equality by iterating through keys on an object and returning false\n     - when any key has values which are not strictly equal between the arguments.\n     - Returns true when the values of all keys are strictly equal.\n     */\n    function shallowEqual(objA, objB) {\n      if (objA === objB) {\n        return true;\n      }\n\n      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n        return false;\n      }\n\n      var keysA = Object.keys(objA);\n      var keysB = Object.keys(objB);\n\n      if (keysA.length !== keysB.length) {\n        return false;\n      }\n\n      // Test for A's keys different from B.\n      var bHasOwnProperty = hasOwnProperty.bind(objB);\n      for (var i = 0; i < keysA.length; i++) {\n        if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n###React - Mixin原理\n- Mixin必须是一个对象\n- 在React.createClass（源码：ReactClass > createClass: function (spec) {...}会把Mixin对象融入react对象\n- 融入过程是通过遍历Mixin的属性（for..in）逐个添加到react对象得prototype上（mixSpecIntoComponent）\n- 添加之前需要判断是否已经有了相同属性，且此属性是否支持覆盖、是否支持多个、是否需要合并\n- 添加的方式是：覆盖（override）、合并、多个函数链\n\n###React - Mixin融合方式的标准\n- 一些基础的属性是不允许覆盖的，比如：setProps、replaceProps、replaceState、isMounted\n- 渲染的属性是不允许定义多次的，比如：render、shouldComponentUpdate\n- 需要合并的是那些有返回值的，比如：getDefaultProps、getInitialState\n- 其他的都支持多个函数链的形式（先执行已有的，在执行Mixin的），比如：willMount、didMount、willUpdate、didUpdate等等\n\n##React - 表单组件\n\n###受用户交互影响的属性\n- value，用于 input、textarea 组件\n- checked，用于类型为 checkbox 或者 radio 的 input 组件\n- selected，用于 option 组件\n\n###onChange 回调函数来监听组件变化\n- input 或 textarea 的 value 发生变化时。\n- input 的 checked 状态改变时。\n- option 的 selected 状态改变时。\n\n###Controlled Components - 受限组件\n- 设置了 value 的 input 是一个受限组件\n\n###受限组件 - DEMO\n    var App = React.createClass({\n        getInitialState: function () {\n            return {\n                phone: '15821466666'\n            };\n        },\n        render: function () {\n            return (\n                    <div>\n                        <label htmlFor=\"phone\">手机号：</label>\n                        <input type='text' id=\"phone\" value={this.state.phone} onChange={this.phoneChangeHlr} />\n                    </div>\n                );\n        },\n        phoneChangeHlr: function (event) {\n            this.setState({phone: event.target.value});\n        }\n    });\n\n    ReactDOM.render(<App />, document.getElementById('app'));\n\n##React - add-ons\n- TransitionGroup和CSSTransitionGroup\n- LinkedStateMixin - 用于简化用户表单输入数据和组件 state 之间的双向数据绑定\n- classSet，用于更加干净简洁地操作 DOM 中的 class 字符串\n- cloneWithProps，用于实现 React 组件浅复制，同时改变它们的 props \n- update，一个辅助方法，使得在 JavaScript 中处理不可变数据更加容易\n- PureRenderMixin，在某些场景下的性能检测器\n\n##LinkedStateMixin - DEMO\n    var LinkedStateMixin = React.addons.LinkedStateMixin;\n    var App = React.createClass({\n        mixins: [LinkedStateMixin],\n        getInitialState: function () {\n            return {\n                phone: '15821466666'\n            };\n        },\n        render: function () {\n            return (\n                    <div>\n                        <label htmlFor=\"phone\">手机号：</label>\n                        <input type='text' id=\"phone\" valueLink={this.linkState('phone')}  />\n                    </div>\n                );\n        }\n    });\n\n    ReactDOM.render(<App />, document.getElementById('app'));\n\n\n##开发工具webpack\n\n###webpack + react install\n- npm init\n- npm install --save react react\n- npm install --save-dev webpack webpack-dev-server\n- npm install --save-dev jsx-loader css-loader file-loader style-loader url-loader\n\n###Configuring webpack\n    var webpack = require('webpack');\n\n    module.exports = {\n        // 它定义了打包的入口文件，数组中的文件会按顺序进行，并且它会自行解决依赖问题。\n        entry: {\n            main: './pages/main.js',\n        },\n        // 它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径\n        output: {\n            path: __dirname + '/build',\n            publicPath: '/build/',\n            filename: '[name].js'\n        },\n        // Webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。\n        // resolve属性中的extensions数组中用于配置程序可以自行补全哪些后缀。\n        // 比如 Hello.jsx 这样的文件就可以直接用 require(./Hello) 引用。\n        resolve: {\n            extensions: ['', '.js', '.jsx']\n        },\n        // webpack将所有的资源都看做是模块，而模块就需要加载器\n        module: {\n            loaders: [\n                // loaders 指定 jsx-loader 编译后缀名为 .jsx 的文件，\n                // 建议给含有 JSX 的文件添加 .jsx 后缀，\n                // 当然你也可以直接使用 .js 后缀， 相应的 test 配置正则要修改匹配就是。\n                { test: /\\.js?$/, exclude: /node_modules/, loader: 'jsx?harmony' }, \n                { test: /\\.(css)/, loader: 'style-loader!css-loader' },\n                // inline base64 URLs for <=8k images, direct URLs for the rest\n                {test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192' } \n                // loaders: ['react-hot', 'jsx?harmony']\n                // loaders后面如果跟的不是数组，则会报错：LoadersList.js:81 r.forEach(function(r) \n            ]\n        },\n        // 我们可以在plugin参数中配置我们需要用到的各种各样的插件。\n        plugins: [\n            new webpack.NoErrorsPlugin(),\n        ]\n    }\n\n###Webpack 命令\n启动webpack命令\n- webpack -d 提供SourceMaps，方便调试\n- webpack -w 提供watch方法，实时进行打包更新\n- webpack --colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤\n- webpack --progress 输出的接口带进度\n- webpack --profile 输出性能数据，可以看到每一步的耗时\n- webpack -p 对打包后的文件进行压缩\n- webpack --config <filename> 支持指定实用的配置文件，处理release和debug不同的情况\n\n###配置scripts\n    \"scripts\": {\n        \"locDev\": \"webpack -d -w --progress --colors\",\n        \"serDev\": \"webpack-dev-server --progress --colors --port 8082\"\n    }\n\n###运行\n- npm run locDev\n- npm run serDev\n\n###React - 热插拔\n- npm install --save-dev react-hot-loader\n- webpack.config.js: entry 使用数组，并添加 'webpack/hot/only-dev-server'\n- webpack.config.js: loaders: ['react-hot', 'jsx?harmony']\n- 入口文件添加 module.hot.accept()\n- 启动：webpack-dev-server -d --port 8082 --hot --progress --colors\n\n###React - 热拔插多个入口\n- webpack.config.js: entry:\n    entry: {\n        main: ['./pages/main/index.js', 'webpack/hot/only-dev-server'],\n        help: ['./pages/help/index.js', 'webpack/hot/only-dev-server']\n    }\n\n##React - render时机\n###批量更新 - 事件回调函数\n- 事件处理函数中的多次setState/replaceState会被标记为一次批量更新\n- 事件处理函数本身在React事件机制中是作为一个回调函数被调用，在函数执行完成后才会触发render\n\n###实时更新 - 其他\n- 调用setState/replaceState后直接触发render，比如setInterval\n\n###render流程\n- setState/replaceState 修改状态后\n- 组件添加等待更新的状态列表，并把新的状态压入列表（ReactUpdateQueue.js: enqueueSetState()）\n- 标记组件为需要重新渲染的组件（dirty components list）ReactUpdates：enqueueUpdate()\n- runBatchedUpdates来处理dirty components（调用对应的render）\n\n##React - React事件系统\n1. React初始化时会把事件监听 ReactEventListener 注入到 ReactBrowserEventEmitter\n2. ReactBrowserEventEmitter 是浏览器事件的顶级委托，ReactEventListener 为用户绑定事件的DOM绑定自己的处理函数，并在处理函数中调用用户的事件处理函数，然后理render相关逻辑；\n3. React 事件系统：\n    - 浏览器事件的顶级委托（top-level delegation）用来 trap (捕获？) 大多数原生浏览器事件，可以注入事件处理器；\n    - 主线程唯一的工作是注入的 ReactEventListener（是为可插拔事件源准备的事件监听器）；\n    - 转发这些被 trap 原生浏览器事件至 EventPluginHub， EventPluginHub 在提取任何组合事件时会调用对应插件（比如 SimpleEventPlugin ）并返回需要处理的事件列表；\n    - 事件插件包括：ResponderEventPlugin、SimpleEventPlugin、TapEventPlugin、EnterLeaveEventPlugin、ChangeEventPlugin、SelectEventPlugin、BeforeInputEventPlugin\n    - EventPluginHub 同时会维护Dom、事件名称和事件处理器的Mapping；\n    - ReactEventListener 监听 EventPluginHub 的事件，并处理事件派发及事件响应\n    - ReactEventListener 的事件响应函数会处理用户的事件处理函数\n4. React组件及组件树的渲染都是在ReactMount里面执行\n5. \nmount组件时，初始化组件并注册事件监听（mountComponent）\n6. 事件响应由ReactEventListener的dispatchEvent触发，通过EventPluginHub找到事件处理相关 \n7. 我们的事件函数作为回调处理\n","updated":"2016-04-11T05:47:06.419Z","path":"start/index.html","comments":1,"layout":"page","_id":"cimvsajyb00031sjahzj5gmvu","content":"<p>React -start</p>\n<p>##React</p>\n<ul>\n<li>Facebook</li>\n<li>MVC中的V：M -&gt; V</li>\n<li>和Flux搭配，可以做到MVVM</li>\n<li>默认转义所有字符串，防止XSS攻击</li>\n<li>React认为HTML标签及生成这些标签的代码间存在着内在联系，React设计允许你在构建标签结构时充分利用JS的强大能力，而不必在笨拙的模板语言上浪费时间</li>\n</ul>\n<p>##Why React?</p>\n<ul>\n<li>简单：<br>model改变后，react自动处理用户界面的更新；</li>\n<li>声明式：<br>更新界面时，react仅仅会更新变化的部分；</li>\n<li>虚拟Dom<br>React在内存中维护一个快速响应的DOM描述，并利用他来快速地计算出差异，然后更新浏览器中的DOM;</li>\n</ul>\n<p>##React 最需要走心的工作</p>\n<ul>\n<li>构建可组合的、可复用的组件;</li>\n<li>组件的好处：代码复用、测试更加点多;</li>\n</ul>\n<p>##React - hello world<br>    &lt;!DOCTYPE html&gt;<br>    <html><br>        <head><br>            <title>React Hello World</title><br>            <script type=\"text/javascript\" src=\"./react.js\"></script><br>        </head><br>        <body><br>            <div id=\"app\"></div></body></html></p>\n<pre><code>        &lt;script type=&quot;text/javascript&quot;&gt;\n            function h1 (text, style) {\n                return &apos;&lt;h1&gt;&apos;&apos; + text + &apos;&lt;/h1&gt;&apos;;\n            }\n            var el = React.createElement(&apos;h1&apos;, {style: {color: &apos;##00f&apos;}}, &apos;Hello World!&apos;);\n            React.render(el, document.getElementById(&apos;app&apos;));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>##React - 类似的工作<br>    &lt;!DOCTYPE html&gt;<br>    <html><br>        <head><br>            <title>React Hello World</title><br>        </head><br>        <body><br>            <div id=\"app\"></div></body></html></p>\n<pre><code>        &lt;script type=&quot;text/javascript&quot;&gt;\n              function h1 (text, style) {\n                var result;\n                var styleStr;\n\n                if (style) {\n                    styleStr = &apos;style=&quot;&apos;;\n                    for (var name in style) {\n                        styleStr += name + &apos;:&apos; + style[name] + &apos;;&apos;; \n                    }\n                    styleStr += &apos;&quot;&apos;;\n                }\n\n                if (styleStr) {\n                    result = &apos;&lt;h1 &apos; + styleStr + &apos;&gt;&apos; + text + &apos;&lt;/h1&gt;&apos;;\n                } else {\n                    result = &apos;&lt;h1&gt;&apos; + text + &apos;&lt;/h1&gt;&apos;;\n                }\n\n                  return result;\n              }\n\n              function render(target, container) {\n                container.innerHTML = target;\n              }\n\n              render(h1(&apos;Hello World!&apos;, {color: &apos;##00f&apos;}), document.getElementById(&apos;app&apos;));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>##JSX - Javascript XML<br>优势：</p>\n<ul>\n<li>类HTML标记语言，都是熟悉的语法</li>\n<li>抽象了React Element的创建过程</li>\n<li>简单直观，可以提升效率且成本很低<br>劣势：</li>\n<li>在浏览器运行会很慢，项目中需要预处理</li>\n</ul>\n<p>##JSX - hello world<br>    &lt;!DOCTYPE html&gt;<br>    <html><br>        <head><br>            <title>React Hello World</title><br>            <script type=\"text/javascript\" src=\"./react.js\"></script><br>            <script type=\"text/javascript\" src=\"./JSXTransformer.js\"></script><br>        </head><br>        <body><br>            <div id=\"app\"></div></body></html></p>\n<pre><code>        &lt;script type=&quot;text/jsx&quot;&gt;\n            React.render(&lt;h1&gt;Hello World, JSX!&lt;/h1&gt;, document.getElementById(&apos;app&apos;));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>##JSX - 工作原理</p>\n<ol>\n<li>使用JSXTransformer通过监听windows的onload/DOMContentLoaded，来遍历所有”text/jsx”脚本标签</li>\n<li>获取每个标签的source code并把JSX代码转为react的虚拟dom代码</li>\n<li>最后把react代码添加到新建的script标签中</li>\n<li>预编译的插件是同理，只不过发生在编译阶段</li>\n</ol>\n<p>##JSX Tips</p>\n<ul>\n<li>JSX设置动态属性时，用花括号包裹Javascript变量</li>\n<li>也可以把属性设置为一个函数的调用返回结果</li>\n<li>条件判断支持：三元运输符、&amp;&amp;、||</li>\n<li>key: 列表时会建议使用，重用组件提升渲染性能</li>\n<li>refs：获取创建dom的描述对象 or 获取创建dom的对象, this.refs.usernameInput.getDOMNode() x</li>\n<li>HTML关键词：for &gt; htmlFor, class &gt; className, style: {}</li>\n<li>事件统一使用驼峰式</li>\n</ul>\n<p>##React Tips</p>\n<ul>\n<li>React创建的class名称首字母必须大写，不然找不到</li>\n<li>JSX可以不换行，换行时必须使用（）包装，不然会报非法组件错误；</li>\n<li>只能有根一个节点，多个节点会抛错</li>\n<li>内联样式支持对象，名称使用驼峰式，否则不起作用，fontSize</li>\n<li>返回：null、false、React组件</li>\n</ul>\n<p>##组件的复合</p>\n<ul>\n<li>复用那些接口定义良好的组件来开发新的模块化组件</li>\n<li>this.props.children X</li>\n<li>组件支持 ref=”refId”  this.refs.refId</li>\n</ul>\n<p>##React - 组件数据流</p>\n<ul>\n<li>props</li>\n<li>state</li>\n</ul>\n<p>##React - dom对象</p>\n<ul>\n<li>refs</li>\n</ul>\n<p>##React - 组件生命周期</p>\n<p>###组件类创建时</p>\n<ul>\n<li>getDefaultProps</li>\n</ul>\n<p>###初始化</p>\n<ul>\n<li>getinitialState</li>\n</ul>\n<p>###挂载</p>\n<ul>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>\n<p>###更新</p>\n<ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<p>###卸载</p>\n<ul>\n<li>componentWillUnmount</li>\n</ul>\n<p>###生命周期</p>\n<ul>\n<li>Class Create Pahses:<ul>\n<li>invoke while class created and be shared between instances.</li>\n</ul>\n</li>\n<li>Initialization Pahses:<ul>\n<li>constructor: Initialization of state. The instance is now retained.</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>[children’s constructors]<ul>\n<li>[children’s componentWillMount and render]</li>\n<li>[children’s componentDidMount]</li>\n</ul>\n</li>\n<li>componentDidMount</li>\n</ul>\n</li>\n<li>Update Phases:<ul>\n<li>componentWillReceiveProps (only called if parent updated)</li>\n<li>shouldComponentUpdate (default: always returns true to prevent subtle bugs)<ul>\n<li>componentWillUpdate</li>\n<li>render<ul>\n<li>[children’s constructors or receive props phases]</li>\n</ul>\n</li>\n<li>componentDidUpdate</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Unmount Phases:<ul>\n<li>componentWillUnmount<ul>\n<li>[children’s componentWillUnmount]</li>\n<li>[children destroyed]</li>\n</ul>\n</li>\n<li>(destroyed): The instance is now blank, released by React and ready for GC</li>\n</ul>\n</li>\n</ul>\n<p>##Mixin</p>\n<ul>\n<li>独立于组件的</li>\n<li>多个组件可共享的</li>\n<li>对象类型的配置</li>\n</ul>\n<p>##Mixin - DEMO<br>    var userMixin = {<br>        getDefaultProps: function () {<br>            return {<br>                username: ‘小红’<br>            };<br>        },<br>        renderUser: function (welcomeMsg) {<br>            return (<br>                    <div classname=\"user-wrap\"><br>                        <span ref=\"welcomeDesc\" classname=\"welcome-user\">{welcomeMsg}</span><br>                    </div><br>                );<br>        },<br>        componentDidMount: function () {<br>            console.log(‘mount’);<br>        }<br>    }</p>\n<pre><code>var Header = React.createClass({\n    mixins: [userMixin],\n    getInitialState: function () {\n        return {\n            systemName: &apos;React平台Header&apos;\n        };\n    },\n    render: function () {\n        var welcomeMsg;\n        if (this.props.username) {\n            welcomeMsg = &apos;欢迎，&apos; + this.props.username + &apos;！&apos;\n        };\n        return (\n                &lt;div className=&quot;header-content&quot;&gt;\n                    &lt;h1&gt;{this.state.systemName}&lt;/h1&gt;\n                    {\n                        welcomeMsg ? this.renderUser(welcomeMsg) : null\n                    }\n                &lt;/div&gt;\n            );\n    }\n});\n</code></pre><p>##React - PureRenderMixin</p>\n<ul>\n<li>React组件的渲染函数是“纯粹的” - 同样的props和state，渲染出同样的效果</li>\n<li>可以提升性能 - 在shouldComponentUpdate里检查props、state是否会发生变化</li>\n<li>shouldComponentUpdate的判断结果会影响整个组件子树</li>\n<li>据说props、state比较是浅比较，不适合(特别)复杂的数据结构 x</li>\n</ul>\n<p>##PureRenderMixin - shouldComponentUpdate: shallow check<br>    /**</p>\n<pre><code> - Performs equality by iterating through keys on an object and returning false\n - when any key has values which are not strictly equal between the arguments.\n - Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== &apos;object&apos; || objA === null || typeof objB !== &apos;object&apos; || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A&apos;s keys different from B.\n  var bHasOwnProperty = hasOwnProperty.bind(objB);\n  for (var i = 0; i &lt; keysA.length; i++) {\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n</code></pre><p>###React - Mixin原理</p>\n<ul>\n<li>Mixin必须是一个对象</li>\n<li>在React.createClass（源码：ReactClass &gt; createClass: function (spec) {…}会把Mixin对象融入react对象</li>\n<li>融入过程是通过遍历Mixin的属性（for..in）逐个添加到react对象得prototype上（mixSpecIntoComponent）</li>\n<li>添加之前需要判断是否已经有了相同属性，且此属性是否支持覆盖、是否支持多个、是否需要合并</li>\n<li>添加的方式是：覆盖（override）、合并、多个函数链</li>\n</ul>\n<p>###React - Mixin融合方式的标准</p>\n<ul>\n<li>一些基础的属性是不允许覆盖的，比如：setProps、replaceProps、replaceState、isMounted</li>\n<li>渲染的属性是不允许定义多次的，比如：render、shouldComponentUpdate</li>\n<li>需要合并的是那些有返回值的，比如：getDefaultProps、getInitialState</li>\n<li>其他的都支持多个函数链的形式（先执行已有的，在执行Mixin的），比如：willMount、didMount、willUpdate、didUpdate等等</li>\n</ul>\n<p>##React - 表单组件</p>\n<p>###受用户交互影响的属性</p>\n<ul>\n<li>value，用于 input、textarea 组件</li>\n<li>checked，用于类型为 checkbox 或者 radio 的 input 组件</li>\n<li>selected，用于 option 组件</li>\n</ul>\n<p>###onChange 回调函数来监听组件变化</p>\n<ul>\n<li>input 或 textarea 的 value 发生变化时。</li>\n<li>input 的 checked 状态改变时。</li>\n<li>option 的 selected 状态改变时。</li>\n</ul>\n<p>###Controlled Components - 受限组件</p>\n<ul>\n<li>设置了 value 的 input 是一个受限组件</li>\n</ul>\n<p>###受限组件 - DEMO<br>    var App = React.createClass({<br>        getInitialState: function () {<br>            return {<br>                phone: ‘15821466666’<br>            };<br>        },<br>        render: function () {<br>            return (<br>                    <div><br>                        <label htmlfor=\"phone\">手机号：</label><br>                        <input type=\"text\" id=\"phone\" value=\"{this.state.phone}\" onchange=\"{this.phoneChangeHlr}\"><br>                    </div><br>                );<br>        },<br>        phoneChangeHlr: function (event) {<br>            this.setState({phone: event.target.value});<br>        }<br>    });</p>\n<pre><code>ReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;app&apos;));\n</code></pre><p>##React - add-ons</p>\n<ul>\n<li>TransitionGroup和CSSTransitionGroup</li>\n<li>LinkedStateMixin - 用于简化用户表单输入数据和组件 state 之间的双向数据绑定</li>\n<li>classSet，用于更加干净简洁地操作 DOM 中的 class 字符串</li>\n<li>cloneWithProps，用于实现 React 组件浅复制，同时改变它们的 props </li>\n<li>update，一个辅助方法，使得在 JavaScript 中处理不可变数据更加容易</li>\n<li>PureRenderMixin，在某些场景下的性能检测器</li>\n</ul>\n<p>##LinkedStateMixin - DEMO<br>    var LinkedStateMixin = React.addons.LinkedStateMixin;<br>    var App = React.createClass({<br>        mixins: [LinkedStateMixin],<br>        getInitialState: function () {<br>            return {<br>                phone: ‘15821466666’<br>            };<br>        },<br>        render: function () {<br>            return (<br>                    <div><br>                        <label htmlfor=\"phone\">手机号：</label><br>                        <input type=\"text\" id=\"phone\" valuelink=\"{this.linkState('phone')}\"><br>                    </div><br>                );<br>        }<br>    });</p>\n<pre><code>ReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;app&apos;));\n</code></pre><p>##开发工具webpack</p>\n<p>###webpack + react install</p>\n<ul>\n<li>npm init</li>\n<li>npm install –save react react</li>\n<li>npm install –save-dev webpack webpack-dev-server</li>\n<li>npm install –save-dev jsx-loader css-loader file-loader style-loader url-loader</li>\n</ul>\n<p>###Configuring webpack<br>    var webpack = require(‘webpack’);</p>\n<pre><code>module.exports = {\n    // 它定义了打包的入口文件，数组中的文件会按顺序进行，并且它会自行解决依赖问题。\n    entry: {\n        main: &apos;./pages/main.js&apos;,\n    },\n    // 它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径\n    output: {\n        path: __dirname + &apos;/build&apos;,\n        publicPath: &apos;/build/&apos;,\n        filename: &apos;[name].js&apos;\n    },\n    // Webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。\n    // resolve属性中的extensions数组中用于配置程序可以自行补全哪些后缀。\n    // 比如 Hello.jsx 这样的文件就可以直接用 require(./Hello) 引用。\n    resolve: {\n        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.jsx&apos;]\n    },\n    // webpack将所有的资源都看做是模块，而模块就需要加载器\n    module: {\n        loaders: [\n            // loaders 指定 jsx-loader 编译后缀名为 .jsx 的文件，\n            // 建议给含有 JSX 的文件添加 .jsx 后缀，\n            // 当然你也可以直接使用 .js 后缀， 相应的 test 配置正则要修改匹配就是。\n            { test: /\\.js?$/, exclude: /node_modules/, loader: &apos;jsx?harmony&apos; }, \n            { test: /\\.(css)/, loader: &apos;style-loader!css-loader&apos; },\n            // inline base64 URLs for &lt;=8k images, direct URLs for the rest\n            {test: /\\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos; } \n            // loaders: [&apos;react-hot&apos;, &apos;jsx?harmony&apos;]\n            // loaders后面如果跟的不是数组，则会报错：LoadersList.js:81 r.forEach(function(r) \n        ]\n    },\n    // 我们可以在plugin参数中配置我们需要用到的各种各样的插件。\n    plugins: [\n        new webpack.NoErrorsPlugin(),\n    ]\n}\n</code></pre><p>###Webpack 命令<br>启动webpack命令</p>\n<ul>\n<li>webpack -d 提供SourceMaps，方便调试</li>\n<li>webpack -w 提供watch方法，实时进行打包更新</li>\n<li>webpack –colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤</li>\n<li>webpack –progress 输出的接口带进度</li>\n<li>webpack –profile 输出性能数据，可以看到每一步的耗时</li>\n<li>webpack -p 对打包后的文件进行压缩</li>\n<li>webpack –config <filename> 支持指定实用的配置文件，处理release和debug不同的情况</filename></li>\n</ul>\n<p>###配置scripts<br>    “scripts”: {<br>        “locDev”: “webpack -d -w –progress –colors”,<br>        “serDev”: “webpack-dev-server –progress –colors –port 8082”<br>    }</p>\n<p>###运行</p>\n<ul>\n<li>npm run locDev</li>\n<li>npm run serDev</li>\n</ul>\n<p>###React - 热插拔</p>\n<ul>\n<li>npm install –save-dev react-hot-loader</li>\n<li>webpack.config.js: entry 使用数组，并添加 ‘webpack/hot/only-dev-server’</li>\n<li>webpack.config.js: loaders: [‘react-hot’, ‘jsx?harmony’]</li>\n<li>入口文件添加 module.hot.accept()</li>\n<li>启动：webpack-dev-server -d –port 8082 –hot –progress –colors</li>\n</ul>\n<p>###React - 热拔插多个入口</p>\n<ul>\n<li>webpack.config.js: entry:<br>  entry: {<pre><code>main: [&apos;./pages/main/index.js&apos;, &apos;webpack/hot/only-dev-server&apos;],\nhelp: [&apos;./pages/help/index.js&apos;, &apos;webpack/hot/only-dev-server&apos;]\n</code></pre>  }</li>\n</ul>\n<p>##React - render时机</p>\n<p>###批量更新 - 事件回调函数</p>\n<ul>\n<li>事件处理函数中的多次setState/replaceState会被标记为一次批量更新</li>\n<li>事件处理函数本身在React事件机制中是作为一个回调函数被调用，在函数执行完成后才会触发render</li>\n</ul>\n<p>###实时更新 - 其他</p>\n<ul>\n<li>调用setState/replaceState后直接触发render，比如setInterval</li>\n</ul>\n<p>###render流程</p>\n<ul>\n<li>setState/replaceState 修改状态后</li>\n<li>组件添加等待更新的状态列表，并把新的状态压入列表（ReactUpdateQueue.js: enqueueSetState()）</li>\n<li>标记组件为需要重新渲染的组件（dirty components list）ReactUpdates：enqueueUpdate()</li>\n<li>runBatchedUpdates来处理dirty components（调用对应的render）</li>\n</ul>\n<p>##React - React事件系统</p>\n<ol>\n<li>React初始化时会把事件监听 ReactEventListener 注入到 ReactBrowserEventEmitter</li>\n<li>ReactBrowserEventEmitter 是浏览器事件的顶级委托，ReactEventListener 为用户绑定事件的DOM绑定自己的处理函数，并在处理函数中调用用户的事件处理函数，然后理render相关逻辑；</li>\n<li>React 事件系统：<ul>\n<li>浏览器事件的顶级委托（top-level delegation）用来 trap (捕获？) 大多数原生浏览器事件，可以注入事件处理器；</li>\n<li>主线程唯一的工作是注入的 ReactEventListener（是为可插拔事件源准备的事件监听器）；</li>\n<li>转发这些被 trap 原生浏览器事件至 EventPluginHub， EventPluginHub 在提取任何组合事件时会调用对应插件（比如 SimpleEventPlugin ）并返回需要处理的事件列表；</li>\n<li>事件插件包括：ResponderEventPlugin、SimpleEventPlugin、TapEventPlugin、EnterLeaveEventPlugin、ChangeEventPlugin、SelectEventPlugin、BeforeInputEventPlugin</li>\n<li>EventPluginHub 同时会维护Dom、事件名称和事件处理器的Mapping；</li>\n<li>ReactEventListener 监听 EventPluginHub 的事件，并处理事件派发及事件响应</li>\n<li>ReactEventListener 的事件响应函数会处理用户的事件处理函数</li>\n</ul>\n</li>\n<li>React组件及组件树的渲染都是在ReactMount里面执行</li>\n<li>mount组件时，初始化组件并注册事件监听（mountComponent）</li>\n<li>事件响应由ReactEventListener的dispatchEvent触发，通过EventPluginHub找到事件处理相关 </li>\n<li>我们的事件函数作为回调处理</li>\n</ol>\n","excerpt":"","more":"<p>React -start</p>\n<p>##React</p>\n<ul>\n<li>Facebook</li>\n<li>MVC中的V：M -&gt; V</li>\n<li>和Flux搭配，可以做到MVVM</li>\n<li>默认转义所有字符串，防止XSS攻击</li>\n<li>React认为HTML标签及生成这些标签的代码间存在着内在联系，React设计允许你在构建标签结构时充分利用JS的强大能力，而不必在笨拙的模板语言上浪费时间</li>\n</ul>\n<p>##Why React?</p>\n<ul>\n<li>简单：<br>model改变后，react自动处理用户界面的更新；</li>\n<li>声明式：<br>更新界面时，react仅仅会更新变化的部分；</li>\n<li>虚拟Dom<br>React在内存中维护一个快速响应的DOM描述，并利用他来快速地计算出差异，然后更新浏览器中的DOM;</li>\n</ul>\n<p>##React 最需要走心的工作</p>\n<ul>\n<li>构建可组合的、可复用的组件;</li>\n<li>组件的好处：代码复用、测试更加点多;</li>\n</ul>\n<p>##React - hello world<br>    &lt;!DOCTYPE html&gt;<br>    <html><br>        <head><br>            <title>React Hello World</title><br>            <script type=\"text/javascript\" src=\"./react.js\"></script><br>        </head><br>        <body><br>            <div id=\"app\"></div></p>\n<pre><code>        &lt;script type=&quot;text/javascript&quot;&gt;\n            function h1 (text, style) {\n                return &apos;&lt;h1&gt;&apos;&apos; + text + &apos;&lt;/h1&gt;&apos;;\n            }\n            var el = React.createElement(&apos;h1&apos;, {style: {color: &apos;##00f&apos;}}, &apos;Hello World!&apos;);\n            React.render(el, document.getElementById(&apos;app&apos;));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>##React - 类似的工作<br>    &lt;!DOCTYPE html&gt;<br>    <html><br>        <head><br>            <title>React Hello World</title><br>        </head><br>        <body><br>            <div id=\"app\"></div></p>\n<pre><code>        &lt;script type=&quot;text/javascript&quot;&gt;\n              function h1 (text, style) {\n                var result;\n                var styleStr;\n\n                if (style) {\n                    styleStr = &apos;style=&quot;&apos;;\n                    for (var name in style) {\n                        styleStr += name + &apos;:&apos; + style[name] + &apos;;&apos;; \n                    }\n                    styleStr += &apos;&quot;&apos;;\n                }\n\n                if (styleStr) {\n                    result = &apos;&lt;h1 &apos; + styleStr + &apos;&gt;&apos; + text + &apos;&lt;/h1&gt;&apos;;\n                } else {\n                    result = &apos;&lt;h1&gt;&apos; + text + &apos;&lt;/h1&gt;&apos;;\n                }\n\n                  return result;\n              }\n\n              function render(target, container) {\n                container.innerHTML = target;\n              }\n\n              render(h1(&apos;Hello World!&apos;, {color: &apos;##00f&apos;}), document.getElementById(&apos;app&apos;));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>##JSX - Javascript XML<br>优势：</p>\n<ul>\n<li>类HTML标记语言，都是熟悉的语法</li>\n<li>抽象了React Element的创建过程</li>\n<li>简单直观，可以提升效率且成本很低<br>劣势：</li>\n<li>在浏览器运行会很慢，项目中需要预处理</li>\n</ul>\n<p>##JSX - hello world<br>    &lt;!DOCTYPE html&gt;<br>    <html><br>        <head><br>            <title>React Hello World</title><br>            <script type=\"text/javascript\" src=\"./react.js\"></script><br>            <script type=\"text/javascript\" src=\"./JSXTransformer.js\"></script><br>        </head><br>        <body><br>            <div id=\"app\"></div></p>\n<pre><code>        &lt;script type=&quot;text/jsx&quot;&gt;\n            React.render(&lt;h1&gt;Hello World, JSX!&lt;/h1&gt;, document.getElementById(&apos;app&apos;));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>##JSX - 工作原理</p>\n<ol>\n<li>使用JSXTransformer通过监听windows的onload/DOMContentLoaded，来遍历所有”text/jsx”脚本标签</li>\n<li>获取每个标签的source code并把JSX代码转为react的虚拟dom代码</li>\n<li>最后把react代码添加到新建的script标签中</li>\n<li>预编译的插件是同理，只不过发生在编译阶段</li>\n</ol>\n<p>##JSX Tips</p>\n<ul>\n<li>JSX设置动态属性时，用花括号包裹Javascript变量</li>\n<li>也可以把属性设置为一个函数的调用返回结果</li>\n<li>条件判断支持：三元运输符、&amp;&amp;、||</li>\n<li>key: 列表时会建议使用，重用组件提升渲染性能</li>\n<li>refs：获取创建dom的描述对象 or 获取创建dom的对象, this.refs.usernameInput.getDOMNode() x</li>\n<li>HTML关键词：for &gt; htmlFor, class &gt; className, style: {}</li>\n<li>事件统一使用驼峰式</li>\n</ul>\n<p>##React Tips</p>\n<ul>\n<li>React创建的class名称首字母必须大写，不然找不到</li>\n<li>JSX可以不换行，换行时必须使用（）包装，不然会报非法组件错误；</li>\n<li>只能有根一个节点，多个节点会抛错</li>\n<li>内联样式支持对象，名称使用驼峰式，否则不起作用，fontSize</li>\n<li>返回：null、false、React组件</li>\n</ul>\n<p>##组件的复合</p>\n<ul>\n<li>复用那些接口定义良好的组件来开发新的模块化组件</li>\n<li>this.props.children X</li>\n<li>组件支持 ref=”refId”  this.refs.refId</li>\n</ul>\n<p>##React - 组件数据流</p>\n<ul>\n<li>props</li>\n<li>state</li>\n</ul>\n<p>##React - dom对象</p>\n<ul>\n<li>refs</li>\n</ul>\n<p>##React - 组件生命周期</p>\n<p>###组件类创建时</p>\n<ul>\n<li>getDefaultProps</li>\n</ul>\n<p>###初始化</p>\n<ul>\n<li>getinitialState</li>\n</ul>\n<p>###挂载</p>\n<ul>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>\n<p>###更新</p>\n<ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<p>###卸载</p>\n<ul>\n<li>componentWillUnmount</li>\n</ul>\n<p>###生命周期</p>\n<ul>\n<li>Class Create Pahses:<ul>\n<li>invoke while class created and be shared between instances.</li>\n</ul>\n</li>\n<li>Initialization Pahses:<ul>\n<li>constructor: Initialization of state. The instance is now retained.</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>[children’s constructors]<ul>\n<li>[children’s componentWillMount and render]</li>\n<li>[children’s componentDidMount]</li>\n</ul>\n</li>\n<li>componentDidMount</li>\n</ul>\n</li>\n<li>Update Phases:<ul>\n<li>componentWillReceiveProps (only called if parent updated)</li>\n<li>shouldComponentUpdate (default: always returns true to prevent subtle bugs)<ul>\n<li>componentWillUpdate</li>\n<li>render<ul>\n<li>[children’s constructors or receive props phases]</li>\n</ul>\n</li>\n<li>componentDidUpdate</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Unmount Phases:<ul>\n<li>componentWillUnmount<ul>\n<li>[children’s componentWillUnmount]</li>\n<li>[children destroyed]</li>\n</ul>\n</li>\n<li>(destroyed): The instance is now blank, released by React and ready for GC</li>\n</ul>\n</li>\n</ul>\n<p>##Mixin</p>\n<ul>\n<li>独立于组件的</li>\n<li>多个组件可共享的</li>\n<li>对象类型的配置</li>\n</ul>\n<p>##Mixin - DEMO<br>    var userMixin = {<br>        getDefaultProps: function () {<br>            return {<br>                username: ‘小红’<br>            };<br>        },<br>        renderUser: function (welcomeMsg) {<br>            return (<br>                    <div className=\"user-wrap\"><br>                        <span ref=\"welcomeDesc\" className=\"welcome-user\">{welcomeMsg}</span><br>                    </div><br>                );<br>        },<br>        componentDidMount: function () {<br>            console.log(‘mount’);<br>        }<br>    }</p>\n<pre><code>var Header = React.createClass({\n    mixins: [userMixin],\n    getInitialState: function () {\n        return {\n            systemName: &apos;React平台Header&apos;\n        };\n    },\n    render: function () {\n        var welcomeMsg;\n        if (this.props.username) {\n            welcomeMsg = &apos;欢迎，&apos; + this.props.username + &apos;！&apos;\n        };\n        return (\n                &lt;div className=&quot;header-content&quot;&gt;\n                    &lt;h1&gt;{this.state.systemName}&lt;/h1&gt;\n                    {\n                        welcomeMsg ? this.renderUser(welcomeMsg) : null\n                    }\n                &lt;/div&gt;\n            );\n    }\n});\n</code></pre><p>##React - PureRenderMixin</p>\n<ul>\n<li>React组件的渲染函数是“纯粹的” - 同样的props和state，渲染出同样的效果</li>\n<li>可以提升性能 - 在shouldComponentUpdate里检查props、state是否会发生变化</li>\n<li>shouldComponentUpdate的判断结果会影响整个组件子树</li>\n<li>据说props、state比较是浅比较，不适合(特别)复杂的数据结构 x</li>\n</ul>\n<p>##PureRenderMixin - shouldComponentUpdate: shallow check<br>    /**</p>\n<pre><code> - Performs equality by iterating through keys on an object and returning false\n - when any key has values which are not strictly equal between the arguments.\n - Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== &apos;object&apos; || objA === null || typeof objB !== &apos;object&apos; || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A&apos;s keys different from B.\n  var bHasOwnProperty = hasOwnProperty.bind(objB);\n  for (var i = 0; i &lt; keysA.length; i++) {\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n</code></pre><p>###React - Mixin原理</p>\n<ul>\n<li>Mixin必须是一个对象</li>\n<li>在React.createClass（源码：ReactClass &gt; createClass: function (spec) {…}会把Mixin对象融入react对象</li>\n<li>融入过程是通过遍历Mixin的属性（for..in）逐个添加到react对象得prototype上（mixSpecIntoComponent）</li>\n<li>添加之前需要判断是否已经有了相同属性，且此属性是否支持覆盖、是否支持多个、是否需要合并</li>\n<li>添加的方式是：覆盖（override）、合并、多个函数链</li>\n</ul>\n<p>###React - Mixin融合方式的标准</p>\n<ul>\n<li>一些基础的属性是不允许覆盖的，比如：setProps、replaceProps、replaceState、isMounted</li>\n<li>渲染的属性是不允许定义多次的，比如：render、shouldComponentUpdate</li>\n<li>需要合并的是那些有返回值的，比如：getDefaultProps、getInitialState</li>\n<li>其他的都支持多个函数链的形式（先执行已有的，在执行Mixin的），比如：willMount、didMount、willUpdate、didUpdate等等</li>\n</ul>\n<p>##React - 表单组件</p>\n<p>###受用户交互影响的属性</p>\n<ul>\n<li>value，用于 input、textarea 组件</li>\n<li>checked，用于类型为 checkbox 或者 radio 的 input 组件</li>\n<li>selected，用于 option 组件</li>\n</ul>\n<p>###onChange 回调函数来监听组件变化</p>\n<ul>\n<li>input 或 textarea 的 value 发生变化时。</li>\n<li>input 的 checked 状态改变时。</li>\n<li>option 的 selected 状态改变时。</li>\n</ul>\n<p>###Controlled Components - 受限组件</p>\n<ul>\n<li>设置了 value 的 input 是一个受限组件</li>\n</ul>\n<p>###受限组件 - DEMO<br>    var App = React.createClass({<br>        getInitialState: function () {<br>            return {<br>                phone: ‘15821466666’<br>            };<br>        },<br>        render: function () {<br>            return (<br>                    <div><br>                        <label htmlFor=\"phone\">手机号：</label><br>                        <input type='text' id=\"phone\" value={this.state.phone} onChange={this.phoneChangeHlr} /><br>                    </div><br>                );<br>        },<br>        phoneChangeHlr: function (event) {<br>            this.setState({phone: event.target.value});<br>        }<br>    });</p>\n<pre><code>ReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;app&apos;));\n</code></pre><p>##React - add-ons</p>\n<ul>\n<li>TransitionGroup和CSSTransitionGroup</li>\n<li>LinkedStateMixin - 用于简化用户表单输入数据和组件 state 之间的双向数据绑定</li>\n<li>classSet，用于更加干净简洁地操作 DOM 中的 class 字符串</li>\n<li>cloneWithProps，用于实现 React 组件浅复制，同时改变它们的 props </li>\n<li>update，一个辅助方法，使得在 JavaScript 中处理不可变数据更加容易</li>\n<li>PureRenderMixin，在某些场景下的性能检测器</li>\n</ul>\n<p>##LinkedStateMixin - DEMO<br>    var LinkedStateMixin = React.addons.LinkedStateMixin;<br>    var App = React.createClass({<br>        mixins: [LinkedStateMixin],<br>        getInitialState: function () {<br>            return {<br>                phone: ‘15821466666’<br>            };<br>        },<br>        render: function () {<br>            return (<br>                    <div><br>                        <label htmlFor=\"phone\">手机号：</label><br>                        <input type='text' id=\"phone\" valueLink={this.linkState('phone')}  /><br>                    </div><br>                );<br>        }<br>    });</p>\n<pre><code>ReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;app&apos;));\n</code></pre><p>##开发工具webpack</p>\n<p>###webpack + react install</p>\n<ul>\n<li>npm init</li>\n<li>npm install –save react react</li>\n<li>npm install –save-dev webpack webpack-dev-server</li>\n<li>npm install –save-dev jsx-loader css-loader file-loader style-loader url-loader</li>\n</ul>\n<p>###Configuring webpack<br>    var webpack = require(‘webpack’);</p>\n<pre><code>module.exports = {\n    // 它定义了打包的入口文件，数组中的文件会按顺序进行，并且它会自行解决依赖问题。\n    entry: {\n        main: &apos;./pages/main.js&apos;,\n    },\n    // 它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径\n    output: {\n        path: __dirname + &apos;/build&apos;,\n        publicPath: &apos;/build/&apos;,\n        filename: &apos;[name].js&apos;\n    },\n    // Webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。\n    // resolve属性中的extensions数组中用于配置程序可以自行补全哪些后缀。\n    // 比如 Hello.jsx 这样的文件就可以直接用 require(./Hello) 引用。\n    resolve: {\n        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.jsx&apos;]\n    },\n    // webpack将所有的资源都看做是模块，而模块就需要加载器\n    module: {\n        loaders: [\n            // loaders 指定 jsx-loader 编译后缀名为 .jsx 的文件，\n            // 建议给含有 JSX 的文件添加 .jsx 后缀，\n            // 当然你也可以直接使用 .js 后缀， 相应的 test 配置正则要修改匹配就是。\n            { test: /\\.js?$/, exclude: /node_modules/, loader: &apos;jsx?harmony&apos; }, \n            { test: /\\.(css)/, loader: &apos;style-loader!css-loader&apos; },\n            // inline base64 URLs for &lt;=8k images, direct URLs for the rest\n            {test: /\\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos; } \n            // loaders: [&apos;react-hot&apos;, &apos;jsx?harmony&apos;]\n            // loaders后面如果跟的不是数组，则会报错：LoadersList.js:81 r.forEach(function(r) \n        ]\n    },\n    // 我们可以在plugin参数中配置我们需要用到的各种各样的插件。\n    plugins: [\n        new webpack.NoErrorsPlugin(),\n    ]\n}\n</code></pre><p>###Webpack 命令<br>启动webpack命令</p>\n<ul>\n<li>webpack -d 提供SourceMaps，方便调试</li>\n<li>webpack -w 提供watch方法，实时进行打包更新</li>\n<li>webpack –colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤</li>\n<li>webpack –progress 输出的接口带进度</li>\n<li>webpack –profile 输出性能数据，可以看到每一步的耗时</li>\n<li>webpack -p 对打包后的文件进行压缩</li>\n<li>webpack –config <filename> 支持指定实用的配置文件，处理release和debug不同的情况</li>\n</ul>\n<p>###配置scripts<br>    “scripts”: {<br>        “locDev”: “webpack -d -w –progress –colors”,<br>        “serDev”: “webpack-dev-server –progress –colors –port 8082”<br>    }</p>\n<p>###运行</p>\n<ul>\n<li>npm run locDev</li>\n<li>npm run serDev</li>\n</ul>\n<p>###React - 热插拔</p>\n<ul>\n<li>npm install –save-dev react-hot-loader</li>\n<li>webpack.config.js: entry 使用数组，并添加 ‘webpack/hot/only-dev-server’</li>\n<li>webpack.config.js: loaders: [‘react-hot’, ‘jsx?harmony’]</li>\n<li>入口文件添加 module.hot.accept()</li>\n<li>启动：webpack-dev-server -d –port 8082 –hot –progress –colors</li>\n</ul>\n<p>###React - 热拔插多个入口</p>\n<ul>\n<li>webpack.config.js: entry:<br>  entry: {<pre><code>main: [&apos;./pages/main/index.js&apos;, &apos;webpack/hot/only-dev-server&apos;],\nhelp: [&apos;./pages/help/index.js&apos;, &apos;webpack/hot/only-dev-server&apos;]\n</code></pre>  }</li>\n</ul>\n<p>##React - render时机</p>\n<p>###批量更新 - 事件回调函数</p>\n<ul>\n<li>事件处理函数中的多次setState/replaceState会被标记为一次批量更新</li>\n<li>事件处理函数本身在React事件机制中是作为一个回调函数被调用，在函数执行完成后才会触发render</li>\n</ul>\n<p>###实时更新 - 其他</p>\n<ul>\n<li>调用setState/replaceState后直接触发render，比如setInterval</li>\n</ul>\n<p>###render流程</p>\n<ul>\n<li>setState/replaceState 修改状态后</li>\n<li>组件添加等待更新的状态列表，并把新的状态压入列表（ReactUpdateQueue.js: enqueueSetState()）</li>\n<li>标记组件为需要重新渲染的组件（dirty components list）ReactUpdates：enqueueUpdate()</li>\n<li>runBatchedUpdates来处理dirty components（调用对应的render）</li>\n</ul>\n<p>##React - React事件系统</p>\n<ol>\n<li>React初始化时会把事件监听 ReactEventListener 注入到 ReactBrowserEventEmitter</li>\n<li>ReactBrowserEventEmitter 是浏览器事件的顶级委托，ReactEventListener 为用户绑定事件的DOM绑定自己的处理函数，并在处理函数中调用用户的事件处理函数，然后理render相关逻辑；</li>\n<li>React 事件系统：<ul>\n<li>浏览器事件的顶级委托（top-level delegation）用来 trap (捕获？) 大多数原生浏览器事件，可以注入事件处理器；</li>\n<li>主线程唯一的工作是注入的 ReactEventListener（是为可插拔事件源准备的事件监听器）；</li>\n<li>转发这些被 trap 原生浏览器事件至 EventPluginHub， EventPluginHub 在提取任何组合事件时会调用对应插件（比如 SimpleEventPlugin ）并返回需要处理的事件列表；</li>\n<li>事件插件包括：ResponderEventPlugin、SimpleEventPlugin、TapEventPlugin、EnterLeaveEventPlugin、ChangeEventPlugin、SelectEventPlugin、BeforeInputEventPlugin</li>\n<li>EventPluginHub 同时会维护Dom、事件名称和事件处理器的Mapping；</li>\n<li>ReactEventListener 监听 EventPluginHub 的事件，并处理事件派发及事件响应</li>\n<li>ReactEventListener 的事件响应函数会处理用户的事件处理函数</li>\n</ul>\n</li>\n<li>React组件及组件树的渲染都是在ReactMount里面执行</li>\n<li>mount组件时，初始化组件并注册事件监听（mountComponent）</li>\n<li>事件响应由ReactEventListener的dispatchEvent触发，通过EventPluginHub找到事件处理相关 </li>\n<li>我们的事件函数作为回调处理</li>\n</ol>\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-03-23T11:49:13.475Z","updated":"2016-03-23T11:37:28.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimvsajy000001sjai75wuvb7","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"reactStart","date":"2016-04-11T09:15:05.000Z","_content":"React -start\n\n## React\n- Facebook\n- MVC中的V：M -> V\n- 和Flux搭配，可以做到MVVM\n- 默认转义所有字符串，防止XSS攻击\n- React认为HTML标签及生成这些标签的代码间存在着内在联系，React设计允许你在构建标签结构时充分利用JS的强大能力，而不必在笨拙的模板语言上浪费时间\n\n## Why React?\n- 简单:  \n  model改变后，react自动处理用户界面的更新；\n- 声明式:  \n  更新界面时，react仅仅会更新变化的部分；\n- 虚拟Dom:  \n  React在内存中维护一个快速响应的DOM描述，并利用他来快速地计算出差异，然后更新浏览器中的DOM;\n\n## React 最需要走心的工作\n- 构建可组合的、可复用的组件;\n- 组件的好处：代码复用、测试简单;\n\n## React - hello world\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>React Hello World</title>\n            <script type=\"text/javascript\" src=\"./react.js\"></script>\n        </head>\n        <body>\n            <div id=\"app\"></div>\n\n            <script type=\"text/javascript\">\n                function h1 (text, style) {\n                    return '<h1>'' + text + '</h1>';\n                }\n                var el = React.createElement('h1', {style: {color: '#00f'}}, 'Hello World!');\n                React.render(el, document.getElementById('app'));\n            </script>\n        </body>\n    </html>\n\n\n## React - 类似的工作\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>React Hello World</title>\n        </head>\n        <body>\n            <div id=\"app\"></div>\n\n            <script type=\"text/javascript\">\n                  function h1 (text, style) {\n                    var result;\n                    var styleStr;\n\n                    if (style) {\n                        styleStr = 'style=\"';\n                        for (var name in style) {\n                            styleStr += name + ':' + style[name] + ';'; \n                        }\n                        styleStr += '\"';\n                    }\n\n                    if (styleStr) {\n                        result = '<h1 ' + styleStr + '>' + text + '</h1>';\n                    } else {\n                        result = '<h1>' + text + '</h1>';\n                    }\n\n                      return result;\n                  }\n\n                  function render(target, container) {\n                    container.innerHTML = target;\n                  }\n\n                  render(h1('Hello World!', {color: '#00f'}), document.getElementById('app'));\n            </script>\n        </body>\n    </html>\n\n## JSX - Javascript XML\n- 优势：\n    + 类HTML标记语言，都是熟悉的语法\n    + 抽象了React Element的创建过程\n    + 简单直观，可以提升效率且成本很低\n- 劣势：\n    + 在浏览器运行会很慢，项目中需要预处理\n\n## JSX - hello world\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>React Hello World</title>\n            <script type=\"text/javascript\" src=\"./react.js\"></script>\n            <script type=\"text/javascript\" src=\"./JSXTransformer.js\"></script>\n        </head>\n        <body>\n            <div id=\"app\"></div>\n\n            <script type=\"text/jsx\">\n                React.render(<h1>Hello World, JSX!</h1>, document.getElementById('app'));\n            </script>\n        </body>\n    </html>\n\n## JSX - 工作原理\n1. 使用JSXTransformer通过监听windows的onload/DOMContentLoaded，来遍历所有\"text/jsx\"脚本标签\n2. 获取每个标签的source code并把JSX代码转为react的虚拟dom代码\n3. 最后把react代码添加到新建的script标签中\n4. 预编译的插件是同理，只不过发生在编译阶段\n\n## JSX Tips\n- JSX设置动态属性时，用花括号包裹Javascript变量\n- 也可以把属性设置为一个函数的调用返回结果\n- 条件判断支持：三元运输符、&&、||\n- key: 列表时会建议使用，重用组件提升渲染性能\n- refs：获取创建dom的描述对象 or 获取创建dom的对象, this.refs.usernameInput.getDOMNode() x\n- HTML关键词：for > htmlFor, class > className, style: {}\n- 事件统一使用驼峰式\n\n## React Tips\n- React创建的class名称首字母必须大写，不然找不到\n- JSX可以不换行，换行时必须使用（）包装，不然会报非法组件错误；\n- 只能有根一个节点，多个节点会抛错\n- 内联样式支持对象，名称使用驼峰式，否则不起作用，fontSize\n- 返回：null、false、React组件\n\n## 组件的复合\n- 复用那些接口定义良好的组件来开发新的模块化组件\n- 官网提供的获取子组件的方法：this.props.children X\n- 组件支持 ref=\"refId\"，访问元素：this.refs.refId\n\n## React - 组件数据流\n- props\n- state\n\n## React - dom对象\n- refs\n\n## React - 组件生命周期\n\n### 组件类创建时\n- getDefaultProps\n\n### 初始化\n- getinitialState\n\n### 挂载\n- componentWillMount\n- render\n- componentDidMount\n\n### 更新\n- componentWillReceiveProps\n- shouldComponentUpdate\n- componentWillUpdate\n- render\n- componentDidUpdate\n\n### 卸载\n- componentWillUnmount\n\n### Class Create Pahses:\n    + getDefaultProps: invoke while class created and be shared between instances.\n### Initialization Pahses:\n    + constructor: Initialization of state. The instance is now retained.\n    + componentWillMount\n    + render\n    + [children's constructors]\n        - [children's componentWillMount and render]\n        - [children's componentDidMount]\n    + componentDidMount\n### Update Phases:\n    + componentWillReceiveProps (only called if parent updated)\n    + shouldComponentUpdate (default: always returns true to prevent subtle bugs)\n        - componentWillUpdate\n        - render\n            + [children's constructors or receive props phases]\n        - componentDidUpdate\n### Unmount Phases:\n    + componentWillUnmount\n        - [children's componentWillUnmount]\n        - [children destroyed]\n    + (destroyed): The instance is now blank, released by React and ready for GC\n\n## Mixin\n- 独立于组件的\n- 多个组件可共享的\n- 对象类型的配置\n\n## Mixin - DEMO\n    var userMixin = {\n        getDefaultProps: function () {\n            return {\n                username: '小红'\n            };\n        },\n        renderUser: function (welcomeMsg) {\n            return (\n                    <div className=\"user-wrap\">\n                        <span ref=\"welcomeDesc\" className=\"welcome-user\">{welcomeMsg}</span>\n                    </div>\n                );\n        },\n        componentDidMount: function () {\n            console.log('mount');\n        }\n    }\n\n\n    var Header = React.createClass({\n        mixins: [userMixin],\n        getInitialState: function () {\n            return {\n                systemName: 'React平台Header'\n            };\n        },\n        render: function () {\n            var welcomeMsg;\n            if (this.props.username) {\n                welcomeMsg = '欢迎，' + this.props.username + '！'\n            };\n            return (\n                    <div className=\"header-content\">\n                        <h1>{this.state.systemName}</h1>\n                        {\n                            welcomeMsg ? this.renderUser(welcomeMsg) : null\n                        }\n                    </div>\n                );\n        }\n    });\n\n## React - Mixin原理\n- Mixin必须是一个对象\n- 在React.createClass（源码：ReactClass > createClass: function (spec) {...}会把Mixin对象融入react对象\n- 融入过程是通过遍历Mixin的属性（for..in）逐个添加到react对象得prototype上（mixSpecIntoComponent）\n- 添加之前需要判断是否已经有了相同属性，且此属性是否支持覆盖、是否支持多个、是否需要合并\n- 添加的方式是：覆盖（override）、合并、多个函数链\n\n## React - Mixin融合方式的标准\n- 一些基础的属性是不允许覆盖的，比如：setProps、replaceProps、replaceState、isMounted\n- 渲染的属性是不允许定义多次的，比如：render、shouldComponentUpdate\n- 需要合并的是那些有返回值的，比如：getDefaultProps、getInitialState\n- 其他的都支持多个函数链的形式（先执行已有的，在执行Mixin的），比如：willMount、didMount、willUpdate、didUpdate等等\n\n## React - PureRenderMixin\n- React组件的渲染函数是“纯粹的” - 同样的props和state，渲染出同样的效果\n- 可以提升性能 - 在shouldComponentUpdate里检查props、state是否会发生变化\n- shouldComponentUpdate的判断结果会影响整个组件子树\n- 据说props、state比较是浅比较，不适合(特别)复杂的数据结构\n\n## PureRenderMixin - shouldComponentUpdate: shallow check\n    /**\n     - Performs equality by iterating through keys on an object and returning false\n     - when any key has values which are not strictly equal between the arguments.\n     - Returns true when the values of all keys are strictly equal.\n     */\n    function shallowEqual(objA, objB) {\n      if (objA === objB) {\n        return true;\n      }\n\n      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n        return false;\n      }\n\n      var keysA = Object.keys(objA);\n      var keysB = Object.keys(objB);\n\n      if (keysA.length !== keysB.length) {\n        return false;\n      }\n\n      // Test for A's keys different from B.\n      var bHasOwnProperty = hasOwnProperty.bind(objB);\n      for (var i = 0; i < keysA.length; i++) {\n        if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n## React - 表单组件\n\n### 受用户交互影响的属性\n- value，用于 input、textarea 组件\n- checked，用于类型为 checkbox 或者 radio 的 input 组件\n- selected，用于 option 组件\n\n### onChange 回调函数来监听组件变化\n- input 或 textarea 的 value 发生变化时。\n- input 的 checked 状态改变时。\n- option 的 selected 状态改变时。\n\n### Controlled Components - 受限组件\n- 设置了 value 的 input 是一个受限组件\n\n### 受限组件 - DEMO\n    var App = React.createClass({\n        getInitialState: function () {\n            return {\n                phone: '15821466666'\n            };\n        },\n        render: function () {\n            return (\n                    <div>\n                        <label htmlFor=\"phone\">手机号：</label>\n                        <input type='text' id=\"phone\" value={this.state.phone} onChange={this.phoneChangeHlr} />\n                    </div>\n                );\n        },\n        phoneChangeHlr: function (event) {\n            this.setState({phone: event.target.value});\n        }\n    });\n\n    ReactDOM.render(<App />, document.getElementById('app'));\n\n## React - add-ons\n- TransitionGroup和CSSTransitionGroup\n- LinkedStateMixin - 用于简化用户表单输入数据和组件 state 之间的双向数据绑定\n- classSet，用于更加干净简洁地操作 DOM 中的 class 字符串\n- cloneWithProps，用于实现 React 组件浅复制，同时改变它们的 props \n- update，一个辅助方法，使得在 JavaScript 中处理不可变数据更加容易\n- PureRenderMixin，在某些场景下的性能检测器\n\n## LinkedStateMixin - DEMO\n    var LinkedStateMixin = React.addons.LinkedStateMixin;\n    var App = React.createClass({\n        mixins: [LinkedStateMixin],\n        getInitialState: function () {\n            return {\n                phone: '15821466666'\n            };\n        },\n        render: function () {\n            return (\n                    <div>\n                        <label htmlFor=\"phone\">手机号：</label>\n                        <input type='text' id=\"phone\" valueLink={this.linkState('phone')}  />\n                    </div>\n                );\n        }\n    });\n\n    ReactDOM.render(<App />, document.getElementById('app'));\n\n\n## 开发工具webpack\n\n### webpack + react install\n- npm init\n- npm install --save react react\n- npm install --save-dev webpack webpack-dev-server\n- npm install --save-dev jsx-loader css-loader file-loader style-loader url-loader\n\n### Configuring webpack\n    var webpack = require('webpack');\n\n    module.exports = {\n        // 它定义了打包的入口文件，数组中的文件会按顺序进行，并且它会自行解决依赖问题。\n        entry: {\n            main: './pages/main.js',\n        },\n        // 它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径\n        output: {\n            path: __dirname + '/build',\n            publicPath: '/build/',\n            filename: '[name].js'\n        },\n        // Webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。\n        // resolve属性中的extensions数组中用于配置程序可以自行补全哪些后缀。\n        // 比如 Hello.jsx 这样的文件就可以直接用 require(./Hello) 引用。\n        resolve: {\n            extensions: ['', '.js', '.jsx']\n        },\n        // webpack将所有的资源都看做是模块，而模块就需要加载器\n        module: {\n            loaders: [\n                // loaders 指定 jsx-loader 编译后缀名为 .jsx 的文件，\n                // 建议给含有 JSX 的文件添加 .jsx 后缀，\n                // 当然你也可以直接使用 .js 后缀， 相应的 test 配置正则要修改匹配就是。\n                { test: /\\.js?$/, exclude: /node_modules/, loader: 'jsx?harmony' }, \n                { test: /\\.(css)/, loader: 'style-loader!css-loader' },\n                // inline base64 URLs for <=8k images, direct URLs for the rest\n                {test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192' } \n                // loaders: ['react-hot', 'jsx?harmony']\n                // loaders后面如果跟的不是数组，则会报错：LoadersList.js:81 r.forEach(function(r) \n            ]\n        },\n        // 我们可以在plugin参数中配置我们需要用到的各种各样的插件。\n        plugins: [\n            new webpack.NoErrorsPlugin(),\n        ]\n    }\n\n### Webpack 命令\n启动webpack命令\n- webpack -d 提供SourceMaps，方便调试\n- webpack -w 提供watch方法，实时进行打包更新\n- webpack --colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤\n- webpack --progress 输出的接口带进度\n- webpack --profile 输出性能数据，可以看到每一步的耗时\n- webpack -p 对打包后的文件进行压缩\n- webpack --config <filename> 支持指定实用的配置文件，处理release和debug不同的情况\n\n### 配置scripts\n    \"scripts\": {\n        \"locDev\": \"webpack -d -w --progress --colors\",\n        \"serDev\": \"webpack-dev-server --progress --colors --port 8082\"\n    }\n\n### 运行\n- npm run locDev\n- npm run serDev\n\n### React - 热插拔\n- npm install --save-dev react-hot-loader\n- webpack.config.js: entry 使用数组，并添加 'webpack/hot/only-dev-server'\n- webpack.config.js: loaders: ['react-hot', 'jsx?harmony']\n- 入口文件添加 module.hot.accept()\n- 启动：webpack-dev-server -d --port 8082 --hot --progress --colors\n\n### React - 热拔插多个入口\n- webpack.config.js: entry:\n    entry: {\n        main: ['./pages/main/index.js', 'webpack/hot/only-dev-server'],\n        help: ['./pages/help/index.js', 'webpack/hot/only-dev-server']\n    }\n\n## React - render时机\n### 批量更新 - 事件回调函数\n- 事件处理函数中的多次setState/replaceState会被标记为一次批量更新\n- 事件处理函数本身在React事件机制中是作为一个回调函数被调用，在函数执行完成后才会触发render\n\n### 实时更新 - 其他\n- 调用setState/replaceState后直接触发render，比如setInterval\n\n### render流程\n- setState/replaceState 修改状态后\n- 组件添加等待更新的状态列表，并把新的状态压入列表（ReactUpdateQueue.js: enqueueSetState()）\n- 标记组件为需要重新渲染的组件（dirty components list）ReactUpdates：enqueueUpdate()\n- runBatchedUpdates来处理dirty components（调用对应的render）\n\n## React - React事件系统\n1. React初始化时会把事件监听 ReactEventListener 注入到 ReactBrowserEventEmitter\n2. ReactBrowserEventEmitter 是浏览器事件的顶级委托，ReactEventListener 为用户绑定事件的DOM绑定自己的处理函数，并在处理函数中调用用户的事件处理函数，然后理render相关逻辑；\n3. React 事件系统：\n    - 浏览器事件的顶级委托（top-level delegation）用来 trap (捕获？) 大多数原生浏览器事件，可以注入事件处理器；\n    - 主线程唯一的工作是注入的 ReactEventListener（是为可插拔事件源准备的事件监听器）；\n    - 转发这些被 trap 原生浏览器事件至 EventPluginHub， EventPluginHub 在提取任何组合事件时会调用对应插件（比如 SimpleEventPlugin ）并返回需要处理的事件列表；\n    - 事件插件包括：ResponderEventPlugin、SimpleEventPlugin、TapEventPlugin、EnterLeaveEventPlugin、ChangeEventPlugin、SelectEventPlugin、BeforeInputEventPlugin\n    - EventPluginHub 同时会维护Dom、事件名称和事件处理器的Mapping；\n    - ReactEventListener 监听 EventPluginHub 的事件，并处理事件派发及事件响应\n    - ReactEventListener 的事件响应函数会处理用户的事件处理函数\n4. React组件及组件树的渲染都是在ReactMount里面执行\n5. \nmount组件时，初始化组件并注册事件监听（mountComponent）\n6. 事件响应由ReactEventListener的dispatchEvent触发，通过EventPluginHub找到事件处理相关 \n7. 我们的事件函数作为回调处理\n","source":"_posts/reactStart.md","raw":"---\ntitle: reactStart\ndate: 2016-04-11 17:15:05\ntags: react\n---\nReact -start\n\n## React\n- Facebook\n- MVC中的V：M -> V\n- 和Flux搭配，可以做到MVVM\n- 默认转义所有字符串，防止XSS攻击\n- React认为HTML标签及生成这些标签的代码间存在着内在联系，React设计允许你在构建标签结构时充分利用JS的强大能力，而不必在笨拙的模板语言上浪费时间\n\n## Why React?\n- 简单:  \n  model改变后，react自动处理用户界面的更新；\n- 声明式:  \n  更新界面时，react仅仅会更新变化的部分；\n- 虚拟Dom:  \n  React在内存中维护一个快速响应的DOM描述，并利用他来快速地计算出差异，然后更新浏览器中的DOM;\n\n## React 最需要走心的工作\n- 构建可组合的、可复用的组件;\n- 组件的好处：代码复用、测试简单;\n\n## React - hello world\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>React Hello World</title>\n            <script type=\"text/javascript\" src=\"./react.js\"></script>\n        </head>\n        <body>\n            <div id=\"app\"></div>\n\n            <script type=\"text/javascript\">\n                function h1 (text, style) {\n                    return '<h1>'' + text + '</h1>';\n                }\n                var el = React.createElement('h1', {style: {color: '#00f'}}, 'Hello World!');\n                React.render(el, document.getElementById('app'));\n            </script>\n        </body>\n    </html>\n\n\n## React - 类似的工作\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>React Hello World</title>\n        </head>\n        <body>\n            <div id=\"app\"></div>\n\n            <script type=\"text/javascript\">\n                  function h1 (text, style) {\n                    var result;\n                    var styleStr;\n\n                    if (style) {\n                        styleStr = 'style=\"';\n                        for (var name in style) {\n                            styleStr += name + ':' + style[name] + ';'; \n                        }\n                        styleStr += '\"';\n                    }\n\n                    if (styleStr) {\n                        result = '<h1 ' + styleStr + '>' + text + '</h1>';\n                    } else {\n                        result = '<h1>' + text + '</h1>';\n                    }\n\n                      return result;\n                  }\n\n                  function render(target, container) {\n                    container.innerHTML = target;\n                  }\n\n                  render(h1('Hello World!', {color: '#00f'}), document.getElementById('app'));\n            </script>\n        </body>\n    </html>\n\n## JSX - Javascript XML\n- 优势：\n    + 类HTML标记语言，都是熟悉的语法\n    + 抽象了React Element的创建过程\n    + 简单直观，可以提升效率且成本很低\n- 劣势：\n    + 在浏览器运行会很慢，项目中需要预处理\n\n## JSX - hello world\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>React Hello World</title>\n            <script type=\"text/javascript\" src=\"./react.js\"></script>\n            <script type=\"text/javascript\" src=\"./JSXTransformer.js\"></script>\n        </head>\n        <body>\n            <div id=\"app\"></div>\n\n            <script type=\"text/jsx\">\n                React.render(<h1>Hello World, JSX!</h1>, document.getElementById('app'));\n            </script>\n        </body>\n    </html>\n\n## JSX - 工作原理\n1. 使用JSXTransformer通过监听windows的onload/DOMContentLoaded，来遍历所有\"text/jsx\"脚本标签\n2. 获取每个标签的source code并把JSX代码转为react的虚拟dom代码\n3. 最后把react代码添加到新建的script标签中\n4. 预编译的插件是同理，只不过发生在编译阶段\n\n## JSX Tips\n- JSX设置动态属性时，用花括号包裹Javascript变量\n- 也可以把属性设置为一个函数的调用返回结果\n- 条件判断支持：三元运输符、&&、||\n- key: 列表时会建议使用，重用组件提升渲染性能\n- refs：获取创建dom的描述对象 or 获取创建dom的对象, this.refs.usernameInput.getDOMNode() x\n- HTML关键词：for > htmlFor, class > className, style: {}\n- 事件统一使用驼峰式\n\n## React Tips\n- React创建的class名称首字母必须大写，不然找不到\n- JSX可以不换行，换行时必须使用（）包装，不然会报非法组件错误；\n- 只能有根一个节点，多个节点会抛错\n- 内联样式支持对象，名称使用驼峰式，否则不起作用，fontSize\n- 返回：null、false、React组件\n\n## 组件的复合\n- 复用那些接口定义良好的组件来开发新的模块化组件\n- 官网提供的获取子组件的方法：this.props.children X\n- 组件支持 ref=\"refId\"，访问元素：this.refs.refId\n\n## React - 组件数据流\n- props\n- state\n\n## React - dom对象\n- refs\n\n## React - 组件生命周期\n\n### 组件类创建时\n- getDefaultProps\n\n### 初始化\n- getinitialState\n\n### 挂载\n- componentWillMount\n- render\n- componentDidMount\n\n### 更新\n- componentWillReceiveProps\n- shouldComponentUpdate\n- componentWillUpdate\n- render\n- componentDidUpdate\n\n### 卸载\n- componentWillUnmount\n\n### Class Create Pahses:\n    + getDefaultProps: invoke while class created and be shared between instances.\n### Initialization Pahses:\n    + constructor: Initialization of state. The instance is now retained.\n    + componentWillMount\n    + render\n    + [children's constructors]\n        - [children's componentWillMount and render]\n        - [children's componentDidMount]\n    + componentDidMount\n### Update Phases:\n    + componentWillReceiveProps (only called if parent updated)\n    + shouldComponentUpdate (default: always returns true to prevent subtle bugs)\n        - componentWillUpdate\n        - render\n            + [children's constructors or receive props phases]\n        - componentDidUpdate\n### Unmount Phases:\n    + componentWillUnmount\n        - [children's componentWillUnmount]\n        - [children destroyed]\n    + (destroyed): The instance is now blank, released by React and ready for GC\n\n## Mixin\n- 独立于组件的\n- 多个组件可共享的\n- 对象类型的配置\n\n## Mixin - DEMO\n    var userMixin = {\n        getDefaultProps: function () {\n            return {\n                username: '小红'\n            };\n        },\n        renderUser: function (welcomeMsg) {\n            return (\n                    <div className=\"user-wrap\">\n                        <span ref=\"welcomeDesc\" className=\"welcome-user\">{welcomeMsg}</span>\n                    </div>\n                );\n        },\n        componentDidMount: function () {\n            console.log('mount');\n        }\n    }\n\n\n    var Header = React.createClass({\n        mixins: [userMixin],\n        getInitialState: function () {\n            return {\n                systemName: 'React平台Header'\n            };\n        },\n        render: function () {\n            var welcomeMsg;\n            if (this.props.username) {\n                welcomeMsg = '欢迎，' + this.props.username + '！'\n            };\n            return (\n                    <div className=\"header-content\">\n                        <h1>{this.state.systemName}</h1>\n                        {\n                            welcomeMsg ? this.renderUser(welcomeMsg) : null\n                        }\n                    </div>\n                );\n        }\n    });\n\n## React - Mixin原理\n- Mixin必须是一个对象\n- 在React.createClass（源码：ReactClass > createClass: function (spec) {...}会把Mixin对象融入react对象\n- 融入过程是通过遍历Mixin的属性（for..in）逐个添加到react对象得prototype上（mixSpecIntoComponent）\n- 添加之前需要判断是否已经有了相同属性，且此属性是否支持覆盖、是否支持多个、是否需要合并\n- 添加的方式是：覆盖（override）、合并、多个函数链\n\n## React - Mixin融合方式的标准\n- 一些基础的属性是不允许覆盖的，比如：setProps、replaceProps、replaceState、isMounted\n- 渲染的属性是不允许定义多次的，比如：render、shouldComponentUpdate\n- 需要合并的是那些有返回值的，比如：getDefaultProps、getInitialState\n- 其他的都支持多个函数链的形式（先执行已有的，在执行Mixin的），比如：willMount、didMount、willUpdate、didUpdate等等\n\n## React - PureRenderMixin\n- React组件的渲染函数是“纯粹的” - 同样的props和state，渲染出同样的效果\n- 可以提升性能 - 在shouldComponentUpdate里检查props、state是否会发生变化\n- shouldComponentUpdate的判断结果会影响整个组件子树\n- 据说props、state比较是浅比较，不适合(特别)复杂的数据结构\n\n## PureRenderMixin - shouldComponentUpdate: shallow check\n    /**\n     - Performs equality by iterating through keys on an object and returning false\n     - when any key has values which are not strictly equal between the arguments.\n     - Returns true when the values of all keys are strictly equal.\n     */\n    function shallowEqual(objA, objB) {\n      if (objA === objB) {\n        return true;\n      }\n\n      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n        return false;\n      }\n\n      var keysA = Object.keys(objA);\n      var keysB = Object.keys(objB);\n\n      if (keysA.length !== keysB.length) {\n        return false;\n      }\n\n      // Test for A's keys different from B.\n      var bHasOwnProperty = hasOwnProperty.bind(objB);\n      for (var i = 0; i < keysA.length; i++) {\n        if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n## React - 表单组件\n\n### 受用户交互影响的属性\n- value，用于 input、textarea 组件\n- checked，用于类型为 checkbox 或者 radio 的 input 组件\n- selected，用于 option 组件\n\n### onChange 回调函数来监听组件变化\n- input 或 textarea 的 value 发生变化时。\n- input 的 checked 状态改变时。\n- option 的 selected 状态改变时。\n\n### Controlled Components - 受限组件\n- 设置了 value 的 input 是一个受限组件\n\n### 受限组件 - DEMO\n    var App = React.createClass({\n        getInitialState: function () {\n            return {\n                phone: '15821466666'\n            };\n        },\n        render: function () {\n            return (\n                    <div>\n                        <label htmlFor=\"phone\">手机号：</label>\n                        <input type='text' id=\"phone\" value={this.state.phone} onChange={this.phoneChangeHlr} />\n                    </div>\n                );\n        },\n        phoneChangeHlr: function (event) {\n            this.setState({phone: event.target.value});\n        }\n    });\n\n    ReactDOM.render(<App />, document.getElementById('app'));\n\n## React - add-ons\n- TransitionGroup和CSSTransitionGroup\n- LinkedStateMixin - 用于简化用户表单输入数据和组件 state 之间的双向数据绑定\n- classSet，用于更加干净简洁地操作 DOM 中的 class 字符串\n- cloneWithProps，用于实现 React 组件浅复制，同时改变它们的 props \n- update，一个辅助方法，使得在 JavaScript 中处理不可变数据更加容易\n- PureRenderMixin，在某些场景下的性能检测器\n\n## LinkedStateMixin - DEMO\n    var LinkedStateMixin = React.addons.LinkedStateMixin;\n    var App = React.createClass({\n        mixins: [LinkedStateMixin],\n        getInitialState: function () {\n            return {\n                phone: '15821466666'\n            };\n        },\n        render: function () {\n            return (\n                    <div>\n                        <label htmlFor=\"phone\">手机号：</label>\n                        <input type='text' id=\"phone\" valueLink={this.linkState('phone')}  />\n                    </div>\n                );\n        }\n    });\n\n    ReactDOM.render(<App />, document.getElementById('app'));\n\n\n## 开发工具webpack\n\n### webpack + react install\n- npm init\n- npm install --save react react\n- npm install --save-dev webpack webpack-dev-server\n- npm install --save-dev jsx-loader css-loader file-loader style-loader url-loader\n\n### Configuring webpack\n    var webpack = require('webpack');\n\n    module.exports = {\n        // 它定义了打包的入口文件，数组中的文件会按顺序进行，并且它会自行解决依赖问题。\n        entry: {\n            main: './pages/main.js',\n        },\n        // 它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径\n        output: {\n            path: __dirname + '/build',\n            publicPath: '/build/',\n            filename: '[name].js'\n        },\n        // Webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。\n        // resolve属性中的extensions数组中用于配置程序可以自行补全哪些后缀。\n        // 比如 Hello.jsx 这样的文件就可以直接用 require(./Hello) 引用。\n        resolve: {\n            extensions: ['', '.js', '.jsx']\n        },\n        // webpack将所有的资源都看做是模块，而模块就需要加载器\n        module: {\n            loaders: [\n                // loaders 指定 jsx-loader 编译后缀名为 .jsx 的文件，\n                // 建议给含有 JSX 的文件添加 .jsx 后缀，\n                // 当然你也可以直接使用 .js 后缀， 相应的 test 配置正则要修改匹配就是。\n                { test: /\\.js?$/, exclude: /node_modules/, loader: 'jsx?harmony' }, \n                { test: /\\.(css)/, loader: 'style-loader!css-loader' },\n                // inline base64 URLs for <=8k images, direct URLs for the rest\n                {test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192' } \n                // loaders: ['react-hot', 'jsx?harmony']\n                // loaders后面如果跟的不是数组，则会报错：LoadersList.js:81 r.forEach(function(r) \n            ]\n        },\n        // 我们可以在plugin参数中配置我们需要用到的各种各样的插件。\n        plugins: [\n            new webpack.NoErrorsPlugin(),\n        ]\n    }\n\n### Webpack 命令\n启动webpack命令\n- webpack -d 提供SourceMaps，方便调试\n- webpack -w 提供watch方法，实时进行打包更新\n- webpack --colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤\n- webpack --progress 输出的接口带进度\n- webpack --profile 输出性能数据，可以看到每一步的耗时\n- webpack -p 对打包后的文件进行压缩\n- webpack --config <filename> 支持指定实用的配置文件，处理release和debug不同的情况\n\n### 配置scripts\n    \"scripts\": {\n        \"locDev\": \"webpack -d -w --progress --colors\",\n        \"serDev\": \"webpack-dev-server --progress --colors --port 8082\"\n    }\n\n### 运行\n- npm run locDev\n- npm run serDev\n\n### React - 热插拔\n- npm install --save-dev react-hot-loader\n- webpack.config.js: entry 使用数组，并添加 'webpack/hot/only-dev-server'\n- webpack.config.js: loaders: ['react-hot', 'jsx?harmony']\n- 入口文件添加 module.hot.accept()\n- 启动：webpack-dev-server -d --port 8082 --hot --progress --colors\n\n### React - 热拔插多个入口\n- webpack.config.js: entry:\n    entry: {\n        main: ['./pages/main/index.js', 'webpack/hot/only-dev-server'],\n        help: ['./pages/help/index.js', 'webpack/hot/only-dev-server']\n    }\n\n## React - render时机\n### 批量更新 - 事件回调函数\n- 事件处理函数中的多次setState/replaceState会被标记为一次批量更新\n- 事件处理函数本身在React事件机制中是作为一个回调函数被调用，在函数执行完成后才会触发render\n\n### 实时更新 - 其他\n- 调用setState/replaceState后直接触发render，比如setInterval\n\n### render流程\n- setState/replaceState 修改状态后\n- 组件添加等待更新的状态列表，并把新的状态压入列表（ReactUpdateQueue.js: enqueueSetState()）\n- 标记组件为需要重新渲染的组件（dirty components list）ReactUpdates：enqueueUpdate()\n- runBatchedUpdates来处理dirty components（调用对应的render）\n\n## React - React事件系统\n1. React初始化时会把事件监听 ReactEventListener 注入到 ReactBrowserEventEmitter\n2. ReactBrowserEventEmitter 是浏览器事件的顶级委托，ReactEventListener 为用户绑定事件的DOM绑定自己的处理函数，并在处理函数中调用用户的事件处理函数，然后理render相关逻辑；\n3. React 事件系统：\n    - 浏览器事件的顶级委托（top-level delegation）用来 trap (捕获？) 大多数原生浏览器事件，可以注入事件处理器；\n    - 主线程唯一的工作是注入的 ReactEventListener（是为可插拔事件源准备的事件监听器）；\n    - 转发这些被 trap 原生浏览器事件至 EventPluginHub， EventPluginHub 在提取任何组合事件时会调用对应插件（比如 SimpleEventPlugin ）并返回需要处理的事件列表；\n    - 事件插件包括：ResponderEventPlugin、SimpleEventPlugin、TapEventPlugin、EnterLeaveEventPlugin、ChangeEventPlugin、SelectEventPlugin、BeforeInputEventPlugin\n    - EventPluginHub 同时会维护Dom、事件名称和事件处理器的Mapping；\n    - ReactEventListener 监听 EventPluginHub 的事件，并处理事件派发及事件响应\n    - ReactEventListener 的事件响应函数会处理用户的事件处理函数\n4. React组件及组件树的渲染都是在ReactMount里面执行\n5. \nmount组件时，初始化组件并注册事件监听（mountComponent）\n6. 事件响应由ReactEventListener的dispatchEvent触发，通过EventPluginHub找到事件处理相关 \n7. 我们的事件函数作为回调处理\n","slug":"reactStart","published":1,"updated":"2016-04-12T02:34:02.505Z","_id":"cimvsajy900021sja47e28hob","comments":1,"layout":"post","photos":[],"link":"","content":"<p>React -start</p>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><ul>\n<li>Facebook</li>\n<li>MVC中的V：M -&gt; V</li>\n<li>和Flux搭配，可以做到MVVM</li>\n<li>默认转义所有字符串，防止XSS攻击</li>\n<li>React认为HTML标签及生成这些标签的代码间存在着内在联系，React设计允许你在构建标签结构时充分利用JS的强大能力，而不必在笨拙的模板语言上浪费时间</li>\n</ul>\n<h2 id=\"Why-React\"><a href=\"#Why-React\" class=\"headerlink\" title=\"Why React?\"></a>Why React?</h2><ul>\n<li>简单:<br>model改变后，react自动处理用户界面的更新；</li>\n<li>声明式:<br>更新界面时，react仅仅会更新变化的部分；</li>\n<li>虚拟Dom:<br>React在内存中维护一个快速响应的DOM描述，并利用他来快速地计算出差异，然后更新浏览器中的DOM;</li>\n</ul>\n<h2 id=\"React-最需要走心的工作\"><a href=\"#React-最需要走心的工作\" class=\"headerlink\" title=\"React 最需要走心的工作\"></a>React 最需要走心的工作</h2><ul>\n<li>构建可组合的、可复用的组件;</li>\n<li>组件的好处：代码复用、测试简单;</li>\n</ul>\n<h2 id=\"React-hello-world\"><a href=\"#React-hello-world\" class=\"headerlink\" title=\"React - hello world\"></a>React - hello world</h2><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;./react.js&quot;&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n        &lt;script type=&quot;text/javascript&quot;&gt;\n            function h1 (text, style) {\n                return &apos;&lt;h1&gt;&apos;&apos; + text + &apos;&lt;/h1&gt;&apos;;\n            }\n            var el = React.createElement(&apos;h1&apos;, {style: {color: &apos;#00f&apos;}}, &apos;Hello World!&apos;);\n            React.render(el, document.getElementById(&apos;app&apos;));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"React-类似的工作\"><a href=\"#React-类似的工作\" class=\"headerlink\" title=\"React - 类似的工作\"></a>React - 类似的工作</h2><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n        &lt;script type=&quot;text/javascript&quot;&gt;\n              function h1 (text, style) {\n                var result;\n                var styleStr;\n\n                if (style) {\n                    styleStr = &apos;style=&quot;&apos;;\n                    for (var name in style) {\n                        styleStr += name + &apos;:&apos; + style[name] + &apos;;&apos;; \n                    }\n                    styleStr += &apos;&quot;&apos;;\n                }\n\n                if (styleStr) {\n                    result = &apos;&lt;h1 &apos; + styleStr + &apos;&gt;&apos; + text + &apos;&lt;/h1&gt;&apos;;\n                } else {\n                    result = &apos;&lt;h1&gt;&apos; + text + &apos;&lt;/h1&gt;&apos;;\n                }\n\n                  return result;\n              }\n\n              function render(target, container) {\n                container.innerHTML = target;\n              }\n\n              render(h1(&apos;Hello World!&apos;, {color: &apos;#00f&apos;}), document.getElementById(&apos;app&apos;));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"JSX-Javascript-XML\"><a href=\"#JSX-Javascript-XML\" class=\"headerlink\" title=\"JSX - Javascript XML\"></a>JSX - Javascript XML</h2><ul>\n<li>优势：<ul>\n<li>类HTML标记语言，都是熟悉的语法</li>\n<li>抽象了React Element的创建过程</li>\n<li>简单直观，可以提升效率且成本很低</li>\n</ul>\n</li>\n<li>劣势：<ul>\n<li>在浏览器运行会很慢，项目中需要预处理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"JSX-hello-world\"><a href=\"#JSX-hello-world\" class=\"headerlink\" title=\"JSX - hello world\"></a>JSX - hello world</h2><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;./react.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;./JSXTransformer.js&quot;&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n        &lt;script type=&quot;text/jsx&quot;&gt;\n            React.render(&lt;h1&gt;Hello World, JSX!&lt;/h1&gt;, document.getElementById(&apos;app&apos;));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"JSX-工作原理\"><a href=\"#JSX-工作原理\" class=\"headerlink\" title=\"JSX - 工作原理\"></a>JSX - 工作原理</h2><ol>\n<li>使用JSXTransformer通过监听windows的onload/DOMContentLoaded，来遍历所有”text/jsx”脚本标签</li>\n<li>获取每个标签的source code并把JSX代码转为react的虚拟dom代码</li>\n<li>最后把react代码添加到新建的script标签中</li>\n<li>预编译的插件是同理，只不过发生在编译阶段</li>\n</ol>\n<h2 id=\"JSX-Tips\"><a href=\"#JSX-Tips\" class=\"headerlink\" title=\"JSX Tips\"></a>JSX Tips</h2><ul>\n<li>JSX设置动态属性时，用花括号包裹Javascript变量</li>\n<li>也可以把属性设置为一个函数的调用返回结果</li>\n<li>条件判断支持：三元运输符、&amp;&amp;、||</li>\n<li>key: 列表时会建议使用，重用组件提升渲染性能</li>\n<li>refs：获取创建dom的描述对象 or 获取创建dom的对象, this.refs.usernameInput.getDOMNode() x</li>\n<li>HTML关键词：for &gt; htmlFor, class &gt; className, style: {}</li>\n<li>事件统一使用驼峰式</li>\n</ul>\n<h2 id=\"React-Tips\"><a href=\"#React-Tips\" class=\"headerlink\" title=\"React Tips\"></a>React Tips</h2><ul>\n<li>React创建的class名称首字母必须大写，不然找不到</li>\n<li>JSX可以不换行，换行时必须使用（）包装，不然会报非法组件错误；</li>\n<li>只能有根一个节点，多个节点会抛错</li>\n<li>内联样式支持对象，名称使用驼峰式，否则不起作用，fontSize</li>\n<li>返回：null、false、React组件</li>\n</ul>\n<h2 id=\"组件的复合\"><a href=\"#组件的复合\" class=\"headerlink\" title=\"组件的复合\"></a>组件的复合</h2><ul>\n<li>复用那些接口定义良好的组件来开发新的模块化组件</li>\n<li>官网提供的获取子组件的方法：this.props.children X</li>\n<li>组件支持 ref=”refId”，访问元素：this.refs.refId</li>\n</ul>\n<h2 id=\"React-组件数据流\"><a href=\"#React-组件数据流\" class=\"headerlink\" title=\"React - 组件数据流\"></a>React - 组件数据流</h2><ul>\n<li>props</li>\n<li>state</li>\n</ul>\n<h2 id=\"React-dom对象\"><a href=\"#React-dom对象\" class=\"headerlink\" title=\"React - dom对象\"></a>React - dom对象</h2><ul>\n<li>refs</li>\n</ul>\n<h2 id=\"React-组件生命周期\"><a href=\"#React-组件生命周期\" class=\"headerlink\" title=\"React - 组件生命周期\"></a>React - 组件生命周期</h2><h3 id=\"组件类创建时\"><a href=\"#组件类创建时\" class=\"headerlink\" title=\"组件类创建时\"></a>组件类创建时</h3><ul>\n<li>getDefaultProps</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ul>\n<li>getinitialState</li>\n</ul>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><ul>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><ul>\n<li>componentWillUnmount</li>\n</ul>\n<h3 id=\"Class-Create-Pahses\"><a href=\"#Class-Create-Pahses\" class=\"headerlink\" title=\"Class Create Pahses:\"></a>Class Create Pahses:</h3><pre><code>+ getDefaultProps: invoke while class created and be shared between instances.\n</code></pre><h3 id=\"Initialization-Pahses\"><a href=\"#Initialization-Pahses\" class=\"headerlink\" title=\"Initialization Pahses:\"></a>Initialization Pahses:</h3><pre><code>+ constructor: Initialization of state. The instance is now retained.\n+ componentWillMount\n+ render\n+ [children&apos;s constructors]\n    - [children&apos;s componentWillMount and render]\n    - [children&apos;s componentDidMount]\n+ componentDidMount\n</code></pre><h3 id=\"Update-Phases\"><a href=\"#Update-Phases\" class=\"headerlink\" title=\"Update Phases:\"></a>Update Phases:</h3><pre><code>+ componentWillReceiveProps (only called if parent updated)\n+ shouldComponentUpdate (default: always returns true to prevent subtle bugs)\n    - componentWillUpdate\n    - render\n        + [children&apos;s constructors or receive props phases]\n    - componentDidUpdate\n</code></pre><h3 id=\"Unmount-Phases\"><a href=\"#Unmount-Phases\" class=\"headerlink\" title=\"Unmount Phases:\"></a>Unmount Phases:</h3><pre><code>+ componentWillUnmount\n    - [children&apos;s componentWillUnmount]\n    - [children destroyed]\n+ (destroyed): The instance is now blank, released by React and ready for GC\n</code></pre><h2 id=\"Mixin\"><a href=\"#Mixin\" class=\"headerlink\" title=\"Mixin\"></a>Mixin</h2><ul>\n<li>独立于组件的</li>\n<li>多个组件可共享的</li>\n<li>对象类型的配置</li>\n</ul>\n<h2 id=\"Mixin-DEMO\"><a href=\"#Mixin-DEMO\" class=\"headerlink\" title=\"Mixin - DEMO\"></a>Mixin - DEMO</h2><pre><code>var userMixin = {\n    getDefaultProps: function () {\n        return {\n            username: &apos;小红&apos;\n        };\n    },\n    renderUser: function (welcomeMsg) {\n        return (\n                &lt;div className=&quot;user-wrap&quot;&gt;\n                    &lt;span ref=&quot;welcomeDesc&quot; className=&quot;welcome-user&quot;&gt;{welcomeMsg}&lt;/span&gt;\n                &lt;/div&gt;\n            );\n    },\n    componentDidMount: function () {\n        console.log(&apos;mount&apos;);\n    }\n}\n\n\nvar Header = React.createClass({\n    mixins: [userMixin],\n    getInitialState: function () {\n        return {\n            systemName: &apos;React平台Header&apos;\n        };\n    },\n    render: function () {\n        var welcomeMsg;\n        if (this.props.username) {\n            welcomeMsg = &apos;欢迎，&apos; + this.props.username + &apos;！&apos;\n        };\n        return (\n                &lt;div className=&quot;header-content&quot;&gt;\n                    &lt;h1&gt;{this.state.systemName}&lt;/h1&gt;\n                    {\n                        welcomeMsg ? this.renderUser(welcomeMsg) : null\n                    }\n                &lt;/div&gt;\n            );\n    }\n});\n</code></pre><h2 id=\"React-Mixin原理\"><a href=\"#React-Mixin原理\" class=\"headerlink\" title=\"React - Mixin原理\"></a>React - Mixin原理</h2><ul>\n<li>Mixin必须是一个对象</li>\n<li>在React.createClass（源码：ReactClass &gt; createClass: function (spec) {…}会把Mixin对象融入react对象</li>\n<li>融入过程是通过遍历Mixin的属性（for..in）逐个添加到react对象得prototype上（mixSpecIntoComponent）</li>\n<li>添加之前需要判断是否已经有了相同属性，且此属性是否支持覆盖、是否支持多个、是否需要合并</li>\n<li>添加的方式是：覆盖（override）、合并、多个函数链</li>\n</ul>\n<h2 id=\"React-Mixin融合方式的标准\"><a href=\"#React-Mixin融合方式的标准\" class=\"headerlink\" title=\"React - Mixin融合方式的标准\"></a>React - Mixin融合方式的标准</h2><ul>\n<li>一些基础的属性是不允许覆盖的，比如：setProps、replaceProps、replaceState、isMounted</li>\n<li>渲染的属性是不允许定义多次的，比如：render、shouldComponentUpdate</li>\n<li>需要合并的是那些有返回值的，比如：getDefaultProps、getInitialState</li>\n<li>其他的都支持多个函数链的形式（先执行已有的，在执行Mixin的），比如：willMount、didMount、willUpdate、didUpdate等等</li>\n</ul>\n<h2 id=\"React-PureRenderMixin\"><a href=\"#React-PureRenderMixin\" class=\"headerlink\" title=\"React - PureRenderMixin\"></a>React - PureRenderMixin</h2><ul>\n<li>React组件的渲染函数是“纯粹的” - 同样的props和state，渲染出同样的效果</li>\n<li>可以提升性能 - 在shouldComponentUpdate里检查props、state是否会发生变化</li>\n<li>shouldComponentUpdate的判断结果会影响整个组件子树</li>\n<li>据说props、state比较是浅比较，不适合(特别)复杂的数据结构</li>\n</ul>\n<h2 id=\"PureRenderMixin-shouldComponentUpdate-shallow-check\"><a href=\"#PureRenderMixin-shouldComponentUpdate-shallow-check\" class=\"headerlink\" title=\"PureRenderMixin - shouldComponentUpdate: shallow check\"></a>PureRenderMixin - shouldComponentUpdate: shallow check</h2><pre><code>/**\n - Performs equality by iterating through keys on an object and returning false\n - when any key has values which are not strictly equal between the arguments.\n - Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== &apos;object&apos; || objA === null || typeof objB !== &apos;object&apos; || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A&apos;s keys different from B.\n  var bHasOwnProperty = hasOwnProperty.bind(objB);\n  for (var i = 0; i &lt; keysA.length; i++) {\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n</code></pre><h2 id=\"React-表单组件\"><a href=\"#React-表单组件\" class=\"headerlink\" title=\"React - 表单组件\"></a>React - 表单组件</h2><h3 id=\"受用户交互影响的属性\"><a href=\"#受用户交互影响的属性\" class=\"headerlink\" title=\"受用户交互影响的属性\"></a>受用户交互影响的属性</h3><ul>\n<li>value，用于 input、textarea 组件</li>\n<li>checked，用于类型为 checkbox 或者 radio 的 input 组件</li>\n<li>selected，用于 option 组件</li>\n</ul>\n<h3 id=\"onChange-回调函数来监听组件变化\"><a href=\"#onChange-回调函数来监听组件变化\" class=\"headerlink\" title=\"onChange 回调函数来监听组件变化\"></a>onChange 回调函数来监听组件变化</h3><ul>\n<li>input 或 textarea 的 value 发生变化时。</li>\n<li>input 的 checked 状态改变时。</li>\n<li>option 的 selected 状态改变时。</li>\n</ul>\n<h3 id=\"Controlled-Components-受限组件\"><a href=\"#Controlled-Components-受限组件\" class=\"headerlink\" title=\"Controlled Components - 受限组件\"></a>Controlled Components - 受限组件</h3><ul>\n<li>设置了 value 的 input 是一个受限组件</li>\n</ul>\n<h3 id=\"受限组件-DEMO\"><a href=\"#受限组件-DEMO\" class=\"headerlink\" title=\"受限组件 - DEMO\"></a>受限组件 - DEMO</h3><pre><code>var App = React.createClass({\n    getInitialState: function () {\n        return {\n            phone: &apos;15821466666&apos;\n        };\n    },\n    render: function () {\n        return (\n                &lt;div&gt;\n                    &lt;label htmlFor=&quot;phone&quot;&gt;手机号：&lt;/label&gt;\n                    &lt;input type=&apos;text&apos; id=&quot;phone&quot; value={this.state.phone} onChange={this.phoneChangeHlr} /&gt;\n                &lt;/div&gt;\n            );\n    },\n    phoneChangeHlr: function (event) {\n        this.setState({phone: event.target.value});\n    }\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;app&apos;));\n</code></pre><h2 id=\"React-add-ons\"><a href=\"#React-add-ons\" class=\"headerlink\" title=\"React - add-ons\"></a>React - add-ons</h2><ul>\n<li>TransitionGroup和CSSTransitionGroup</li>\n<li>LinkedStateMixin - 用于简化用户表单输入数据和组件 state 之间的双向数据绑定</li>\n<li>classSet，用于更加干净简洁地操作 DOM 中的 class 字符串</li>\n<li>cloneWithProps，用于实现 React 组件浅复制，同时改变它们的 props </li>\n<li>update，一个辅助方法，使得在 JavaScript 中处理不可变数据更加容易</li>\n<li>PureRenderMixin，在某些场景下的性能检测器</li>\n</ul>\n<h2 id=\"LinkedStateMixin-DEMO\"><a href=\"#LinkedStateMixin-DEMO\" class=\"headerlink\" title=\"LinkedStateMixin - DEMO\"></a>LinkedStateMixin - DEMO</h2><pre><code>var LinkedStateMixin = React.addons.LinkedStateMixin;\nvar App = React.createClass({\n    mixins: [LinkedStateMixin],\n    getInitialState: function () {\n        return {\n            phone: &apos;15821466666&apos;\n        };\n    },\n    render: function () {\n        return (\n                &lt;div&gt;\n                    &lt;label htmlFor=&quot;phone&quot;&gt;手机号：&lt;/label&gt;\n                    &lt;input type=&apos;text&apos; id=&quot;phone&quot; valueLink={this.linkState(&apos;phone&apos;)}  /&gt;\n                &lt;/div&gt;\n            );\n    }\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;app&apos;));\n</code></pre><h2 id=\"开发工具webpack\"><a href=\"#开发工具webpack\" class=\"headerlink\" title=\"开发工具webpack\"></a>开发工具webpack</h2><h3 id=\"webpack-react-install\"><a href=\"#webpack-react-install\" class=\"headerlink\" title=\"webpack + react install\"></a>webpack + react install</h3><ul>\n<li>npm init</li>\n<li>npm install –save react react</li>\n<li>npm install –save-dev webpack webpack-dev-server</li>\n<li>npm install –save-dev jsx-loader css-loader file-loader style-loader url-loader</li>\n</ul>\n<h3 id=\"Configuring-webpack\"><a href=\"#Configuring-webpack\" class=\"headerlink\" title=\"Configuring webpack\"></a>Configuring webpack</h3><pre><code>var webpack = require(&apos;webpack&apos;);\n\nmodule.exports = {\n    // 它定义了打包的入口文件，数组中的文件会按顺序进行，并且它会自行解决依赖问题。\n    entry: {\n        main: &apos;./pages/main.js&apos;,\n    },\n    // 它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径\n    output: {\n        path: __dirname + &apos;/build&apos;,\n        publicPath: &apos;/build/&apos;,\n        filename: &apos;[name].js&apos;\n    },\n    // Webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。\n    // resolve属性中的extensions数组中用于配置程序可以自行补全哪些后缀。\n    // 比如 Hello.jsx 这样的文件就可以直接用 require(./Hello) 引用。\n    resolve: {\n        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.jsx&apos;]\n    },\n    // webpack将所有的资源都看做是模块，而模块就需要加载器\n    module: {\n        loaders: [\n            // loaders 指定 jsx-loader 编译后缀名为 .jsx 的文件，\n            // 建议给含有 JSX 的文件添加 .jsx 后缀，\n            // 当然你也可以直接使用 .js 后缀， 相应的 test 配置正则要修改匹配就是。\n            { test: /\\.js?$/, exclude: /node_modules/, loader: &apos;jsx?harmony&apos; }, \n            { test: /\\.(css)/, loader: &apos;style-loader!css-loader&apos; },\n            // inline base64 URLs for &lt;=8k images, direct URLs for the rest\n            {test: /\\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos; } \n            // loaders: [&apos;react-hot&apos;, &apos;jsx?harmony&apos;]\n            // loaders后面如果跟的不是数组，则会报错：LoadersList.js:81 r.forEach(function(r) \n        ]\n    },\n    // 我们可以在plugin参数中配置我们需要用到的各种各样的插件。\n    plugins: [\n        new webpack.NoErrorsPlugin(),\n    ]\n}\n</code></pre><h3 id=\"Webpack-命令\"><a href=\"#Webpack-命令\" class=\"headerlink\" title=\"Webpack 命令\"></a>Webpack 命令</h3><p>启动webpack命令</p>\n<ul>\n<li>webpack -d 提供SourceMaps，方便调试</li>\n<li>webpack -w 提供watch方法，实时进行打包更新</li>\n<li>webpack –colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤</li>\n<li>webpack –progress 输出的接口带进度</li>\n<li>webpack –profile 输出性能数据，可以看到每一步的耗时</li>\n<li>webpack -p 对打包后的文件进行压缩</li>\n<li>webpack –config <filename> 支持指定实用的配置文件，处理release和debug不同的情况</filename></li>\n</ul>\n<h3 id=\"配置scripts\"><a href=\"#配置scripts\" class=\"headerlink\" title=\"配置scripts\"></a>配置scripts</h3><pre><code>&quot;scripts&quot;: {\n    &quot;locDev&quot;: &quot;webpack -d -w --progress --colors&quot;,\n    &quot;serDev&quot;: &quot;webpack-dev-server --progress --colors --port 8082&quot;\n}\n</code></pre><h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><ul>\n<li>npm run locDev</li>\n<li>npm run serDev</li>\n</ul>\n<h3 id=\"React-热插拔\"><a href=\"#React-热插拔\" class=\"headerlink\" title=\"React - 热插拔\"></a>React - 热插拔</h3><ul>\n<li>npm install –save-dev react-hot-loader</li>\n<li>webpack.config.js: entry 使用数组，并添加 ‘webpack/hot/only-dev-server’</li>\n<li>webpack.config.js: loaders: [‘react-hot’, ‘jsx?harmony’]</li>\n<li>入口文件添加 module.hot.accept()</li>\n<li>启动：webpack-dev-server -d –port 8082 –hot –progress –colors</li>\n</ul>\n<h3 id=\"React-热拔插多个入口\"><a href=\"#React-热拔插多个入口\" class=\"headerlink\" title=\"React - 热拔插多个入口\"></a>React - 热拔插多个入口</h3><ul>\n<li>webpack.config.js: entry:<br>  entry: {<pre><code>main: [&apos;./pages/main/index.js&apos;, &apos;webpack/hot/only-dev-server&apos;],\nhelp: [&apos;./pages/help/index.js&apos;, &apos;webpack/hot/only-dev-server&apos;]\n</code></pre>  }</li>\n</ul>\n<h2 id=\"React-render时机\"><a href=\"#React-render时机\" class=\"headerlink\" title=\"React - render时机\"></a>React - render时机</h2><h3 id=\"批量更新-事件回调函数\"><a href=\"#批量更新-事件回调函数\" class=\"headerlink\" title=\"批量更新 - 事件回调函数\"></a>批量更新 - 事件回调函数</h3><ul>\n<li>事件处理函数中的多次setState/replaceState会被标记为一次批量更新</li>\n<li>事件处理函数本身在React事件机制中是作为一个回调函数被调用，在函数执行完成后才会触发render</li>\n</ul>\n<h3 id=\"实时更新-其他\"><a href=\"#实时更新-其他\" class=\"headerlink\" title=\"实时更新 - 其他\"></a>实时更新 - 其他</h3><ul>\n<li>调用setState/replaceState后直接触发render，比如setInterval</li>\n</ul>\n<h3 id=\"render流程\"><a href=\"#render流程\" class=\"headerlink\" title=\"render流程\"></a>render流程</h3><ul>\n<li>setState/replaceState 修改状态后</li>\n<li>组件添加等待更新的状态列表，并把新的状态压入列表（ReactUpdateQueue.js: enqueueSetState()）</li>\n<li>标记组件为需要重新渲染的组件（dirty components list）ReactUpdates：enqueueUpdate()</li>\n<li>runBatchedUpdates来处理dirty components（调用对应的render）</li>\n</ul>\n<h2 id=\"React-React事件系统\"><a href=\"#React-React事件系统\" class=\"headerlink\" title=\"React - React事件系统\"></a>React - React事件系统</h2><ol>\n<li>React初始化时会把事件监听 ReactEventListener 注入到 ReactBrowserEventEmitter</li>\n<li>ReactBrowserEventEmitter 是浏览器事件的顶级委托，ReactEventListener 为用户绑定事件的DOM绑定自己的处理函数，并在处理函数中调用用户的事件处理函数，然后理render相关逻辑；</li>\n<li>React 事件系统：<ul>\n<li>浏览器事件的顶级委托（top-level delegation）用来 trap (捕获？) 大多数原生浏览器事件，可以注入事件处理器；</li>\n<li>主线程唯一的工作是注入的 ReactEventListener（是为可插拔事件源准备的事件监听器）；</li>\n<li>转发这些被 trap 原生浏览器事件至 EventPluginHub， EventPluginHub 在提取任何组合事件时会调用对应插件（比如 SimpleEventPlugin ）并返回需要处理的事件列表；</li>\n<li>事件插件包括：ResponderEventPlugin、SimpleEventPlugin、TapEventPlugin、EnterLeaveEventPlugin、ChangeEventPlugin、SelectEventPlugin、BeforeInputEventPlugin</li>\n<li>EventPluginHub 同时会维护Dom、事件名称和事件处理器的Mapping；</li>\n<li>ReactEventListener 监听 EventPluginHub 的事件，并处理事件派发及事件响应</li>\n<li>ReactEventListener 的事件响应函数会处理用户的事件处理函数</li>\n</ul>\n</li>\n<li>React组件及组件树的渲染都是在ReactMount里面执行</li>\n<li>mount组件时，初始化组件并注册事件监听（mountComponent）</li>\n<li>事件响应由ReactEventListener的dispatchEvent触发，通过EventPluginHub找到事件处理相关 </li>\n<li>我们的事件函数作为回调处理</li>\n</ol>\n","excerpt":"","more":"<p>React -start</p>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><ul>\n<li>Facebook</li>\n<li>MVC中的V：M -&gt; V</li>\n<li>和Flux搭配，可以做到MVVM</li>\n<li>默认转义所有字符串，防止XSS攻击</li>\n<li>React认为HTML标签及生成这些标签的代码间存在着内在联系，React设计允许你在构建标签结构时充分利用JS的强大能力，而不必在笨拙的模板语言上浪费时间</li>\n</ul>\n<h2 id=\"Why-React\"><a href=\"#Why-React\" class=\"headerlink\" title=\"Why React?\"></a>Why React?</h2><ul>\n<li>简单:<br>model改变后，react自动处理用户界面的更新；</li>\n<li>声明式:<br>更新界面时，react仅仅会更新变化的部分；</li>\n<li>虚拟Dom:<br>React在内存中维护一个快速响应的DOM描述，并利用他来快速地计算出差异，然后更新浏览器中的DOM;</li>\n</ul>\n<h2 id=\"React-最需要走心的工作\"><a href=\"#React-最需要走心的工作\" class=\"headerlink\" title=\"React 最需要走心的工作\"></a>React 最需要走心的工作</h2><ul>\n<li>构建可组合的、可复用的组件;</li>\n<li>组件的好处：代码复用、测试简单;</li>\n</ul>\n<h2 id=\"React-hello-world\"><a href=\"#React-hello-world\" class=\"headerlink\" title=\"React - hello world\"></a>React - hello world</h2><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;./react.js&quot;&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n        &lt;script type=&quot;text/javascript&quot;&gt;\n            function h1 (text, style) {\n                return &apos;&lt;h1&gt;&apos;&apos; + text + &apos;&lt;/h1&gt;&apos;;\n            }\n            var el = React.createElement(&apos;h1&apos;, {style: {color: &apos;#00f&apos;}}, &apos;Hello World!&apos;);\n            React.render(el, document.getElementById(&apos;app&apos;));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"React-类似的工作\"><a href=\"#React-类似的工作\" class=\"headerlink\" title=\"React - 类似的工作\"></a>React - 类似的工作</h2><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n        &lt;script type=&quot;text/javascript&quot;&gt;\n              function h1 (text, style) {\n                var result;\n                var styleStr;\n\n                if (style) {\n                    styleStr = &apos;style=&quot;&apos;;\n                    for (var name in style) {\n                        styleStr += name + &apos;:&apos; + style[name] + &apos;;&apos;; \n                    }\n                    styleStr += &apos;&quot;&apos;;\n                }\n\n                if (styleStr) {\n                    result = &apos;&lt;h1 &apos; + styleStr + &apos;&gt;&apos; + text + &apos;&lt;/h1&gt;&apos;;\n                } else {\n                    result = &apos;&lt;h1&gt;&apos; + text + &apos;&lt;/h1&gt;&apos;;\n                }\n\n                  return result;\n              }\n\n              function render(target, container) {\n                container.innerHTML = target;\n              }\n\n              render(h1(&apos;Hello World!&apos;, {color: &apos;#00f&apos;}), document.getElementById(&apos;app&apos;));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"JSX-Javascript-XML\"><a href=\"#JSX-Javascript-XML\" class=\"headerlink\" title=\"JSX - Javascript XML\"></a>JSX - Javascript XML</h2><ul>\n<li>优势：<ul>\n<li>类HTML标记语言，都是熟悉的语法</li>\n<li>抽象了React Element的创建过程</li>\n<li>简单直观，可以提升效率且成本很低</li>\n</ul>\n</li>\n<li>劣势：<ul>\n<li>在浏览器运行会很慢，项目中需要预处理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"JSX-hello-world\"><a href=\"#JSX-hello-world\" class=\"headerlink\" title=\"JSX - hello world\"></a>JSX - hello world</h2><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;React Hello World&lt;/title&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;./react.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;./JSXTransformer.js&quot;&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n        &lt;script type=&quot;text/jsx&quot;&gt;\n            React.render(&lt;h1&gt;Hello World, JSX!&lt;/h1&gt;, document.getElementById(&apos;app&apos;));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"JSX-工作原理\"><a href=\"#JSX-工作原理\" class=\"headerlink\" title=\"JSX - 工作原理\"></a>JSX - 工作原理</h2><ol>\n<li>使用JSXTransformer通过监听windows的onload/DOMContentLoaded，来遍历所有”text/jsx”脚本标签</li>\n<li>获取每个标签的source code并把JSX代码转为react的虚拟dom代码</li>\n<li>最后把react代码添加到新建的script标签中</li>\n<li>预编译的插件是同理，只不过发生在编译阶段</li>\n</ol>\n<h2 id=\"JSX-Tips\"><a href=\"#JSX-Tips\" class=\"headerlink\" title=\"JSX Tips\"></a>JSX Tips</h2><ul>\n<li>JSX设置动态属性时，用花括号包裹Javascript变量</li>\n<li>也可以把属性设置为一个函数的调用返回结果</li>\n<li>条件判断支持：三元运输符、&amp;&amp;、||</li>\n<li>key: 列表时会建议使用，重用组件提升渲染性能</li>\n<li>refs：获取创建dom的描述对象 or 获取创建dom的对象, this.refs.usernameInput.getDOMNode() x</li>\n<li>HTML关键词：for &gt; htmlFor, class &gt; className, style: {}</li>\n<li>事件统一使用驼峰式</li>\n</ul>\n<h2 id=\"React-Tips\"><a href=\"#React-Tips\" class=\"headerlink\" title=\"React Tips\"></a>React Tips</h2><ul>\n<li>React创建的class名称首字母必须大写，不然找不到</li>\n<li>JSX可以不换行，换行时必须使用（）包装，不然会报非法组件错误；</li>\n<li>只能有根一个节点，多个节点会抛错</li>\n<li>内联样式支持对象，名称使用驼峰式，否则不起作用，fontSize</li>\n<li>返回：null、false、React组件</li>\n</ul>\n<h2 id=\"组件的复合\"><a href=\"#组件的复合\" class=\"headerlink\" title=\"组件的复合\"></a>组件的复合</h2><ul>\n<li>复用那些接口定义良好的组件来开发新的模块化组件</li>\n<li>官网提供的获取子组件的方法：this.props.children X</li>\n<li>组件支持 ref=”refId”，访问元素：this.refs.refId</li>\n</ul>\n<h2 id=\"React-组件数据流\"><a href=\"#React-组件数据流\" class=\"headerlink\" title=\"React - 组件数据流\"></a>React - 组件数据流</h2><ul>\n<li>props</li>\n<li>state</li>\n</ul>\n<h2 id=\"React-dom对象\"><a href=\"#React-dom对象\" class=\"headerlink\" title=\"React - dom对象\"></a>React - dom对象</h2><ul>\n<li>refs</li>\n</ul>\n<h2 id=\"React-组件生命周期\"><a href=\"#React-组件生命周期\" class=\"headerlink\" title=\"React - 组件生命周期\"></a>React - 组件生命周期</h2><h3 id=\"组件类创建时\"><a href=\"#组件类创建时\" class=\"headerlink\" title=\"组件类创建时\"></a>组件类创建时</h3><ul>\n<li>getDefaultProps</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ul>\n<li>getinitialState</li>\n</ul>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><ul>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><ul>\n<li>componentWillUnmount</li>\n</ul>\n<h3 id=\"Class-Create-Pahses\"><a href=\"#Class-Create-Pahses\" class=\"headerlink\" title=\"Class Create Pahses:\"></a>Class Create Pahses:</h3><pre><code>+ getDefaultProps: invoke while class created and be shared between instances.\n</code></pre><h3 id=\"Initialization-Pahses\"><a href=\"#Initialization-Pahses\" class=\"headerlink\" title=\"Initialization Pahses:\"></a>Initialization Pahses:</h3><pre><code>+ constructor: Initialization of state. The instance is now retained.\n+ componentWillMount\n+ render\n+ [children&apos;s constructors]\n    - [children&apos;s componentWillMount and render]\n    - [children&apos;s componentDidMount]\n+ componentDidMount\n</code></pre><h3 id=\"Update-Phases\"><a href=\"#Update-Phases\" class=\"headerlink\" title=\"Update Phases:\"></a>Update Phases:</h3><pre><code>+ componentWillReceiveProps (only called if parent updated)\n+ shouldComponentUpdate (default: always returns true to prevent subtle bugs)\n    - componentWillUpdate\n    - render\n        + [children&apos;s constructors or receive props phases]\n    - componentDidUpdate\n</code></pre><h3 id=\"Unmount-Phases\"><a href=\"#Unmount-Phases\" class=\"headerlink\" title=\"Unmount Phases:\"></a>Unmount Phases:</h3><pre><code>+ componentWillUnmount\n    - [children&apos;s componentWillUnmount]\n    - [children destroyed]\n+ (destroyed): The instance is now blank, released by React and ready for GC\n</code></pre><h2 id=\"Mixin\"><a href=\"#Mixin\" class=\"headerlink\" title=\"Mixin\"></a>Mixin</h2><ul>\n<li>独立于组件的</li>\n<li>多个组件可共享的</li>\n<li>对象类型的配置</li>\n</ul>\n<h2 id=\"Mixin-DEMO\"><a href=\"#Mixin-DEMO\" class=\"headerlink\" title=\"Mixin - DEMO\"></a>Mixin - DEMO</h2><pre><code>var userMixin = {\n    getDefaultProps: function () {\n        return {\n            username: &apos;小红&apos;\n        };\n    },\n    renderUser: function (welcomeMsg) {\n        return (\n                &lt;div className=&quot;user-wrap&quot;&gt;\n                    &lt;span ref=&quot;welcomeDesc&quot; className=&quot;welcome-user&quot;&gt;{welcomeMsg}&lt;/span&gt;\n                &lt;/div&gt;\n            );\n    },\n    componentDidMount: function () {\n        console.log(&apos;mount&apos;);\n    }\n}\n\n\nvar Header = React.createClass({\n    mixins: [userMixin],\n    getInitialState: function () {\n        return {\n            systemName: &apos;React平台Header&apos;\n        };\n    },\n    render: function () {\n        var welcomeMsg;\n        if (this.props.username) {\n            welcomeMsg = &apos;欢迎，&apos; + this.props.username + &apos;！&apos;\n        };\n        return (\n                &lt;div className=&quot;header-content&quot;&gt;\n                    &lt;h1&gt;{this.state.systemName}&lt;/h1&gt;\n                    {\n                        welcomeMsg ? this.renderUser(welcomeMsg) : null\n                    }\n                &lt;/div&gt;\n            );\n    }\n});\n</code></pre><h2 id=\"React-Mixin原理\"><a href=\"#React-Mixin原理\" class=\"headerlink\" title=\"React - Mixin原理\"></a>React - Mixin原理</h2><ul>\n<li>Mixin必须是一个对象</li>\n<li>在React.createClass（源码：ReactClass &gt; createClass: function (spec) {…}会把Mixin对象融入react对象</li>\n<li>融入过程是通过遍历Mixin的属性（for..in）逐个添加到react对象得prototype上（mixSpecIntoComponent）</li>\n<li>添加之前需要判断是否已经有了相同属性，且此属性是否支持覆盖、是否支持多个、是否需要合并</li>\n<li>添加的方式是：覆盖（override）、合并、多个函数链</li>\n</ul>\n<h2 id=\"React-Mixin融合方式的标准\"><a href=\"#React-Mixin融合方式的标准\" class=\"headerlink\" title=\"React - Mixin融合方式的标准\"></a>React - Mixin融合方式的标准</h2><ul>\n<li>一些基础的属性是不允许覆盖的，比如：setProps、replaceProps、replaceState、isMounted</li>\n<li>渲染的属性是不允许定义多次的，比如：render、shouldComponentUpdate</li>\n<li>需要合并的是那些有返回值的，比如：getDefaultProps、getInitialState</li>\n<li>其他的都支持多个函数链的形式（先执行已有的，在执行Mixin的），比如：willMount、didMount、willUpdate、didUpdate等等</li>\n</ul>\n<h2 id=\"React-PureRenderMixin\"><a href=\"#React-PureRenderMixin\" class=\"headerlink\" title=\"React - PureRenderMixin\"></a>React - PureRenderMixin</h2><ul>\n<li>React组件的渲染函数是“纯粹的” - 同样的props和state，渲染出同样的效果</li>\n<li>可以提升性能 - 在shouldComponentUpdate里检查props、state是否会发生变化</li>\n<li>shouldComponentUpdate的判断结果会影响整个组件子树</li>\n<li>据说props、state比较是浅比较，不适合(特别)复杂的数据结构</li>\n</ul>\n<h2 id=\"PureRenderMixin-shouldComponentUpdate-shallow-check\"><a href=\"#PureRenderMixin-shouldComponentUpdate-shallow-check\" class=\"headerlink\" title=\"PureRenderMixin - shouldComponentUpdate: shallow check\"></a>PureRenderMixin - shouldComponentUpdate: shallow check</h2><pre><code>/**\n - Performs equality by iterating through keys on an object and returning false\n - when any key has values which are not strictly equal between the arguments.\n - Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== &apos;object&apos; || objA === null || typeof objB !== &apos;object&apos; || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A&apos;s keys different from B.\n  var bHasOwnProperty = hasOwnProperty.bind(objB);\n  for (var i = 0; i &lt; keysA.length; i++) {\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n</code></pre><h2 id=\"React-表单组件\"><a href=\"#React-表单组件\" class=\"headerlink\" title=\"React - 表单组件\"></a>React - 表单组件</h2><h3 id=\"受用户交互影响的属性\"><a href=\"#受用户交互影响的属性\" class=\"headerlink\" title=\"受用户交互影响的属性\"></a>受用户交互影响的属性</h3><ul>\n<li>value，用于 input、textarea 组件</li>\n<li>checked，用于类型为 checkbox 或者 radio 的 input 组件</li>\n<li>selected，用于 option 组件</li>\n</ul>\n<h3 id=\"onChange-回调函数来监听组件变化\"><a href=\"#onChange-回调函数来监听组件变化\" class=\"headerlink\" title=\"onChange 回调函数来监听组件变化\"></a>onChange 回调函数来监听组件变化</h3><ul>\n<li>input 或 textarea 的 value 发生变化时。</li>\n<li>input 的 checked 状态改变时。</li>\n<li>option 的 selected 状态改变时。</li>\n</ul>\n<h3 id=\"Controlled-Components-受限组件\"><a href=\"#Controlled-Components-受限组件\" class=\"headerlink\" title=\"Controlled Components - 受限组件\"></a>Controlled Components - 受限组件</h3><ul>\n<li>设置了 value 的 input 是一个受限组件</li>\n</ul>\n<h3 id=\"受限组件-DEMO\"><a href=\"#受限组件-DEMO\" class=\"headerlink\" title=\"受限组件 - DEMO\"></a>受限组件 - DEMO</h3><pre><code>var App = React.createClass({\n    getInitialState: function () {\n        return {\n            phone: &apos;15821466666&apos;\n        };\n    },\n    render: function () {\n        return (\n                &lt;div&gt;\n                    &lt;label htmlFor=&quot;phone&quot;&gt;手机号：&lt;/label&gt;\n                    &lt;input type=&apos;text&apos; id=&quot;phone&quot; value={this.state.phone} onChange={this.phoneChangeHlr} /&gt;\n                &lt;/div&gt;\n            );\n    },\n    phoneChangeHlr: function (event) {\n        this.setState({phone: event.target.value});\n    }\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;app&apos;));\n</code></pre><h2 id=\"React-add-ons\"><a href=\"#React-add-ons\" class=\"headerlink\" title=\"React - add-ons\"></a>React - add-ons</h2><ul>\n<li>TransitionGroup和CSSTransitionGroup</li>\n<li>LinkedStateMixin - 用于简化用户表单输入数据和组件 state 之间的双向数据绑定</li>\n<li>classSet，用于更加干净简洁地操作 DOM 中的 class 字符串</li>\n<li>cloneWithProps，用于实现 React 组件浅复制，同时改变它们的 props </li>\n<li>update，一个辅助方法，使得在 JavaScript 中处理不可变数据更加容易</li>\n<li>PureRenderMixin，在某些场景下的性能检测器</li>\n</ul>\n<h2 id=\"LinkedStateMixin-DEMO\"><a href=\"#LinkedStateMixin-DEMO\" class=\"headerlink\" title=\"LinkedStateMixin - DEMO\"></a>LinkedStateMixin - DEMO</h2><pre><code>var LinkedStateMixin = React.addons.LinkedStateMixin;\nvar App = React.createClass({\n    mixins: [LinkedStateMixin],\n    getInitialState: function () {\n        return {\n            phone: &apos;15821466666&apos;\n        };\n    },\n    render: function () {\n        return (\n                &lt;div&gt;\n                    &lt;label htmlFor=&quot;phone&quot;&gt;手机号：&lt;/label&gt;\n                    &lt;input type=&apos;text&apos; id=&quot;phone&quot; valueLink={this.linkState(&apos;phone&apos;)}  /&gt;\n                &lt;/div&gt;\n            );\n    }\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;app&apos;));\n</code></pre><h2 id=\"开发工具webpack\"><a href=\"#开发工具webpack\" class=\"headerlink\" title=\"开发工具webpack\"></a>开发工具webpack</h2><h3 id=\"webpack-react-install\"><a href=\"#webpack-react-install\" class=\"headerlink\" title=\"webpack + react install\"></a>webpack + react install</h3><ul>\n<li>npm init</li>\n<li>npm install –save react react</li>\n<li>npm install –save-dev webpack webpack-dev-server</li>\n<li>npm install –save-dev jsx-loader css-loader file-loader style-loader url-loader</li>\n</ul>\n<h3 id=\"Configuring-webpack\"><a href=\"#Configuring-webpack\" class=\"headerlink\" title=\"Configuring webpack\"></a>Configuring webpack</h3><pre><code>var webpack = require(&apos;webpack&apos;);\n\nmodule.exports = {\n    // 它定义了打包的入口文件，数组中的文件会按顺序进行，并且它会自行解决依赖问题。\n    entry: {\n        main: &apos;./pages/main.js&apos;,\n    },\n    // 它定义了输出文件的的位置，包括路径，文件名，还可能有运行时的访问路径\n    output: {\n        path: __dirname + &apos;/build&apos;,\n        publicPath: &apos;/build/&apos;,\n        filename: &apos;[name].js&apos;\n    },\n    // Webpack 是使用类似 Browserify 的方式在本地按目录对依赖进行查找。\n    // resolve属性中的extensions数组中用于配置程序可以自行补全哪些后缀。\n    // 比如 Hello.jsx 这样的文件就可以直接用 require(./Hello) 引用。\n    resolve: {\n        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.jsx&apos;]\n    },\n    // webpack将所有的资源都看做是模块，而模块就需要加载器\n    module: {\n        loaders: [\n            // loaders 指定 jsx-loader 编译后缀名为 .jsx 的文件，\n            // 建议给含有 JSX 的文件添加 .jsx 后缀，\n            // 当然你也可以直接使用 .js 后缀， 相应的 test 配置正则要修改匹配就是。\n            { test: /\\.js?$/, exclude: /node_modules/, loader: &apos;jsx?harmony&apos; }, \n            { test: /\\.(css)/, loader: &apos;style-loader!css-loader&apos; },\n            // inline base64 URLs for &lt;=8k images, direct URLs for the rest\n            {test: /\\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos; } \n            // loaders: [&apos;react-hot&apos;, &apos;jsx?harmony&apos;]\n            // loaders后面如果跟的不是数组，则会报错：LoadersList.js:81 r.forEach(function(r) \n        ]\n    },\n    // 我们可以在plugin参数中配置我们需要用到的各种各样的插件。\n    plugins: [\n        new webpack.NoErrorsPlugin(),\n    ]\n}\n</code></pre><h3 id=\"Webpack-命令\"><a href=\"#Webpack-命令\" class=\"headerlink\" title=\"Webpack 命令\"></a>Webpack 命令</h3><p>启动webpack命令</p>\n<ul>\n<li>webpack -d 提供SourceMaps，方便调试</li>\n<li>webpack -w 提供watch方法，实时进行打包更新</li>\n<li>webpack –colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤</li>\n<li>webpack –progress 输出的接口带进度</li>\n<li>webpack –profile 输出性能数据，可以看到每一步的耗时</li>\n<li>webpack -p 对打包后的文件进行压缩</li>\n<li>webpack –config <filename> 支持指定实用的配置文件，处理release和debug不同的情况</li>\n</ul>\n<h3 id=\"配置scripts\"><a href=\"#配置scripts\" class=\"headerlink\" title=\"配置scripts\"></a>配置scripts</h3><pre><code>&quot;scripts&quot;: {\n    &quot;locDev&quot;: &quot;webpack -d -w --progress --colors&quot;,\n    &quot;serDev&quot;: &quot;webpack-dev-server --progress --colors --port 8082&quot;\n}\n</code></pre><h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><ul>\n<li>npm run locDev</li>\n<li>npm run serDev</li>\n</ul>\n<h3 id=\"React-热插拔\"><a href=\"#React-热插拔\" class=\"headerlink\" title=\"React - 热插拔\"></a>React - 热插拔</h3><ul>\n<li>npm install –save-dev react-hot-loader</li>\n<li>webpack.config.js: entry 使用数组，并添加 ‘webpack/hot/only-dev-server’</li>\n<li>webpack.config.js: loaders: [‘react-hot’, ‘jsx?harmony’]</li>\n<li>入口文件添加 module.hot.accept()</li>\n<li>启动：webpack-dev-server -d –port 8082 –hot –progress –colors</li>\n</ul>\n<h3 id=\"React-热拔插多个入口\"><a href=\"#React-热拔插多个入口\" class=\"headerlink\" title=\"React - 热拔插多个入口\"></a>React - 热拔插多个入口</h3><ul>\n<li>webpack.config.js: entry:<br>  entry: {<pre><code>main: [&apos;./pages/main/index.js&apos;, &apos;webpack/hot/only-dev-server&apos;],\nhelp: [&apos;./pages/help/index.js&apos;, &apos;webpack/hot/only-dev-server&apos;]\n</code></pre>  }</li>\n</ul>\n<h2 id=\"React-render时机\"><a href=\"#React-render时机\" class=\"headerlink\" title=\"React - render时机\"></a>React - render时机</h2><h3 id=\"批量更新-事件回调函数\"><a href=\"#批量更新-事件回调函数\" class=\"headerlink\" title=\"批量更新 - 事件回调函数\"></a>批量更新 - 事件回调函数</h3><ul>\n<li>事件处理函数中的多次setState/replaceState会被标记为一次批量更新</li>\n<li>事件处理函数本身在React事件机制中是作为一个回调函数被调用，在函数执行完成后才会触发render</li>\n</ul>\n<h3 id=\"实时更新-其他\"><a href=\"#实时更新-其他\" class=\"headerlink\" title=\"实时更新 - 其他\"></a>实时更新 - 其他</h3><ul>\n<li>调用setState/replaceState后直接触发render，比如setInterval</li>\n</ul>\n<h3 id=\"render流程\"><a href=\"#render流程\" class=\"headerlink\" title=\"render流程\"></a>render流程</h3><ul>\n<li>setState/replaceState 修改状态后</li>\n<li>组件添加等待更新的状态列表，并把新的状态压入列表（ReactUpdateQueue.js: enqueueSetState()）</li>\n<li>标记组件为需要重新渲染的组件（dirty components list）ReactUpdates：enqueueUpdate()</li>\n<li>runBatchedUpdates来处理dirty components（调用对应的render）</li>\n</ul>\n<h2 id=\"React-React事件系统\"><a href=\"#React-React事件系统\" class=\"headerlink\" title=\"React - React事件系统\"></a>React - React事件系统</h2><ol>\n<li>React初始化时会把事件监听 ReactEventListener 注入到 ReactBrowserEventEmitter</li>\n<li>ReactBrowserEventEmitter 是浏览器事件的顶级委托，ReactEventListener 为用户绑定事件的DOM绑定自己的处理函数，并在处理函数中调用用户的事件处理函数，然后理render相关逻辑；</li>\n<li>React 事件系统：<ul>\n<li>浏览器事件的顶级委托（top-level delegation）用来 trap (捕获？) 大多数原生浏览器事件，可以注入事件处理器；</li>\n<li>主线程唯一的工作是注入的 ReactEventListener（是为可插拔事件源准备的事件监听器）；</li>\n<li>转发这些被 trap 原生浏览器事件至 EventPluginHub， EventPluginHub 在提取任何组合事件时会调用对应插件（比如 SimpleEventPlugin ）并返回需要处理的事件列表；</li>\n<li>事件插件包括：ResponderEventPlugin、SimpleEventPlugin、TapEventPlugin、EnterLeaveEventPlugin、ChangeEventPlugin、SelectEventPlugin、BeforeInputEventPlugin</li>\n<li>EventPluginHub 同时会维护Dom、事件名称和事件处理器的Mapping；</li>\n<li>ReactEventListener 监听 EventPluginHub 的事件，并处理事件派发及事件响应</li>\n<li>ReactEventListener 的事件响应函数会处理用户的事件处理函数</li>\n</ul>\n</li>\n<li>React组件及组件树的渲染都是在ReactMount里面执行</li>\n<li>mount组件时，初始化组件并注册事件监听（mountComponent）</li>\n<li>事件响应由ReactEventListener的dispatchEvent触发，通过EventPluginHub找到事件处理相关 </li>\n<li>我们的事件函数作为回调处理</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cimvsajy900021sja47e28hob","tag_id":"cimwte5ji00004gjax4zao5er","_id":"cimwte5jm00014gjag9afilo2"}],"Tag":[{"name":"react","_id":"cimwte5ji00004gjax4zao5er"}]}}